
task-13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002304  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002304  00002398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800080  00800080  000023b8  2**0
                  ALLOC
  3 .stab         00001c44  00000000  00000000  000023b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f83  00000000  00000000  00003ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000050bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000522f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007d63  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000096cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <main>
      8a:	0c 94 80 11 	jmp	0x2300	; 0x2300 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
static u8 ADC_u8State= IDLE ;

//=====================================================================================================================

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	#if ADC_VREF == AREF
		CLR_BIT(ADMUX , ADMUX_REFS0) ;
		CLR_BIT(ADMUX , ADMUX_REFS1) ;

	#elif ADC_VREF == AVCC
		SET_BIT(ADMUX , ADMUX_REFS0) ;
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX , ADMUX_REFS1) ;
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
	#endif


	/*Set Left Adjust Result*/
	#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
			CLR_BIT(ADMUX , ADMUX_ADLAR) ;
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24
		#error "Wrong ADC_ADJUSTMENT config"
	
	#endif 

	/*Set Prescaler Value*/
	ADSAR &= ADC_PRE_MASK ;
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 7f       	andi	r24, 0xF8	; 248
     b84:	8c 93       	st	X, r24
	ADSAR |= ADC_PRESCALLER ;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 60       	ori	r24, 0x07	; 7
     b92:	8c 93       	st	X, r24
	
	/*Enable ADC Peripheral*/
	#if ADC_STATUS == ADC_DISABLE
		CLR_BIT(ADSAR , ADSAR_ADEN) ;
	#elif ADC_STATUS == ADC_ENABLE
		SET_BIT(ADSAR , ADSAR_ADEN) ;
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24

	/*Enable ADC Interrupt*/
	#if INT_STATUS == INT_DISABLE
		CLR_BIT(ADSAR , ADSAR_ADIE) ;
	#elif INT_STATUS == INT_ENABLE
		SET_BIT(ADSAR , ADSAR_ADIE) ;
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	88 60       	ori	r24, 0x08	; 8
     bae:	8c 93       	st	X, r24
	#else
	#error "Wrong INT_STATUS config"
	#endif 

}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_voidEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidEnable (void)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADSAR , ADSAR_ADEN) ;
     bbe:	a6 e2       	ldi	r26, 0x26	; 38
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e6 e2       	ldi	r30, 0x26	; 38
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	80 68       	ori	r24, 0x80	; 128
     bca:	8c 93       	st	X, r24
}
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <ADC_voidDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidDisable (void)
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADSAR , ADSAR_ADEN) ;
     bda:	a6 e2       	ldi	r26, 0x26	; 38
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e6 e2       	ldi	r30, 0x26	; 38
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	8f 77       	andi	r24, 0x7F	; 127
     be6:	8c 93       	st	X, r24
}
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <ADC_voidInterruptEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidInterruptEnable (void)
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADSAR , ADSAR_ADIE) ;
     bf6:	a6 e2       	ldi	r26, 0x26	; 38
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e6 e2       	ldi	r30, 0x26	; 38
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	88 60       	ori	r24, 0x08	; 8
     c02:	8c 93       	st	X, r24
}
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <ADC_voidInterruptDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidInterruptDisable (void)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADSAR , ADSAR_ADIE) ;
     c12:	a6 e2       	ldi	r26, 0x26	; 38
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e6 e2       	ldi	r30, 0x26	; 38
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	87 7f       	andi	r24, 0xF7	; 247
     c1e:	8c 93       	st	X, r24
}
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	08 95       	ret

00000c26 <ADC_u8SetPrescaler>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 ADC_u8SetPrescaler (u8 Copy_u8Prescaler)
{
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <ADC_u8SetPrescaler+0x6>
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
     c32:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Prescaler < 8)
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	88 30       	cpi	r24, 0x08	; 8
     c38:	78 f4       	brcc	.+30     	; 0xc58 <ADC_u8SetPrescaler+0x32>
	{
		/*Set Prescaler Value*/
		ADSAR &= ADC_PRE_MASK ;
     c3a:	a6 e2       	ldi	r26, 0x26	; 38
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e6 e2       	ldi	r30, 0x26	; 38
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	88 7f       	andi	r24, 0xF8	; 248
     c46:	8c 93       	st	X, r24
		ADSAR |= Copy_u8Prescaler ;
     c48:	a6 e2       	ldi	r26, 0x26	; 38
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e6 e2       	ldi	r30, 0x26	; 38
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	90 81       	ld	r25, Z
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	89 2b       	or	r24, r25
     c56:	8c 93       	st	X, r24
	}

	return Local_u8ErrorState ;
     c58:	89 81       	ldd	r24, Y+1	; 0x01
}
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <ADC_u8GetResultSync>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 ADC_u8GetResultSync (u8 Copy_u8Channel , u16 * Copy_pu16Result)
{
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	28 97       	sbiw	r28, 0x08	; 8
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	cd bf       	out	0x3d, r28	; 61
     c78:	8e 83       	std	Y+6, r24	; 0x06
     c7a:	78 87       	std	Y+8, r23	; 0x08
     c7c:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = OK ;
     c7e:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32TimeoutCounter = 0 ;
     c80:	19 82       	std	Y+1, r1	; 0x01
     c82:	1a 82       	std	Y+2, r1	; 0x02
     c84:	1b 82       	std	Y+3, r1	; 0x03
     c86:	1c 82       	std	Y+4, r1	; 0x04
	if (Copy_pu16Result != NULL)
     c88:	8f 81       	ldd	r24, Y+7	; 0x07
     c8a:	98 85       	ldd	r25, Y+8	; 0x08
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	09 f4       	brne	.+2      	; 0xc92 <ADC_u8GetResultSync+0x2e>
     c90:	75 c0       	rjmp	.+234    	; 0xd7c <ADC_u8GetResultSync+0x118>
	{
		if (ADC_u8State == IDLE)
     c92:	80 91 84 00 	lds	r24, 0x0084
     c96:	88 23       	and	r24, r24
     c98:	09 f0       	breq	.+2      	; 0xc9c <ADC_u8GetResultSync+0x38>
     c9a:	6d c0       	rjmp	.+218    	; 0xd76 <ADC_u8GetResultSync+0x112>
		{
			/*ADC is now Busy*/
			ADC_u8State = BUSY ;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 84 00 	sts	0x0084, r24

			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
     ca2:	a7 e2       	ldi	r26, 0x27	; 39
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e7 e2       	ldi	r30, 0x27	; 39
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	80 7e       	andi	r24, 0xE0	; 224
     cae:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel ;
     cb0:	a7 e2       	ldi	r26, 0x27	; 39
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e7 e2       	ldi	r30, 0x27	; 39
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	90 81       	ld	r25, Z
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	89 2b       	or	r24, r25
     cbe:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
     cc0:	a6 e2       	ldi	r26, 0x26	; 38
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e6 e2       	ldi	r30, 0x26	; 38
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	80 64       	ori	r24, 0x40	; 64
     ccc:	8c 93       	st	X, r24
     cce:	0b c0       	rjmp	.+22     	; 0xce6 <ADC_u8GetResultSync+0x82>

			/*Waiting until the conversion is complete*/
			while (((GET_BIT(ADSAR , ADSAR_ADIF)) == 0) && (Local_u32TimeoutCounter < ADC_TIMEOUT))
			{
				Local_u32TimeoutCounter++ ;
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	9a 81       	ldd	r25, Y+2	; 0x02
     cd4:	ab 81       	ldd	r26, Y+3	; 0x03
     cd6:	bc 81       	ldd	r27, Y+4	; 0x04
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	a1 1d       	adc	r26, r1
     cdc:	b1 1d       	adc	r27, r1
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	ab 83       	std	Y+3, r26	; 0x03
     ce4:	bc 83       	std	Y+4, r27	; 0x04

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;

			/*Waiting until the conversion is complete*/
			while (((GET_BIT(ADSAR , ADSAR_ADIF)) == 0) && (Local_u32TimeoutCounter < ADC_TIMEOUT))
     ce6:	e6 e2       	ldi	r30, 0x26	; 38
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	88 2f       	mov	r24, r24
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	80 71       	andi	r24, 0x10	; 16
     cf2:	90 70       	andi	r25, 0x00	; 0
     cf4:	95 95       	asr	r25
     cf6:	87 95       	ror	r24
     cf8:	95 95       	asr	r25
     cfa:	87 95       	ror	r24
     cfc:	95 95       	asr	r25
     cfe:	87 95       	ror	r24
     d00:	95 95       	asr	r25
     d02:	87 95       	ror	r24
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	61 f4       	brne	.+24     	; 0xd20 <ADC_u8GetResultSync+0xbc>
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	ab 81       	ldd	r26, Y+3	; 0x03
     d0e:	bc 81       	ldd	r27, Y+4	; 0x04
     d10:	80 35       	cpi	r24, 0x50	; 80
     d12:	23 ec       	ldi	r18, 0xC3	; 195
     d14:	92 07       	cpc	r25, r18
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	a2 07       	cpc	r26, r18
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	b2 07       	cpc	r27, r18
     d1e:	c0 f2       	brcs	.-80     	; 0xcd0 <ADC_u8GetResultSync+0x6c>
			{
				Local_u32TimeoutCounter++ ;
			}
			if (Local_u32TimeoutCounter == ADC_TIMEOUT)
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	9a 81       	ldd	r25, Y+2	; 0x02
     d24:	ab 81       	ldd	r26, Y+3	; 0x03
     d26:	bc 81       	ldd	r27, Y+4	; 0x04
     d28:	80 35       	cpi	r24, 0x50	; 80
     d2a:	23 ec       	ldi	r18, 0xC3	; 195
     d2c:	92 07       	cpc	r25, r18
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	a2 07       	cpc	r26, r18
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	b2 07       	cpc	r27, r18
     d36:	19 f4       	brne	.+6      	; 0xd3e <ADC_u8GetResultSync+0xda>
			{
				Local_u8ErrorState = TIMEOUT_STATE ;
     d38:	84 e0       	ldi	r24, 0x04	; 4
     d3a:	8d 83       	std	Y+5, r24	; 0x05
     d3c:	19 c0       	rjmp	.+50     	; 0xd70 <ADC_u8GetResultSync+0x10c>
			}
			else
			{
				/*Clear the interrupt flag*/
				SET_BIT(ADSAR , ADSAR_ADIF) ;
     d3e:	a6 e2       	ldi	r26, 0x26	; 38
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e6 e2       	ldi	r30, 0x26	; 38
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	80 61       	ori	r24, 0x10	; 16
     d4a:	8c 93       	st	X, r24

				/*Return Conversion Result*/
				#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
					*Copy_pu16Result = (ADCL|(ADCH << 8))  ;
     d4c:	e4 e2       	ldi	r30, 0x24	; 36
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	e5 e2       	ldi	r30, 0x25	; 37
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	98 2f       	mov	r25, r24
     d62:	88 27       	eor	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	93 2b       	or	r25, r19
     d68:	ef 81       	ldd	r30, Y+7	; 0x07
     d6a:	f8 85       	ldd	r31, Y+8	; 0x08
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	80 83       	st	Z, r24

				#endif
			}

			/*ADC is IDLE*/
			ADC_u8State = IDLE ;
     d70:	10 92 84 00 	sts	0x0084, r1
     d74:	05 c0       	rjmp	.+10     	; 0xd80 <ADC_u8GetResultSync+0x11c>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE ;
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	8d 83       	std	Y+5, r24	; 0x05
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <ADC_u8GetResultSync+0x11c>


	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u8ErrorState ;
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d82:	28 96       	adiw	r28, 0x08	; 8
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <ADC_u8StartConversionAsynch>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 ADC_u8StartConversionAsynch (u8 Copy_u8Channel , u16 * Copy_pu16Result , void (*Copy_pvNotificationFunc)(void))
{
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	00 d0       	rcall	.+0      	; 0xd9a <ADC_u8StartConversionAsynch+0x6>
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <ADC_u8StartConversionAsynch+0x8>
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <ADC_u8StartConversionAsynch+0xa>
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	8a 83       	std	Y+2, r24	; 0x02
     da4:	7c 83       	std	Y+4, r23	; 0x04
     da6:	6b 83       	std	Y+3, r22	; 0x03
     da8:	5e 83       	std	Y+6, r21	; 0x06
     daa:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK ;
     dac:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	9c 81       	ldd	r25, Y+4	; 0x04
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	d1 f1       	breq	.+116    	; 0xe2a <ADC_u8StartConversionAsynch+0x96>
     db6:	8d 81       	ldd	r24, Y+5	; 0x05
     db8:	9e 81       	ldd	r25, Y+6	; 0x06
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	b1 f1       	breq	.+108    	; 0xe2a <ADC_u8StartConversionAsynch+0x96>
	{
		if (ADC_u8State == IDLE)
     dbe:	80 91 84 00 	lds	r24, 0x0084
     dc2:	88 23       	and	r24, r24
     dc4:	79 f5       	brne	.+94     	; 0xe24 <ADC_u8StartConversionAsynch+0x90>
		{
			/*ADC is now Busy*/
			ADC_u8State = BUSY ;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	80 93 84 00 	sts	0x0084, r24

			/*Set ISR State*/
			ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH ;
     dcc:	10 92 85 00 	sts	0x0085, r1

			/*Initialize the global result pointer*/
			ADC_pu16AsynchConversionResult = Copy_pu16Result;
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	90 93 81 00 	sts	0x0081, r25
     dd8:	80 93 80 00 	sts	0x0080, r24

			/*Initialize the global notification function pointer*/
			ADC_pvNotificationFunc= Copy_pvNotificationFunc;
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	90 93 83 00 	sts	0x0083, r25
     de4:	80 93 82 00 	sts	0x0082, r24

			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
     de8:	a7 e2       	ldi	r26, 0x27	; 39
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e7 e2       	ldi	r30, 0x27	; 39
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	80 7e       	andi	r24, 0xE0	; 224
     df4:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel ;
     df6:	a7 e2       	ldi	r26, 0x27	; 39
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e7 e2       	ldi	r30, 0x27	; 39
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	90 81       	ld	r25, Z
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	89 2b       	or	r24, r25
     e04:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
     e06:	a6 e2       	ldi	r26, 0x26	; 38
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e6 e2       	ldi	r30, 0x26	; 38
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	80 64       	ori	r24, 0x40	; 64
     e12:	8c 93       	st	X, r24

			/*ADC Conversion Complete Interrupt Enable*/
			SET_BIT(ADSAR , ADSAR_ADIE) ;
     e14:	a6 e2       	ldi	r26, 0x26	; 38
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e6 e2       	ldi	r30, 0x26	; 38
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	88 60       	ori	r24, 0x08	; 8
     e20:	8c 93       	st	X, r24
     e22:	05 c0       	rjmp	.+10     	; 0xe2e <ADC_u8StartConversionAsynch+0x9a>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE ;
     e24:	83 e0       	ldi	r24, 0x03	; 3
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <ADC_u8StartConversionAsynch+0x9a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e30:	26 96       	adiw	r28, 0x06	; 6
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <ADC_u8StartChainAsynch>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 ADC_u8StartChainAsynch (Chain_t * Copy_Chain)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	00 d0       	rcall	.+0      	; 0xe48 <ADC_u8StartChainAsynch+0x6>
     e48:	0f 92       	push	r0
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	9b 83       	std	Y+3, r25	; 0x03
     e50:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
     e52:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result))
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	9b 81       	ldd	r25, Y+3	; 0x03
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	09 f4       	brne	.+2      	; 0xe5e <ADC_u8StartChainAsynch+0x1c>
     e5c:	6b c0       	rjmp	.+214    	; 0xf34 <ADC_u8StartChainAsynch+0xf2>
     e5e:	ea 81       	ldd	r30, Y+2	; 0x02
     e60:	fb 81       	ldd	r31, Y+3	; 0x03
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	09 f4       	brne	.+2      	; 0xe6c <ADC_u8StartChainAsynch+0x2a>
     e6a:	64 c0       	rjmp	.+200    	; 0xf34 <ADC_u8StartChainAsynch+0xf2>
     e6c:	ea 81       	ldd	r30, Y+2	; 0x02
     e6e:	fb 81       	ldd	r31, Y+3	; 0x03
     e70:	85 81       	ldd	r24, Z+5	; 0x05
     e72:	96 81       	ldd	r25, Z+6	; 0x06
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	09 f4       	brne	.+2      	; 0xe7a <ADC_u8StartChainAsynch+0x38>
     e78:	5d c0       	rjmp	.+186    	; 0xf34 <ADC_u8StartChainAsynch+0xf2>
     e7a:	ea 81       	ldd	r30, Y+2	; 0x02
     e7c:	fb 81       	ldd	r31, Y+3	; 0x03
     e7e:	82 81       	ldd	r24, Z+2	; 0x02
     e80:	93 81       	ldd	r25, Z+3	; 0x03
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	09 f4       	brne	.+2      	; 0xe88 <ADC_u8StartChainAsynch+0x46>
     e86:	56 c0       	rjmp	.+172    	; 0xf34 <ADC_u8StartChainAsynch+0xf2>
	{
		if (ADC_u8State == IDLE)
     e88:	80 91 84 00 	lds	r24, 0x0084
     e8c:	88 23       	and	r24, r24
     e8e:	09 f0       	breq	.+2      	; 0xe92 <ADC_u8StartChainAsynch+0x50>
     e90:	4e c0       	rjmp	.+156    	; 0xf2e <ADC_u8StartChainAsynch+0xec>
		{
			/*ADC is now Busy*/
			ADC_u8State = BUSY ;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	80 93 84 00 	sts	0x0084, r24

			/*Set ISR State*/
			ADC_u8ISRState = CHAIN_CHANNEL_ASYNCH ;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	80 93 85 00 	sts	0x0085, r24

			/*Assign the ADC data globally*/
			ADC_pu16AsynchConversionResult = Copy_Chain->Result ;
     e9e:	ea 81       	ldd	r30, Y+2	; 0x02
     ea0:	fb 81       	ldd	r31, Y+3	; 0x03
     ea2:	82 81       	ldd	r24, Z+2	; 0x02
     ea4:	93 81       	ldd	r25, Z+3	; 0x03
     ea6:	90 93 81 00 	sts	0x0081, r25
     eaa:	80 93 80 00 	sts	0x0080, r24
			ADC_pu8ChainChannel = Copy_Chain->Channel ;
     eae:	ea 81       	ldd	r30, Y+2	; 0x02
     eb0:	fb 81       	ldd	r31, Y+3	; 0x03
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	90 93 87 00 	sts	0x0087, r25
     eba:	80 93 86 00 	sts	0x0086, r24
			ADC_u8ChainSize = Copy_Chain->Size ;
     ebe:	ea 81       	ldd	r30, Y+2	; 0x02
     ec0:	fb 81       	ldd	r31, Y+3	; 0x03
     ec2:	84 81       	ldd	r24, Z+4	; 0x04
     ec4:	80 93 88 00 	sts	0x0088, r24
			ADC_pvNotificationFunc = Copy_Chain->NotificationFunc ;
     ec8:	ea 81       	ldd	r30, Y+2	; 0x02
     eca:	fb 81       	ldd	r31, Y+3	; 0x03
     ecc:	85 81       	ldd	r24, Z+5	; 0x05
     ece:	96 81       	ldd	r25, Z+6	; 0x06
     ed0:	90 93 83 00 	sts	0x0083, r25
     ed4:	80 93 82 00 	sts	0x0082, r24

			/*Set Index to first element*/
			ADC_u8Index = 0 ;
     ed8:	10 92 89 00 	sts	0x0089, r1

			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
     edc:	a7 e2       	ldi	r26, 0x27	; 39
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e7 e2       	ldi	r30, 0x27	; 39
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 7e       	andi	r24, 0xE0	; 224
     ee8:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannel[ADC_u8Index] ;
     eea:	a7 e2       	ldi	r26, 0x27	; 39
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e7 e2       	ldi	r30, 0x27	; 39
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	40 81       	ld	r20, Z
     ef4:	20 91 86 00 	lds	r18, 0x0086
     ef8:	30 91 87 00 	lds	r19, 0x0087
     efc:	80 91 89 00 	lds	r24, 0x0089
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	f9 01       	movw	r30, r18
     f06:	e8 0f       	add	r30, r24
     f08:	f9 1f       	adc	r31, r25
     f0a:	80 81       	ld	r24, Z
     f0c:	84 2b       	or	r24, r20
     f0e:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
     f10:	a6 e2       	ldi	r26, 0x26	; 38
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e6 e2       	ldi	r30, 0x26	; 38
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 64       	ori	r24, 0x40	; 64
     f1c:	8c 93       	st	X, r24

			/*ADC Conversion Complete Interrupt Enable*/
			SET_BIT(ADSAR , ADSAR_ADIE) ;
     f1e:	a6 e2       	ldi	r26, 0x26	; 38
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e6 e2       	ldi	r30, 0x26	; 38
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	88 60       	ori	r24, 0x08	; 8
     f2a:	8c 93       	st	X, r24
     f2c:	05 c0       	rjmp	.+10     	; 0xf38 <ADC_u8StartChainAsynch+0xf6>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE ;
     f2e:	83 e0       	ldi	r24, 0x03	; 3
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <ADC_u8StartChainAsynch+0xf6>
		}

	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16 (void)  __attribute__((signal)) ;
void __vector_16 (void)
{
     f46:	1f 92       	push	r1
     f48:	0f 92       	push	r0
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
	if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
     f70:	80 91 85 00 	lds	r24, 0x0085
     f74:	88 23       	and	r24, r24
     f76:	19 f5       	brne	.+70     	; 0xfbe <__vector_16+0x78>
	{
		/*Return Conversion Result*/
				#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
					* ADC_pu16AsynchConversionResult = (ADCL|(ADCH << 8))  ;
     f78:	a0 91 80 00 	lds	r26, 0x0080
     f7c:	b0 91 81 00 	lds	r27, 0x0081
     f80:	e4 e2       	ldi	r30, 0x24	; 36
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	e5 e2       	ldi	r30, 0x25	; 37
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	98 2f       	mov	r25, r24
     f96:	88 27       	eor	r24, r24
     f98:	82 2b       	or	r24, r18
     f9a:	93 2b       	or	r25, r19
     f9c:	8d 93       	st	X+, r24
     f9e:	9c 93       	st	X, r25
					#error "Wrong ADC_ADJUSTMENT config"

				#endif

		/*ADC is IDLE*/
		ADC_u8State = IDLE ;
     fa0:	10 92 84 00 	sts	0x0084, r1

		/*Call Notification Function*/
		ADC_pvNotificationFunc() ;
     fa4:	e0 91 82 00 	lds	r30, 0x0082
     fa8:	f0 91 83 00 	lds	r31, 0x0083
     fac:	09 95       	icall

		/*Disable the Conversion Complete Interrupt*/
		CLR_BIT(ADSAR , ADSAR_ADIE) ;
     fae:	a6 e2       	ldi	r26, 0x26	; 38
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e6 e2       	ldi	r30, 0x26	; 38
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	87 7f       	andi	r24, 0xF7	; 247
     fba:	8c 93       	st	X, r24
     fbc:	50 c0       	rjmp	.+160    	; 0x105e <__vector_16+0x118>
	}
	else
	{
		/*Return Conversion Result*/
		#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
			*ADC_pu16AsynchConversionResult = (ADCL|(ADCH << 8))  ;
     fbe:	a0 91 80 00 	lds	r26, 0x0080
     fc2:	b0 91 81 00 	lds	r27, 0x0081
     fc6:	e4 e2       	ldi	r30, 0x24	; 36
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	e5 e2       	ldi	r30, 0x25	; 37
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	98 2f       	mov	r25, r24
     fdc:	88 27       	eor	r24, r24
     fde:	82 2b       	or	r24, r18
     fe0:	93 2b       	or	r25, r19
     fe2:	11 96       	adiw	r26, 0x01	; 1
     fe4:	9c 93       	st	X, r25
     fe6:	8e 93       	st	-X, r24
			#error "Wrong ADC_ADJUSTMENT config"

		#endif

		/*Increment Data index of the chain*/
		ADC_u8Index++ ;
     fe8:	80 91 89 00 	lds	r24, 0x0089
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	80 93 89 00 	sts	0x0089, r24

		if (ADC_u8Index == ADC_u8ChainSize)
     ff2:	90 91 89 00 	lds	r25, 0x0089
     ff6:	80 91 88 00 	lds	r24, 0x0088
     ffa:	98 17       	cp	r25, r24
     ffc:	79 f4       	brne	.+30     	; 0x101c <__vector_16+0xd6>
		{
			/*ADC is IDLE*/
			ADC_u8State = IDLE ;
     ffe:	10 92 84 00 	sts	0x0084, r1

			/*Call Notification Function*/
			ADC_pvNotificationFunc() ;
    1002:	e0 91 82 00 	lds	r30, 0x0082
    1006:	f0 91 83 00 	lds	r31, 0x0083
    100a:	09 95       	icall

			/*Disable the Conversion Complete Interrupt*/
			CLR_BIT(ADSAR , ADSAR_ADIE) ;
    100c:	a6 e2       	ldi	r26, 0x26	; 38
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e6 e2       	ldi	r30, 0x26	; 38
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	87 7f       	andi	r24, 0xF7	; 247
    1018:	8c 93       	st	X, r24
    101a:	21 c0       	rjmp	.+66     	; 0x105e <__vector_16+0x118>
		}
		else
		{
			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
    101c:	a7 e2       	ldi	r26, 0x27	; 39
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e7 e2       	ldi	r30, 0x27	; 39
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 7e       	andi	r24, 0xE0	; 224
    1028:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannel[ADC_u8Index] ;
    102a:	a7 e2       	ldi	r26, 0x27	; 39
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e7 e2       	ldi	r30, 0x27	; 39
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	40 81       	ld	r20, Z
    1034:	20 91 86 00 	lds	r18, 0x0086
    1038:	30 91 87 00 	lds	r19, 0x0087
    103c:	80 91 89 00 	lds	r24, 0x0089
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	f9 01       	movw	r30, r18
    1046:	e8 0f       	add	r30, r24
    1048:	f9 1f       	adc	r31, r25
    104a:	80 81       	ld	r24, Z
    104c:	84 2b       	or	r24, r20
    104e:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
    1050:	a6 e2       	ldi	r26, 0x26	; 38
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e6 e2       	ldi	r30, 0x26	; 38
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 64       	ori	r24, 0x40	; 64
    105c:	8c 93       	st	X, r24
		}
	}
}
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	ff 91       	pop	r31
    1064:	ef 91       	pop	r30
    1066:	bf 91       	pop	r27
    1068:	af 91       	pop	r26
    106a:	9f 91       	pop	r25
    106c:	8f 91       	pop	r24
    106e:	7f 91       	pop	r23
    1070:	6f 91       	pop	r22
    1072:	5f 91       	pop	r21
    1074:	4f 91       	pop	r20
    1076:	3f 91       	pop	r19
    1078:	2f 91       	pop	r18
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	0f 90       	pop	r0
    1080:	1f 90       	pop	r1
    1082:	18 95       	reti

00001084 <DIO_enumSetPinDirection>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
    1084:	df 93       	push	r29
    1086:	cf 93       	push	r28
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	28 97       	sbiw	r28, 0x08	; 8
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	8a 83       	std	Y+2, r24	; 0x02
    109a:	6b 83       	std	Y+3, r22	; 0x03
    109c:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	84 30       	cpi	r24, 0x04	; 4
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <DIO_enumSetPinDirection+0x26>
    10a8:	f1 c0       	rjmp	.+482    	; 0x128c <DIO_enumSetPinDirection+0x208>
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 30       	cpi	r24, 0x08	; 8
    10ae:	08 f0       	brcs	.+2      	; 0x10b2 <DIO_enumSetPinDirection+0x2e>
    10b0:	ed c0       	rjmp	.+474    	; 0x128c <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
    10b2:	8c 81       	ldd	r24, Y+4	; 0x04
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	09 f0       	breq	.+2      	; 0x10ba <DIO_enumSetPinDirection+0x36>
    10b8:	6f c0       	rjmp	.+222    	; 0x1198 <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	38 87       	std	Y+8, r19	; 0x08
    10c2:	2f 83       	std	Y+7, r18	; 0x07
    10c4:	8f 81       	ldd	r24, Y+7	; 0x07
    10c6:	98 85       	ldd	r25, Y+8	; 0x08
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	91 05       	cpc	r25, r1
    10cc:	49 f1       	breq	.+82     	; 0x1120 <DIO_enumSetPinDirection+0x9c>
    10ce:	2f 81       	ldd	r18, Y+7	; 0x07
    10d0:	38 85       	ldd	r19, Y+8	; 0x08
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <DIO_enumSetPinDirection+0x5e>
    10d8:	8f 81       	ldd	r24, Y+7	; 0x07
    10da:	98 85       	ldd	r25, Y+8	; 0x08
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	61 f0       	breq	.+24     	; 0x10f8 <DIO_enumSetPinDirection+0x74>
    10e0:	d6 c0       	rjmp	.+428    	; 0x128e <DIO_enumSetPinDirection+0x20a>
    10e2:	2f 81       	ldd	r18, Y+7	; 0x07
    10e4:	38 85       	ldd	r19, Y+8	; 0x08
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	71 f1       	breq	.+92     	; 0x1148 <DIO_enumSetPinDirection+0xc4>
    10ec:	8f 81       	ldd	r24, Y+7	; 0x07
    10ee:	98 85       	ldd	r25, Y+8	; 0x08
    10f0:	83 30       	cpi	r24, 0x03	; 3
    10f2:	91 05       	cpc	r25, r1
    10f4:	e9 f1       	breq	.+122    	; 0x1170 <DIO_enumSetPinDirection+0xec>
    10f6:	cb c0       	rjmp	.+406    	; 0x128e <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
    10f8:	aa e3       	ldi	r26, 0x3A	; 58
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ea e3       	ldi	r30, 0x3A	; 58
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <DIO_enumSetPinDirection+0x92>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <DIO_enumSetPinDirection+0x8e>
    111a:	84 2b       	or	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	b7 c0       	rjmp	.+366    	; 0x128e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
    1120:	a7 e3       	ldi	r26, 0x37	; 55
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e7 e3       	ldi	r30, 0x37	; 55
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_enumSetPinDirection+0xba>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_enumSetPinDirection+0xb6>
    1142:	84 2b       	or	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	a3 c0       	rjmp	.+326    	; 0x128e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
    1148:	a4 e3       	ldi	r26, 0x34	; 52
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e4 e3       	ldi	r30, 0x34	; 52
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_enumSetPinDirection+0xe2>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_enumSetPinDirection+0xde>
    116a:	84 2b       	or	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	8f c0       	rjmp	.+286    	; 0x128e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
    1170:	a1 e3       	ldi	r26, 0x31	; 49
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e1 e3       	ldi	r30, 0x31	; 49
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_enumSetPinDirection+0x10a>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_enumSetPinDirection+0x106>
    1192:	84 2b       	or	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	7b c0       	rjmp	.+246    	; 0x128e <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	88 23       	and	r24, r24
    119c:	09 f0       	breq	.+2      	; 0x11a0 <DIO_enumSetPinDirection+0x11c>
    119e:	74 c0       	rjmp	.+232    	; 0x1288 <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	3e 83       	std	Y+6, r19	; 0x06
    11a8:	2d 83       	std	Y+5, r18	; 0x05
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	91 05       	cpc	r25, r1
    11b2:	59 f1       	breq	.+86     	; 0x120a <DIO_enumSetPinDirection+0x186>
    11b4:	2d 81       	ldd	r18, Y+5	; 0x05
    11b6:	3e 81       	ldd	r19, Y+6	; 0x06
    11b8:	22 30       	cpi	r18, 0x02	; 2
    11ba:	31 05       	cpc	r19, r1
    11bc:	2c f4       	brge	.+10     	; 0x11c8 <DIO_enumSetPinDirection+0x144>
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	69 f0       	breq	.+26     	; 0x11e0 <DIO_enumSetPinDirection+0x15c>
    11c6:	63 c0       	rjmp	.+198    	; 0x128e <DIO_enumSetPinDirection+0x20a>
    11c8:	2d 81       	ldd	r18, Y+5	; 0x05
    11ca:	3e 81       	ldd	r19, Y+6	; 0x06
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	89 f1       	breq	.+98     	; 0x1234 <DIO_enumSetPinDirection+0x1b0>
    11d2:	8d 81       	ldd	r24, Y+5	; 0x05
    11d4:	9e 81       	ldd	r25, Y+6	; 0x06
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	91 05       	cpc	r25, r1
    11da:	09 f4       	brne	.+2      	; 0x11de <DIO_enumSetPinDirection+0x15a>
    11dc:	40 c0       	rjmp	.+128    	; 0x125e <DIO_enumSetPinDirection+0x1da>
    11de:	57 c0       	rjmp	.+174    	; 0x128e <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
    11e0:	aa e3       	ldi	r26, 0x3A	; 58
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	ea e3       	ldi	r30, 0x3A	; 58
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_enumSetPinDirection+0x17a>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_enumSetPinDirection+0x176>
    1202:	80 95       	com	r24
    1204:	84 23       	and	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	42 c0       	rjmp	.+132    	; 0x128e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
    120a:	a7 e3       	ldi	r26, 0x37	; 55
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e7 e3       	ldi	r30, 0x37	; 55
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_enumSetPinDirection+0x1a4>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_enumSetPinDirection+0x1a0>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	2d c0       	rjmp	.+90     	; 0x128e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
    1234:	a4 e3       	ldi	r26, 0x34	; 52
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e4 e3       	ldi	r30, 0x34	; 52
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_enumSetPinDirection+0x1ce>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_enumSetPinDirection+0x1ca>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	18 c0       	rjmp	.+48     	; 0x128e <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    125e:	a1 e3       	ldi	r26, 0x31	; 49
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e1 e3       	ldi	r30, 0x31	; 49
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_enumSetPinDirection+0x1f8>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_enumSetPinDirection+0x1f4>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	03 c0       	rjmp	.+6      	; 0x128e <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    1288:	19 82       	std	Y+1, r1	; 0x01
    128a:	01 c0       	rjmp	.+2      	; 0x128e <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    128c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    128e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1290:	28 96       	adiw	r28, 0x08	; 8
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <DIO_enumSetPinValue>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	28 97       	sbiw	r28, 0x08	; 8
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	8a 83       	std	Y+2, r24	; 0x02
    12b8:	6b 83       	std	Y+3, r22	; 0x03
    12ba:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    12c0:	8a 81       	ldd	r24, Y+2	; 0x02
    12c2:	84 30       	cpi	r24, 0x04	; 4
    12c4:	08 f0       	brcs	.+2      	; 0x12c8 <DIO_enumSetPinValue+0x26>
    12c6:	f1 c0       	rjmp	.+482    	; 0x14aa <DIO_enumSetPinValue+0x208>
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	88 30       	cpi	r24, 0x08	; 8
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <DIO_enumSetPinValue+0x2e>
    12ce:	ed c0       	rjmp	.+474    	; 0x14aa <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <DIO_enumSetPinValue+0x36>
    12d6:	6f c0       	rjmp	.+222    	; 0x13b6 <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	38 87       	std	Y+8, r19	; 0x08
    12e0:	2f 83       	std	Y+7, r18	; 0x07
    12e2:	8f 81       	ldd	r24, Y+7	; 0x07
    12e4:	98 85       	ldd	r25, Y+8	; 0x08
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	91 05       	cpc	r25, r1
    12ea:	49 f1       	breq	.+82     	; 0x133e <DIO_enumSetPinValue+0x9c>
    12ec:	2f 81       	ldd	r18, Y+7	; 0x07
    12ee:	38 85       	ldd	r19, Y+8	; 0x08
    12f0:	22 30       	cpi	r18, 0x02	; 2
    12f2:	31 05       	cpc	r19, r1
    12f4:	2c f4       	brge	.+10     	; 0x1300 <DIO_enumSetPinValue+0x5e>
    12f6:	8f 81       	ldd	r24, Y+7	; 0x07
    12f8:	98 85       	ldd	r25, Y+8	; 0x08
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	61 f0       	breq	.+24     	; 0x1316 <DIO_enumSetPinValue+0x74>
    12fe:	d6 c0       	rjmp	.+428    	; 0x14ac <DIO_enumSetPinValue+0x20a>
    1300:	2f 81       	ldd	r18, Y+7	; 0x07
    1302:	38 85       	ldd	r19, Y+8	; 0x08
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	31 05       	cpc	r19, r1
    1308:	71 f1       	breq	.+92     	; 0x1366 <DIO_enumSetPinValue+0xc4>
    130a:	8f 81       	ldd	r24, Y+7	; 0x07
    130c:	98 85       	ldd	r25, Y+8	; 0x08
    130e:	83 30       	cpi	r24, 0x03	; 3
    1310:	91 05       	cpc	r25, r1
    1312:	e9 f1       	breq	.+122    	; 0x138e <DIO_enumSetPinValue+0xec>
    1314:	cb c0       	rjmp	.+406    	; 0x14ac <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
    1316:	ab e3       	ldi	r26, 0x3B	; 59
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	eb e3       	ldi	r30, 0x3B	; 59
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 2e       	mov	r0, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_enumSetPinValue+0x92>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	0a 94       	dec	r0
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_enumSetPinValue+0x8e>
    1338:	84 2b       	or	r24, r20
    133a:	8c 93       	st	X, r24
    133c:	b7 c0       	rjmp	.+366    	; 0x14ac <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
    133e:	a8 e3       	ldi	r26, 0x38	; 56
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e8 e3       	ldi	r30, 0x38	; 56
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 2e       	mov	r0, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <DIO_enumSetPinValue+0xba>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <DIO_enumSetPinValue+0xb6>
    1360:	84 2b       	or	r24, r20
    1362:	8c 93       	st	X, r24
    1364:	a3 c0       	rjmp	.+326    	; 0x14ac <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
    1366:	a5 e3       	ldi	r26, 0x35	; 53
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e5 e3       	ldi	r30, 0x35	; 53
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	48 2f       	mov	r20, r24
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	28 2f       	mov	r18, r24
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 2e       	mov	r0, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_enumSetPinValue+0xe2>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_enumSetPinValue+0xde>
    1388:	84 2b       	or	r24, r20
    138a:	8c 93       	st	X, r24
    138c:	8f c0       	rjmp	.+286    	; 0x14ac <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
    138e:	a2 e3       	ldi	r26, 0x32	; 50
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e2 e3       	ldi	r30, 0x32	; 50
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	48 2f       	mov	r20, r24
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 2e       	mov	r0, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_enumSetPinValue+0x10a>
    13a8:	88 0f       	add	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_enumSetPinValue+0x106>
    13b0:	84 2b       	or	r24, r20
    13b2:	8c 93       	st	X, r24
    13b4:	7b c0       	rjmp	.+246    	; 0x14ac <DIO_enumSetPinValue+0x20a>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	88 23       	and	r24, r24
    13ba:	09 f0       	breq	.+2      	; 0x13be <DIO_enumSetPinValue+0x11c>
    13bc:	74 c0       	rjmp	.+232    	; 0x14a6 <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	3e 83       	std	Y+6, r19	; 0x06
    13c6:	2d 83       	std	Y+5, r18	; 0x05
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	91 05       	cpc	r25, r1
    13d0:	59 f1       	breq	.+86     	; 0x1428 <DIO_enumSetPinValue+0x186>
    13d2:	2d 81       	ldd	r18, Y+5	; 0x05
    13d4:	3e 81       	ldd	r19, Y+6	; 0x06
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	31 05       	cpc	r19, r1
    13da:	2c f4       	brge	.+10     	; 0x13e6 <DIO_enumSetPinValue+0x144>
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	69 f0       	breq	.+26     	; 0x13fe <DIO_enumSetPinValue+0x15c>
    13e4:	63 c0       	rjmp	.+198    	; 0x14ac <DIO_enumSetPinValue+0x20a>
    13e6:	2d 81       	ldd	r18, Y+5	; 0x05
    13e8:	3e 81       	ldd	r19, Y+6	; 0x06
    13ea:	22 30       	cpi	r18, 0x02	; 2
    13ec:	31 05       	cpc	r19, r1
    13ee:	89 f1       	breq	.+98     	; 0x1452 <DIO_enumSetPinValue+0x1b0>
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	83 30       	cpi	r24, 0x03	; 3
    13f6:	91 05       	cpc	r25, r1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <DIO_enumSetPinValue+0x15a>
    13fa:	40 c0       	rjmp	.+128    	; 0x147c <DIO_enumSetPinValue+0x1da>
    13fc:	57 c0       	rjmp	.+174    	; 0x14ac <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
    13fe:	ab e3       	ldi	r26, 0x3B	; 59
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	eb e3       	ldi	r30, 0x3B	; 59
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_enumSetPinValue+0x17a>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_enumSetPinValue+0x176>
    1420:	80 95       	com	r24
    1422:	84 23       	and	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	42 c0       	rjmp	.+132    	; 0x14ac <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
    1428:	a8 e3       	ldi	r26, 0x38	; 56
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e8 e3       	ldi	r30, 0x38	; 56
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	48 2f       	mov	r20, r24
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 2e       	mov	r0, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_enumSetPinValue+0x1a4>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	0a 94       	dec	r0
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_enumSetPinValue+0x1a0>
    144a:	80 95       	com	r24
    144c:	84 23       	and	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	2d c0       	rjmp	.+90     	; 0x14ac <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
    1452:	a5 e3       	ldi	r26, 0x35	; 53
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e5 e3       	ldi	r30, 0x35	; 53
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_enumSetPinValue+0x1ce>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_enumSetPinValue+0x1ca>
    1474:	80 95       	com	r24
    1476:	84 23       	and	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	18 c0       	rjmp	.+48     	; 0x14ac <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    147c:	a2 e3       	ldi	r26, 0x32	; 50
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e2 e3       	ldi	r30, 0x32	; 50
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_enumSetPinValue+0x1f8>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_enumSetPinValue+0x1f4>
    149e:	80 95       	com	r24
    14a0:	84 23       	and	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	03 c0       	rjmp	.+6      	; 0x14ac <DIO_enumSetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    14a6:	19 82       	std	Y+1, r1	; 0x01
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    14aa:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    14ac:	89 81       	ldd	r24, Y+1	; 0x01

}
    14ae:	28 96       	adiw	r28, 0x08	; 8
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	cf 91       	pop	r28
    14bc:	df 91       	pop	r29
    14be:	08 95       	ret

000014c0 <DIO_enumGetPinValue>:
  	  => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
    14c0:	df 93       	push	r29
    14c2:	cf 93       	push	r28
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	27 97       	sbiw	r28, 0x07	; 7
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	8a 83       	std	Y+2, r24	; 0x02
    14d6:	6b 83       	std	Y+3, r22	; 0x03
    14d8:	5d 83       	std	Y+5, r21	; 0x05
    14da:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	84 30       	cpi	r24, 0x04	; 4
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <DIO_enumGetPinValue+0x28>
    14e6:	a6 c0       	rjmp	.+332    	; 0x1634 <DIO_enumGetPinValue+0x174>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	88 30       	cpi	r24, 0x08	; 8
    14ec:	08 f0       	brcs	.+2      	; 0x14f0 <DIO_enumGetPinValue+0x30>
    14ee:	a2 c0       	rjmp	.+324    	; 0x1634 <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	3f 83       	std	Y+7, r19	; 0x07
    14f8:	2e 83       	std	Y+6, r18	; 0x06
    14fa:	4e 81       	ldd	r20, Y+6	; 0x06
    14fc:	5f 81       	ldd	r21, Y+7	; 0x07
    14fe:	41 30       	cpi	r20, 0x01	; 1
    1500:	51 05       	cpc	r21, r1
    1502:	c1 f1       	breq	.+112    	; 0x1574 <DIO_enumGetPinValue+0xb4>
    1504:	8e 81       	ldd	r24, Y+6	; 0x06
    1506:	9f 81       	ldd	r25, Y+7	; 0x07
    1508:	82 30       	cpi	r24, 0x02	; 2
    150a:	91 05       	cpc	r25, r1
    150c:	34 f4       	brge	.+12     	; 0x151a <DIO_enumGetPinValue+0x5a>
    150e:	2e 81       	ldd	r18, Y+6	; 0x06
    1510:	3f 81       	ldd	r19, Y+7	; 0x07
    1512:	21 15       	cp	r18, r1
    1514:	31 05       	cpc	r19, r1
    1516:	71 f0       	breq	.+28     	; 0x1534 <DIO_enumGetPinValue+0x74>
    1518:	8e c0       	rjmp	.+284    	; 0x1636 <DIO_enumGetPinValue+0x176>
    151a:	4e 81       	ldd	r20, Y+6	; 0x06
    151c:	5f 81       	ldd	r21, Y+7	; 0x07
    151e:	42 30       	cpi	r20, 0x02	; 2
    1520:	51 05       	cpc	r21, r1
    1522:	09 f4       	brne	.+2      	; 0x1526 <DIO_enumGetPinValue+0x66>
    1524:	47 c0       	rjmp	.+142    	; 0x15b4 <DIO_enumGetPinValue+0xf4>
    1526:	8e 81       	ldd	r24, Y+6	; 0x06
    1528:	9f 81       	ldd	r25, Y+7	; 0x07
    152a:	83 30       	cpi	r24, 0x03	; 3
    152c:	91 05       	cpc	r25, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <DIO_enumGetPinValue+0x72>
    1530:	61 c0       	rjmp	.+194    	; 0x15f4 <DIO_enumGetPinValue+0x134>
    1532:	81 c0       	rjmp	.+258    	; 0x1636 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
    1534:	e9 e3       	ldi	r30, 0x39	; 57
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 c0       	rjmp	.+4      	; 0x154e <DIO_enumGetPinValue+0x8e>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	2a 95       	dec	r18
    1550:	e2 f7       	brpl	.-8      	; 0x154a <DIO_enumGetPinValue+0x8a>
    1552:	9a 01       	movw	r18, r20
    1554:	28 23       	and	r18, r24
    1556:	39 23       	and	r19, r25
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a9 01       	movw	r20, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_enumGetPinValue+0xa6>
    1562:	55 95       	asr	r21
    1564:	47 95       	ror	r20
    1566:	8a 95       	dec	r24
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_enumGetPinValue+0xa2>
    156a:	ca 01       	movw	r24, r20
    156c:	ec 81       	ldd	r30, Y+4	; 0x04
    156e:	fd 81       	ldd	r31, Y+5	; 0x05
    1570:	80 83       	st	Z, r24
    1572:	61 c0       	rjmp	.+194    	; 0x1636 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    1574:	e6 e3       	ldi	r30, 0x36	; 54
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_enumGetPinValue+0xce>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	2a 95       	dec	r18
    1590:	e2 f7       	brpl	.-8      	; 0x158a <DIO_enumGetPinValue+0xca>
    1592:	9a 01       	movw	r18, r20
    1594:	28 23       	and	r18, r24
    1596:	39 23       	and	r19, r25
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	a9 01       	movw	r20, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <DIO_enumGetPinValue+0xe6>
    15a2:	55 95       	asr	r21
    15a4:	47 95       	ror	r20
    15a6:	8a 95       	dec	r24
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <DIO_enumGetPinValue+0xe2>
    15aa:	ca 01       	movw	r24, r20
    15ac:	ec 81       	ldd	r30, Y+4	; 0x04
    15ae:	fd 81       	ldd	r31, Y+5	; 0x05
    15b0:	80 83       	st	Z, r24
    15b2:	41 c0       	rjmp	.+130    	; 0x1636 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    15b4:	e3 e3       	ldi	r30, 0x33	; 51
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	48 2f       	mov	r20, r24
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <DIO_enumGetPinValue+0x10e>
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	2a 95       	dec	r18
    15d0:	e2 f7       	brpl	.-8      	; 0x15ca <DIO_enumGetPinValue+0x10a>
    15d2:	9a 01       	movw	r18, r20
    15d4:	28 23       	and	r18, r24
    15d6:	39 23       	and	r19, r25
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	88 2f       	mov	r24, r24
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	a9 01       	movw	r20, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <DIO_enumGetPinValue+0x126>
    15e2:	55 95       	asr	r21
    15e4:	47 95       	ror	r20
    15e6:	8a 95       	dec	r24
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <DIO_enumGetPinValue+0x122>
    15ea:	ca 01       	movw	r24, r20
    15ec:	ec 81       	ldd	r30, Y+4	; 0x04
    15ee:	fd 81       	ldd	r31, Y+5	; 0x05
    15f0:	80 83       	st	Z, r24
    15f2:	21 c0       	rjmp	.+66     	; 0x1636 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    15f4:	e0 e3       	ldi	r30, 0x30	; 48
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	50 e0       	ldi	r21, 0x00	; 0
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DIO_enumGetPinValue+0x14e>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	2a 95       	dec	r18
    1610:	e2 f7       	brpl	.-8      	; 0x160a <DIO_enumGetPinValue+0x14a>
    1612:	9a 01       	movw	r18, r20
    1614:	28 23       	and	r18, r24
    1616:	39 23       	and	r19, r25
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	88 2f       	mov	r24, r24
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a9 01       	movw	r20, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <DIO_enumGetPinValue+0x166>
    1622:	55 95       	asr	r21
    1624:	47 95       	ror	r20
    1626:	8a 95       	dec	r24
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <DIO_enumGetPinValue+0x162>
    162a:	ca 01       	movw	r24, r20
    162c:	ec 81       	ldd	r30, Y+4	; 0x04
    162e:	fd 81       	ldd	r31, Y+5	; 0x05
    1630:	80 83       	st	Z, r24
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    1634:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    1636:	89 81       	ldd	r24, Y+1	; 0x01
}
    1638:	27 96       	adiw	r28, 0x07	; 7
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <DIO_enumTogglePinValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	00 d0       	rcall	.+0      	; 0x1650 <DIO_enumTogglePinValue+0x6>
    1650:	00 d0       	rcall	.+0      	; 0x1652 <DIO_enumTogglePinValue+0x8>
    1652:	0f 92       	push	r0
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	8a 83       	std	Y+2, r24	; 0x02
    165a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	88 30       	cpi	r24, 0x08	; 8
    1664:	08 f0       	brcs	.+2      	; 0x1668 <DIO_enumTogglePinValue+0x1e>
    1666:	6f c0       	rjmp	.+222    	; 0x1746 <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3d 83       	std	Y+5, r19	; 0x05
    1670:	2c 83       	std	Y+4, r18	; 0x04
    1672:	8c 81       	ldd	r24, Y+4	; 0x04
    1674:	9d 81       	ldd	r25, Y+5	; 0x05
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	91 05       	cpc	r25, r1
    167a:	49 f1       	breq	.+82     	; 0x16ce <DIO_enumTogglePinValue+0x84>
    167c:	2c 81       	ldd	r18, Y+4	; 0x04
    167e:	3d 81       	ldd	r19, Y+5	; 0x05
    1680:	22 30       	cpi	r18, 0x02	; 2
    1682:	31 05       	cpc	r19, r1
    1684:	2c f4       	brge	.+10     	; 0x1690 <DIO_enumTogglePinValue+0x46>
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	9d 81       	ldd	r25, Y+5	; 0x05
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	61 f0       	breq	.+24     	; 0x16a6 <DIO_enumTogglePinValue+0x5c>
    168e:	5c c0       	rjmp	.+184    	; 0x1748 <DIO_enumTogglePinValue+0xfe>
    1690:	2c 81       	ldd	r18, Y+4	; 0x04
    1692:	3d 81       	ldd	r19, Y+5	; 0x05
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	71 f1       	breq	.+92     	; 0x16f6 <DIO_enumTogglePinValue+0xac>
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	9d 81       	ldd	r25, Y+5	; 0x05
    169e:	83 30       	cpi	r24, 0x03	; 3
    16a0:	91 05       	cpc	r25, r1
    16a2:	e9 f1       	breq	.+122    	; 0x171e <DIO_enumTogglePinValue+0xd4>
    16a4:	51 c0       	rjmp	.+162    	; 0x1748 <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    16a6:	ab e3       	ldi	r26, 0x3B	; 59
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	eb e3       	ldi	r30, 0x3B	; 59
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <DIO_enumTogglePinValue+0x7a>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <DIO_enumTogglePinValue+0x76>
    16c8:	84 27       	eor	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	3d c0       	rjmp	.+122    	; 0x1748 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    16ce:	a8 e3       	ldi	r26, 0x38	; 56
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e8 e3       	ldi	r30, 0x38	; 56
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_enumTogglePinValue+0xa2>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <DIO_enumTogglePinValue+0x9e>
    16f0:	84 27       	eor	r24, r20
    16f2:	8c 93       	st	X, r24
    16f4:	29 c0       	rjmp	.+82     	; 0x1748 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    16f6:	a5 e3       	ldi	r26, 0x35	; 53
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e5 e3       	ldi	r30, 0x35	; 53
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_enumTogglePinValue+0xca>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <DIO_enumTogglePinValue+0xc6>
    1718:	84 27       	eor	r24, r20
    171a:	8c 93       	st	X, r24
    171c:	15 c0       	rjmp	.+42     	; 0x1748 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    171e:	a2 e3       	ldi	r26, 0x32	; 50
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e2 e3       	ldi	r30, 0x32	; 50
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_enumTogglePinValue+0xf2>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_enumTogglePinValue+0xee>
    1740:	84 27       	eor	r24, r20
    1742:	8c 93       	st	X, r24
    1744:	01 c0       	rjmp	.+2      	; 0x1748 <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    1746:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    1748:	89 81       	ldd	r24, Y+1	; 0x01
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <DIO_enumConnectPullup>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 	  =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <DIO_enumConnectPullup+0x6>
    1760:	00 d0       	rcall	.+0      	; 0x1762 <DIO_enumConnectPullup+0x8>
    1762:	00 d0       	rcall	.+0      	; 0x1764 <DIO_enumConnectPullup+0xa>
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	8a 83       	std	Y+2, r24	; 0x02
    176a:	6b 83       	std	Y+3, r22	; 0x03
    176c:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	84 30       	cpi	r24, 0x04	; 4
    1776:	08 f0       	brcs	.+2      	; 0x177a <DIO_enumConnectPullup+0x20>
    1778:	3e c1       	rjmp	.+636    	; 0x19f6 <DIO_enumConnectPullup+0x29c>
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	88 30       	cpi	r24, 0x08	; 8
    177e:	08 f0       	brcs	.+2      	; 0x1782 <DIO_enumConnectPullup+0x28>
    1780:	3a c1       	rjmp	.+628    	; 0x19f6 <DIO_enumConnectPullup+0x29c>
	{
		switch(Copy_u8PORT)
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	3e 83       	std	Y+6, r19	; 0x06
    178a:	2d 83       	std	Y+5, r18	; 0x05
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	91 05       	cpc	r25, r1
    1794:	09 f4       	brne	.+2      	; 0x1798 <DIO_enumConnectPullup+0x3e>
    1796:	5d c0       	rjmp	.+186    	; 0x1852 <DIO_enumConnectPullup+0xf8>
    1798:	2d 81       	ldd	r18, Y+5	; 0x05
    179a:	3e 81       	ldd	r19, Y+6	; 0x06
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	31 05       	cpc	r19, r1
    17a0:	2c f4       	brge	.+10     	; 0x17ac <DIO_enumConnectPullup+0x52>
    17a2:	8d 81       	ldd	r24, Y+5	; 0x05
    17a4:	9e 81       	ldd	r25, Y+6	; 0x06
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	71 f0       	breq	.+28     	; 0x17c6 <DIO_enumConnectPullup+0x6c>
    17aa:	26 c1       	rjmp	.+588    	; 0x19f8 <DIO_enumConnectPullup+0x29e>
    17ac:	2d 81       	ldd	r18, Y+5	; 0x05
    17ae:	3e 81       	ldd	r19, Y+6	; 0x06
    17b0:	22 30       	cpi	r18, 0x02	; 2
    17b2:	31 05       	cpc	r19, r1
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <DIO_enumConnectPullup+0x5e>
    17b6:	93 c0       	rjmp	.+294    	; 0x18de <DIO_enumConnectPullup+0x184>
    17b8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ba:	9e 81       	ldd	r25, Y+6	; 0x06
    17bc:	83 30       	cpi	r24, 0x03	; 3
    17be:	91 05       	cpc	r25, r1
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <DIO_enumConnectPullup+0x6a>
    17c2:	d3 c0       	rjmp	.+422    	; 0x196a <DIO_enumConnectPullup+0x210>
    17c4:	19 c1       	rjmp	.+562    	; 0x19f8 <DIO_enumConnectPullup+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    17c6:	8c 81       	ldd	r24, Y+4	; 0x04
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	71 f5       	brne	.+92     	; 0x1828 <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
    17cc:	a0 e5       	ldi	r26, 0x50	; 80
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e0 e5       	ldi	r30, 0x50	; 80
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	8b 7f       	andi	r24, 0xFB	; 251
    17d8:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    17da:	aa e3       	ldi	r26, 0x3A	; 58
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ea e3       	ldi	r30, 0x3A	; 58
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	48 2f       	mov	r20, r24
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <DIO_enumConnectPullup+0x9c>
    17f2:	88 0f       	add	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	2a 95       	dec	r18
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <DIO_enumConnectPullup+0x98>
    17fa:	80 95       	com	r24
    17fc:	84 23       	and	r24, r20
    17fe:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
    1800:	ab e3       	ldi	r26, 0x3B	; 59
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	eb e3       	ldi	r30, 0x3B	; 59
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	48 2f       	mov	r20, r24
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	02 2e       	mov	r0, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <DIO_enumConnectPullup+0xc4>
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	0a 94       	dec	r0
    1820:	e2 f7       	brpl	.-8      	; 0x181a <DIO_enumConnectPullup+0xc0>
    1822:	84 2b       	or	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	e8 c0       	rjmp	.+464    	; 0x19f8 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    1828:	ab e3       	ldi	r26, 0x3B	; 59
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	eb e3       	ldi	r30, 0x3B	; 59
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <DIO_enumConnectPullup+0xec>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <DIO_enumConnectPullup+0xe8>
    184a:	80 95       	com	r24
    184c:	84 23       	and	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	d3 c0       	rjmp	.+422    	; 0x19f8 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	71 f5       	brne	.+92     	; 0x18b4 <DIO_enumConnectPullup+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
    1858:	a0 e5       	ldi	r26, 0x50	; 80
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e0 e5       	ldi	r30, 0x50	; 80
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	8b 7f       	andi	r24, 0xFB	; 251
    1864:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    1866:	a7 e3       	ldi	r26, 0x37	; 55
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e7 e3       	ldi	r30, 0x37	; 55
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	48 2f       	mov	r20, r24
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <DIO_enumConnectPullup+0x128>
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	2a 95       	dec	r18
    1884:	e2 f7       	brpl	.-8      	; 0x187e <DIO_enumConnectPullup+0x124>
    1886:	80 95       	com	r24
    1888:	84 23       	and	r24, r20
    188a:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
    188c:	a8 e3       	ldi	r26, 0x38	; 56
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e8 e3       	ldi	r30, 0x38	; 56
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	48 2f       	mov	r20, r24
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	28 2f       	mov	r18, r24
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	02 2e       	mov	r0, r18
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_enumConnectPullup+0x150>
    18a6:	88 0f       	add	r24, r24
    18a8:	99 1f       	adc	r25, r25
    18aa:	0a 94       	dec	r0
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <DIO_enumConnectPullup+0x14c>
    18ae:	84 2b       	or	r24, r20
    18b0:	8c 93       	st	X, r24
    18b2:	a2 c0       	rjmp	.+324    	; 0x19f8 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    18b4:	a8 e3       	ldi	r26, 0x38	; 56
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e8 e3       	ldi	r30, 0x38	; 56
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	48 2f       	mov	r20, r24
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 2e       	mov	r0, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <DIO_enumConnectPullup+0x178>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	0a 94       	dec	r0
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <DIO_enumConnectPullup+0x174>
    18d6:	80 95       	com	r24
    18d8:	84 23       	and	r24, r20
    18da:	8c 93       	st	X, r24
    18dc:	8d c0       	rjmp	.+282    	; 0x19f8 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	71 f5       	brne	.+92     	; 0x1940 <DIO_enumConnectPullup+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
    18e4:	a0 e5       	ldi	r26, 0x50	; 80
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	e0 e5       	ldi	r30, 0x50	; 80
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	8b 7f       	andi	r24, 0xFB	; 251
    18f0:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    18f2:	a4 e3       	ldi	r26, 0x34	; 52
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e4 e3       	ldi	r30, 0x34	; 52
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_enumConnectPullup+0x1b4>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	2a 95       	dec	r18
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_enumConnectPullup+0x1b0>
    1912:	80 95       	com	r24
    1914:	84 23       	and	r24, r20
    1916:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
    1918:	a5 e3       	ldi	r26, 0x35	; 53
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e5 e3       	ldi	r30, 0x35	; 53
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_enumConnectPullup+0x1dc>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <DIO_enumConnectPullup+0x1d8>
    193a:	84 2b       	or	r24, r20
    193c:	8c 93       	st	X, r24
    193e:	5c c0       	rjmp	.+184    	; 0x19f8 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    1940:	a5 e3       	ldi	r26, 0x35	; 53
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e5 e3       	ldi	r30, 0x35	; 53
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	48 2f       	mov	r20, r24
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 2e       	mov	r0, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <DIO_enumConnectPullup+0x204>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	0a 94       	dec	r0
    1960:	e2 f7       	brpl	.-8      	; 0x195a <DIO_enumConnectPullup+0x200>
    1962:	80 95       	com	r24
    1964:	84 23       	and	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	47 c0       	rjmp	.+142    	; 0x19f8 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	71 f5       	brne	.+92     	; 0x19cc <DIO_enumConnectPullup+0x272>
			{
				CLR_BIT(SFIOR,PUD);
    1970:	a0 e5       	ldi	r26, 0x50	; 80
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e0 e5       	ldi	r30, 0x50	; 80
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	8b 7f       	andi	r24, 0xFB	; 251
    197c:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    197e:	a1 e3       	ldi	r26, 0x31	; 49
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e1 e3       	ldi	r30, 0x31	; 49
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	48 2f       	mov	r20, r24
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	02 c0       	rjmp	.+4      	; 0x199a <DIO_enumConnectPullup+0x240>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	2a 95       	dec	r18
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <DIO_enumConnectPullup+0x23c>
    199e:	80 95       	com	r24
    19a0:	84 23       	and	r24, r20
    19a2:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
    19a4:	a2 e3       	ldi	r26, 0x32	; 50
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e2 e3       	ldi	r30, 0x32	; 50
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 2e       	mov	r0, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <DIO_enumConnectPullup+0x268>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	0a 94       	dec	r0
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <DIO_enumConnectPullup+0x264>
    19c6:	84 2b       	or	r24, r20
    19c8:	8c 93       	st	X, r24
    19ca:	16 c0       	rjmp	.+44     	; 0x19f8 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    19cc:	a2 e3       	ldi	r26, 0x32	; 50
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e2 e3       	ldi	r30, 0x32	; 50
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 2e       	mov	r0, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <DIO_enumConnectPullup+0x290>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	0a 94       	dec	r0
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <DIO_enumConnectPullup+0x28c>
    19ee:	80 95       	com	r24
    19f0:	84 23       	and	r24, r20
    19f2:	8c 93       	st	X, r24
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <DIO_enumConnectPullup+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    19f6:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    19f8:	89 81       	ldd	r24, Y+1	; 0x01


}
    19fa:	26 96       	adiw	r28, 0x06	; 6
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <DIO_enumSetPortDirection>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <DIO_enumSetPortDirection+0x6>
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <DIO_enumSetPortDirection+0x8>
    1a14:	0f 92       	push	r0
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	8a 83       	std	Y+2, r24	; 0x02
    1a1c:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	84 30       	cpi	r24, 0x04	; 4
    1a26:	a8 f5       	brcc	.+106    	; 0x1a92 <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	3d 83       	std	Y+5, r19	; 0x05
    1a30:	2c 83       	std	Y+4, r18	; 0x04
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	9d 81       	ldd	r25, Y+5	; 0x05
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	91 05       	cpc	r25, r1
    1a3a:	d1 f0       	breq	.+52     	; 0x1a70 <DIO_enumSetPortDirection+0x64>
    1a3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a40:	22 30       	cpi	r18, 0x02	; 2
    1a42:	31 05       	cpc	r19, r1
    1a44:	2c f4       	brge	.+10     	; 0x1a50 <DIO_enumSetPortDirection+0x44>
    1a46:	8c 81       	ldd	r24, Y+4	; 0x04
    1a48:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	61 f0       	breq	.+24     	; 0x1a66 <DIO_enumSetPortDirection+0x5a>
    1a4e:	1f c0       	rjmp	.+62     	; 0x1a8e <DIO_enumSetPortDirection+0x82>
    1a50:	2c 81       	ldd	r18, Y+4	; 0x04
    1a52:	3d 81       	ldd	r19, Y+5	; 0x05
    1a54:	22 30       	cpi	r18, 0x02	; 2
    1a56:	31 05       	cpc	r19, r1
    1a58:	81 f0       	breq	.+32     	; 0x1a7a <DIO_enumSetPortDirection+0x6e>
    1a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5e:	83 30       	cpi	r24, 0x03	; 3
    1a60:	91 05       	cpc	r25, r1
    1a62:	81 f0       	breq	.+32     	; 0x1a84 <DIO_enumSetPortDirection+0x78>
    1a64:	14 c0       	rjmp	.+40     	; 0x1a8e <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    1a66:	ea e3       	ldi	r30, 0x3A	; 58
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	80 83       	st	Z, r24
    1a6e:	12 c0       	rjmp	.+36     	; 0x1a94 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    1a70:	e7 e3       	ldi	r30, 0x37	; 55
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	80 83       	st	Z, r24
    1a78:	0d c0       	rjmp	.+26     	; 0x1a94 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    1a7a:	e4 e3       	ldi	r30, 0x34	; 52
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	80 83       	st	Z, r24
    1a82:	08 c0       	rjmp	.+16     	; 0x1a94 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    1a84:	e1 e3       	ldi	r30, 0x31	; 49
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	80 83       	st	Z, r24
    1a8c:	03 c0       	rjmp	.+6      	; 0x1a94 <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
    1a8e:	19 82       	std	Y+1, r1	; 0x01
    1a90:	01 c0       	rjmp	.+2      	; 0x1a94 <DIO_enumSetPortDirection+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
    1a92:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <DIO_enumSetPortValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <DIO_enumSetPortValue+0x6>
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <DIO_enumSetPortValue+0x8>
    1aae:	0f 92       	push	r0
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	8a 83       	std	Y+2, r24	; 0x02
    1ab6:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	84 30       	cpi	r24, 0x04	; 4
    1ac0:	a8 f5       	brcc	.+106    	; 0x1b2c <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	3d 83       	std	Y+5, r19	; 0x05
    1aca:	2c 83       	std	Y+4, r18	; 0x04
    1acc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ace:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	d1 f0       	breq	.+52     	; 0x1b0a <DIO_enumSetPortValue+0x64>
    1ad6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad8:	3d 81       	ldd	r19, Y+5	; 0x05
    1ada:	22 30       	cpi	r18, 0x02	; 2
    1adc:	31 05       	cpc	r19, r1
    1ade:	2c f4       	brge	.+10     	; 0x1aea <DIO_enumSetPortValue+0x44>
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	61 f0       	breq	.+24     	; 0x1b00 <DIO_enumSetPortValue+0x5a>
    1ae8:	1f c0       	rjmp	.+62     	; 0x1b28 <DIO_enumSetPortValue+0x82>
    1aea:	2c 81       	ldd	r18, Y+4	; 0x04
    1aec:	3d 81       	ldd	r19, Y+5	; 0x05
    1aee:	22 30       	cpi	r18, 0x02	; 2
    1af0:	31 05       	cpc	r19, r1
    1af2:	81 f0       	breq	.+32     	; 0x1b14 <DIO_enumSetPortValue+0x6e>
    1af4:	8c 81       	ldd	r24, Y+4	; 0x04
    1af6:	9d 81       	ldd	r25, Y+5	; 0x05
    1af8:	83 30       	cpi	r24, 0x03	; 3
    1afa:	91 05       	cpc	r25, r1
    1afc:	81 f0       	breq	.+32     	; 0x1b1e <DIO_enumSetPortValue+0x78>
    1afe:	14 c0       	rjmp	.+40     	; 0x1b28 <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    1b00:	eb e3       	ldi	r30, 0x3B	; 59
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	80 83       	st	Z, r24
    1b08:	12 c0       	rjmp	.+36     	; 0x1b2e <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    1b0a:	e8 e3       	ldi	r30, 0x38	; 56
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	80 83       	st	Z, r24
    1b12:	0d c0       	rjmp	.+26     	; 0x1b2e <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    1b14:	e5 e3       	ldi	r30, 0x35	; 53
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	80 83       	st	Z, r24
    1b1c:	08 c0       	rjmp	.+16     	; 0x1b2e <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    1b1e:	e2 e3       	ldi	r30, 0x32	; 50
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	80 83       	st	Z, r24
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
    1b28:	19 82       	std	Y+1, r1	; 0x01
    1b2a:	01 c0       	rjmp	.+2      	; 0x1b2e <DIO_enumSetPortValue+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
    1b2c:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <DIO_enumTogglePortValue>:
 * Parameters :
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <DIO_enumTogglePortValue+0x6>
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <DIO_enumTogglePortValue+0x8>
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PORT <= DIO_PORTD)
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	84 30       	cpi	r24, 0x04	; 4
    1b56:	08 f0       	brcs	.+2      	; 0x1b5a <DIO_enumTogglePortValue+0x1a>
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <DIO_enumTogglePortValue+0x98>
	{
		switch (Copy_u8PORT)
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	3c 83       	std	Y+4, r19	; 0x04
    1b62:	2b 83       	std	Y+3, r18	; 0x03
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	81 30       	cpi	r24, 0x01	; 1
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	e9 f0       	breq	.+58     	; 0x1ba8 <DIO_enumTogglePortValue+0x68>
    1b6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b70:	3c 81       	ldd	r19, Y+4	; 0x04
    1b72:	22 30       	cpi	r18, 0x02	; 2
    1b74:	31 05       	cpc	r19, r1
    1b76:	2c f4       	brge	.+10     	; 0x1b82 <DIO_enumTogglePortValue+0x42>
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	61 f0       	breq	.+24     	; 0x1b98 <DIO_enumTogglePortValue+0x58>
    1b80:	2c c0       	rjmp	.+88     	; 0x1bda <DIO_enumTogglePortValue+0x9a>
    1b82:	2b 81       	ldd	r18, Y+3	; 0x03
    1b84:	3c 81       	ldd	r19, Y+4	; 0x04
    1b86:	22 30       	cpi	r18, 0x02	; 2
    1b88:	31 05       	cpc	r19, r1
    1b8a:	b1 f0       	breq	.+44     	; 0x1bb8 <DIO_enumTogglePortValue+0x78>
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b90:	83 30       	cpi	r24, 0x03	; 3
    1b92:	91 05       	cpc	r25, r1
    1b94:	c9 f0       	breq	.+50     	; 0x1bc8 <DIO_enumTogglePortValue+0x88>
    1b96:	21 c0       	rjmp	.+66     	; 0x1bda <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
    1b98:	ab e3       	ldi	r26, 0x3B	; 59
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	eb e3       	ldi	r30, 0x3B	; 59
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	80 95       	com	r24
    1ba4:	8c 93       	st	X, r24
    1ba6:	19 c0       	rjmp	.+50     	; 0x1bda <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
    1ba8:	a8 e3       	ldi	r26, 0x38	; 56
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e8 e3       	ldi	r30, 0x38	; 56
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	80 95       	com	r24
    1bb4:	8c 93       	st	X, r24
    1bb6:	11 c0       	rjmp	.+34     	; 0x1bda <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
    1bb8:	a5 e3       	ldi	r26, 0x35	; 53
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e5 e3       	ldi	r30, 0x35	; 53
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	80 95       	com	r24
    1bc4:	8c 93       	st	X, r24
    1bc6:	09 c0       	rjmp	.+18     	; 0x1bda <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTD : PORTD_Register = ~PORTD_Register ;
    1bc8:	a2 e3       	ldi	r26, 0x32	; 50
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e2 e3       	ldi	r30, 0x32	; 50
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	80 95       	com	r24
    1bd4:	8c 93       	st	X, r24
    1bd6:	01 c0       	rjmp	.+2      	; 0x1bda <DIO_enumTogglePortValue+0x9a>
		break ;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    1bd8:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	08 95       	ret

00001bea <DIO_enumGetPortValue>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_ErrorStatus   DIO_enumGetPortValue         ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <DIO_enumGetPortValue+0x6>
    1bf0:	00 d0       	rcall	.+0      	; 0x1bf2 <DIO_enumGetPortValue+0x8>
    1bf2:	00 d0       	rcall	.+0      	; 0x1bf4 <DIO_enumGetPortValue+0xa>
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	8a 83       	std	Y+2, r24	; 0x02
    1bfa:	7c 83       	std	Y+4, r23	; 0x04
    1bfc:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	84 30       	cpi	r24, 0x04	; 4
    1c06:	e8 f5       	brcc	.+122    	; 0x1c82 <DIO_enumGetPortValue+0x98>
	{
		switch (Copy_u8PORT)
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	3e 83       	std	Y+6, r19	; 0x06
    1c10:	2d 83       	std	Y+5, r18	; 0x05
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	81 30       	cpi	r24, 0x01	; 1
    1c18:	91 05       	cpc	r25, r1
    1c1a:	e1 f0       	breq	.+56     	; 0x1c54 <DIO_enumGetPortValue+0x6a>
    1c1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c20:	22 30       	cpi	r18, 0x02	; 2
    1c22:	31 05       	cpc	r19, r1
    1c24:	2c f4       	brge	.+10     	; 0x1c30 <DIO_enumGetPortValue+0x46>
    1c26:	8d 81       	ldd	r24, Y+5	; 0x05
    1c28:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	61 f0       	breq	.+24     	; 0x1c46 <DIO_enumGetPortValue+0x5c>
    1c2e:	27 c0       	rjmp	.+78     	; 0x1c7e <DIO_enumGetPortValue+0x94>
    1c30:	2d 81       	ldd	r18, Y+5	; 0x05
    1c32:	3e 81       	ldd	r19, Y+6	; 0x06
    1c34:	22 30       	cpi	r18, 0x02	; 2
    1c36:	31 05       	cpc	r19, r1
    1c38:	a1 f0       	breq	.+40     	; 0x1c62 <DIO_enumGetPortValue+0x78>
    1c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3e:	83 30       	cpi	r24, 0x03	; 3
    1c40:	91 05       	cpc	r25, r1
    1c42:	b1 f0       	breq	.+44     	; 0x1c70 <DIO_enumGetPortValue+0x86>
    1c44:	1c c0       	rjmp	.+56     	; 0x1c7e <DIO_enumGetPortValue+0x94>
		{
		case DIO_PORTA :
			*Copy_PtrData = PINA_Register  ;
    1c46:	e9 e3       	ldi	r30, 0x39	; 57
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c50:	80 83       	st	Z, r24
    1c52:	18 c0       	rjmp	.+48     	; 0x1c84 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
    1c54:	e6 e3       	ldi	r30, 0x36	; 54
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c5e:	80 83       	st	Z, r24
    1c60:	11 c0       	rjmp	.+34     	; 0x1c84 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
    1c62:	e3 e3       	ldi	r30, 0x33	; 51
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	eb 81       	ldd	r30, Y+3	; 0x03
    1c6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c6c:	80 83       	st	Z, r24
    1c6e:	0a c0       	rjmp	.+20     	; 0x1c84 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
    1c70:	e0 e3       	ldi	r30, 0x30	; 48
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	eb 81       	ldd	r30, Y+3	; 0x03
    1c78:	fc 81       	ldd	r31, Y+4	; 0x04
    1c7a:	80 83       	st	Z, r24
    1c7c:	03 c0       	rjmp	.+6      	; 0x1c84 <DIO_enumGetPortValue+0x9a>
			break ;
		default : LOC_enumState = DIO_NOK ;
    1c7e:	19 82       	std	Y+1, r1	; 0x01
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <DIO_enumGetPortValue+0x9a>
		break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    1c82:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c86:	26 96       	adiw	r28, 0x06	; 6
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <DIO_voidWriteHighNibbles>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <DIO_voidWriteHighNibbles+0x6>
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <DIO_voidWriteHighNibbles+0x8>
    1ca0:	0f 92       	push	r0
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	8a 83       	std	Y+2, r24	; 0x02
    1ca8:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	84 30       	cpi	r24, 0x04	; 4
    1cb2:	08 f0       	brcs	.+2      	; 0x1cb6 <DIO_voidWriteHighNibbles+0x1e>
    1cb4:	63 c0       	rjmp	.+198    	; 0x1d7c <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	82 95       	swap	r24
    1cba:	80 7f       	andi	r24, 0xF0	; 240
    1cbc:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	3d 83       	std	Y+5, r19	; 0x05
    1cc6:	2c 83       	std	Y+4, r18	; 0x04
    1cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	91 05       	cpc	r25, r1
    1cd0:	29 f1       	breq	.+74     	; 0x1d1c <DIO_voidWriteHighNibbles+0x84>
    1cd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd6:	22 30       	cpi	r18, 0x02	; 2
    1cd8:	31 05       	cpc	r19, r1
    1cda:	2c f4       	brge	.+10     	; 0x1ce6 <DIO_voidWriteHighNibbles+0x4e>
    1cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cde:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	61 f0       	breq	.+24     	; 0x1cfc <DIO_voidWriteHighNibbles+0x64>
    1ce4:	4c c0       	rjmp	.+152    	; 0x1d7e <DIO_voidWriteHighNibbles+0xe6>
    1ce6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce8:	3d 81       	ldd	r19, Y+5	; 0x05
    1cea:	22 30       	cpi	r18, 0x02	; 2
    1cec:	31 05       	cpc	r19, r1
    1cee:	31 f1       	breq	.+76     	; 0x1d3c <DIO_voidWriteHighNibbles+0xa4>
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf4:	83 30       	cpi	r24, 0x03	; 3
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	89 f1       	breq	.+98     	; 0x1d5c <DIO_voidWriteHighNibbles+0xc4>
    1cfa:	41 c0       	rjmp	.+130    	; 0x1d7e <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    1cfc:	ab e3       	ldi	r26, 0x3B	; 59
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	eb e3       	ldi	r30, 0x3B	; 59
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	8f 70       	andi	r24, 0x0F	; 15
    1d08:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    1d0a:	ab e3       	ldi	r26, 0x3B	; 59
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	eb e3       	ldi	r30, 0x3B	; 59
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	90 81       	ld	r25, Z
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	89 2b       	or	r24, r25
    1d18:	8c 93       	st	X, r24
    1d1a:	31 c0       	rjmp	.+98     	; 0x1d7e <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    1d1c:	a8 e3       	ldi	r26, 0x38	; 56
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e8 e3       	ldi	r30, 0x38	; 56
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	8f 70       	andi	r24, 0x0F	; 15
    1d28:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
    1d2a:	a8 e3       	ldi	r26, 0x38	; 56
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	e8 e3       	ldi	r30, 0x38	; 56
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	90 81       	ld	r25, Z
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	89 2b       	or	r24, r25
    1d38:	8c 93       	st	X, r24
    1d3a:	21 c0       	rjmp	.+66     	; 0x1d7e <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    1d3c:	a5 e3       	ldi	r26, 0x35	; 53
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e5 e3       	ldi	r30, 0x35	; 53
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	8f 70       	andi	r24, 0x0F	; 15
    1d48:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
    1d4a:	a5 e3       	ldi	r26, 0x35	; 53
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e5 e3       	ldi	r30, 0x35	; 53
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	90 81       	ld	r25, Z
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	89 2b       	or	r24, r25
    1d58:	8c 93       	st	X, r24
    1d5a:	11 c0       	rjmp	.+34     	; 0x1d7e <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    1d5c:	a2 e3       	ldi	r26, 0x32	; 50
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e2 e3       	ldi	r30, 0x32	; 50
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	8f 70       	andi	r24, 0x0F	; 15
    1d68:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
    1d6a:	a2 e3       	ldi	r26, 0x32	; 50
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e2 e3       	ldi	r30, 0x32	; 50
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	90 81       	ld	r25, Z
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	89 2b       	or	r24, r25
    1d78:	8c 93       	st	X, r24
    1d7a:	01 c0       	rjmp	.+2      	; 0x1d7e <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    1d7c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <DIO_voidWriteLowNibbles>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <DIO_voidWriteLowNibbles+0x6>
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <DIO_voidWriteLowNibbles+0x8>
    1d98:	0f 92       	push	r0
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	8a 83       	std	Y+2, r24	; 0x02
    1da0:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	89 83       	std	Y+1, r24	; 0x01


	if ( (Copy_u8PORT <= DIO_PORTD))
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	84 30       	cpi	r24, 0x04	; 4
    1daa:	08 f0       	brcs	.+2      	; 0x1dae <DIO_voidWriteLowNibbles+0x1e>
    1dac:	62 c0       	rjmp	.+196    	; 0x1e72 <DIO_voidWriteLowNibbles+0xe2>
	{
		Copy_u8value&=0x0f;
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	8f 70       	andi	r24, 0x0F	; 15
    1db2:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	3d 83       	std	Y+5, r19	; 0x05
    1dbc:	2c 83       	std	Y+4, r18	; 0x04
    1dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc2:	81 30       	cpi	r24, 0x01	; 1
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	29 f1       	breq	.+74     	; 0x1e12 <DIO_voidWriteLowNibbles+0x82>
    1dc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dca:	3d 81       	ldd	r19, Y+5	; 0x05
    1dcc:	22 30       	cpi	r18, 0x02	; 2
    1dce:	31 05       	cpc	r19, r1
    1dd0:	2c f4       	brge	.+10     	; 0x1ddc <DIO_voidWriteLowNibbles+0x4c>
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	61 f0       	breq	.+24     	; 0x1df2 <DIO_voidWriteLowNibbles+0x62>
    1dda:	4c c0       	rjmp	.+152    	; 0x1e74 <DIO_voidWriteLowNibbles+0xe4>
    1ddc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dde:	3d 81       	ldd	r19, Y+5	; 0x05
    1de0:	22 30       	cpi	r18, 0x02	; 2
    1de2:	31 05       	cpc	r19, r1
    1de4:	31 f1       	breq	.+76     	; 0x1e32 <DIO_voidWriteLowNibbles+0xa2>
    1de6:	8c 81       	ldd	r24, Y+4	; 0x04
    1de8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dea:	83 30       	cpi	r24, 0x03	; 3
    1dec:	91 05       	cpc	r25, r1
    1dee:	89 f1       	breq	.+98     	; 0x1e52 <DIO_voidWriteLowNibbles+0xc2>
    1df0:	41 c0       	rjmp	.+130    	; 0x1e74 <DIO_voidWriteLowNibbles+0xe4>
		{
		case DIO_PORTA :
			PORTA_Register &= 0xf0;                 //Set only the high nibble of the port A by the given value
    1df2:	ab e3       	ldi	r26, 0x3B	; 59
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	eb e3       	ldi	r30, 0x3B	; 59
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	80 7f       	andi	r24, 0xF0	; 240
    1dfe:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8value;
    1e00:	ab e3       	ldi	r26, 0x3B	; 59
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	eb e3       	ldi	r30, 0x3B	; 59
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	90 81       	ld	r25, Z
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	89 2b       	or	r24, r25
    1e0e:	8c 93       	st	X, r24
    1e10:	31 c0       	rjmp	.+98     	; 0x1e74 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
    1e12:	a8 e3       	ldi	r26, 0x38	; 56
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e8 e3       	ldi	r30, 0x38	; 56
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 7f       	andi	r24, 0xF0	; 240
    1e1e:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8value;
    1e20:	a8 e3       	ldi	r26, 0x38	; 56
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e8 e3       	ldi	r30, 0x38	; 56
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	90 81       	ld	r25, Z
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	89 2b       	or	r24, r25
    1e2e:	8c 93       	st	X, r24
    1e30:	21 c0       	rjmp	.+66     	; 0x1e74 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
    1e32:	a5 e3       	ldi	r26, 0x35	; 53
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e5 e3       	ldi	r30, 0x35	; 53
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	80 7f       	andi	r24, 0xF0	; 240
    1e3e:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8value;
    1e40:	a5 e3       	ldi	r26, 0x35	; 53
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e5 e3       	ldi	r30, 0x35	; 53
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	90 81       	ld	r25, Z
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	89 2b       	or	r24, r25
    1e4e:	8c 93       	st	X, r24
    1e50:	11 c0       	rjmp	.+34     	; 0x1e74 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTD:
			PORTD_Register &= 0xf0;                 //Set only the high nibble of the port D by the given value
    1e52:	a2 e3       	ldi	r26, 0x32	; 50
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e2 e3       	ldi	r30, 0x32	; 50
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	80 7f       	andi	r24, 0xF0	; 240
    1e5e:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8value;
    1e60:	a2 e3       	ldi	r26, 0x32	; 50
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	e2 e3       	ldi	r30, 0x32	; 50
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	90 81       	ld	r25, Z
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	89 2b       	or	r24, r25
    1e6e:	8c 93       	st	X, r24
    1e70:	01 c0       	rjmp	.+2      	; 0x1e74 <DIO_voidWriteLowNibbles+0xe4>


	}
	else
	{
		LOC_enumState = DIO_NOK;
    1e72:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    1e74:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <LED_voidInit>:
* Parameters :
            => struct has the led port , pin , status
* return : void 
*/
void LED_voidInit( LED_Type LED_Configuration )
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <LED_voidInit+0x6>
    1e8c:	0f 92       	push	r0
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	69 83       	std	Y+1, r22	; 0x01
    1e94:	7a 83       	std	Y+2, r23	; 0x02
    1e96:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_enumSetPinDirection( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_OUTPUT );
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	69 2f       	mov	r22, r25
    1e9e:	41 e0       	ldi	r20, 0x01	; 1
    1ea0:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_enumSetPinDirection>
	
}
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <LED_voidOn>:
* Parameters :
            => struct has the led port , pin , status
* return : void 
*/
void LED_voidOn  ( LED_Type LED_Configuration )
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <LED_voidOn+0x6>
    1eb6:	0f 92       	push	r0
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	69 83       	std	Y+1, r22	; 0x01
    1ebe:	7a 83       	std	Y+2, r23	; 0x02
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	81 30       	cpi	r24, 0x01	; 1
    1ec6:	39 f4       	brne	.+14     	; 0x1ed6 <LED_voidOn+0x26>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ecc:	69 2f       	mov	r22, r25
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enumSetPinValue>
    1ed4:	09 c0       	rjmp	.+18     	; 0x1ee8 <LED_voidOn+0x38>
		
	}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	88 23       	and	r24, r24
    1eda:	31 f4       	brne	.+12     	; 0x1ee8 <LED_voidOn+0x38>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee0:	69 2f       	mov	r22, r25
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enumSetPinValue>
		
	}
	
}
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <LED_voidOff>:
* Parameters :
             => struct has the led port , pin , status
* return : void 
*/
void LED_voidOff ( LED_Type LED_Configuration )
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <LED_voidOff+0x6>
    1efa:	0f 92       	push	r0
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	69 83       	std	Y+1, r22	; 0x01
    1f02:	7a 83       	std	Y+2, r23	; 0x02
    1f04:	8b 83       	std	Y+3, r24	; 0x03
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	39 f4       	brne	.+14     	; 0x1f1a <LED_voidOff+0x26>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	69 2f       	mov	r22, r25
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enumSetPinValue>
    1f18:	09 c0       	rjmp	.+18     	; 0x1f2c <LED_voidOff+0x38>
		
	}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	88 23       	and	r24, r24
    1f1e:	31 f4       	brne	.+12     	; 0x1f2c <LED_voidOff+0x38>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH  );
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	69 2f       	mov	r22, r25
    1f26:	41 e0       	ldi	r20, 0x01	; 1
    1f28:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enumSetPinValue>
		
	}
	
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <LED_voidToggle>:
* Parameters :
             => struct has the led port , pin , status
* return : void 
*/
void LED_voidToggle      ( LED_Type LED_Configuration )
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <LED_voidToggle+0x6>
    1f3e:	0f 92       	push	r0
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	69 83       	std	Y+1, r22	; 0x01
    1f46:	7a 83       	std	Y+2, r23	; 0x02
    1f48:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue  ( LED_Configuration.Port , LED_Configuration.Pin );
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4e:	69 2f       	mov	r22, r25
    1f50:	0e 94 25 0b 	call	0x164a	; 0x164a <DIO_enumTogglePinValue>
}
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	cf 91       	pop	r28
    1f5c:	df 91       	pop	r29
    1f5e:	08 95       	ret

00001f60 <main>:
#include "ADC_interface.h"

#define NUM_LEDS 8

int main(void)
{
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	ef 97       	sbiw	r28, 0x3f	; 63
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
        {LED_PORTB, LED_PIN3, ACTIVE_HIGH},
        {LED_PORTB, LED_PIN4, ACTIVE_HIGH},
        {LED_PORTB, LED_PIN5, ACTIVE_HIGH},
        {LED_PORTB, LED_PIN6, ACTIVE_HIGH},
        {LED_PORTB, LED_PIN7, ACTIVE_HIGH}
    };
    1f74:	ce 01       	movw	r24, r28
    1f76:	81 96       	adiw	r24, 0x21	; 33
    1f78:	9c af       	std	Y+60, r25	; 0x3c
    1f7a:	8b af       	std	Y+59, r24	; 0x3b
    1f7c:	e8 e6       	ldi	r30, 0x68	; 104
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	fe af       	std	Y+62, r31	; 0x3e
    1f82:	ed af       	std	Y+61, r30	; 0x3d
    1f84:	f8 e1       	ldi	r31, 0x18	; 24
    1f86:	ff af       	std	Y+63, r31	; 0x3f
    1f88:	ed ad       	ldd	r30, Y+61	; 0x3d
    1f8a:	fe ad       	ldd	r31, Y+62	; 0x3e
    1f8c:	00 80       	ld	r0, Z
    1f8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f90:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f92:	01 96       	adiw	r24, 0x01	; 1
    1f94:	9e af       	std	Y+62, r25	; 0x3e
    1f96:	8d af       	std	Y+61, r24	; 0x3d
    1f98:	eb ad       	ldd	r30, Y+59	; 0x3b
    1f9a:	fc ad       	ldd	r31, Y+60	; 0x3c
    1f9c:	00 82       	st	Z, r0
    1f9e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fa0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fa2:	01 96       	adiw	r24, 0x01	; 1
    1fa4:	9c af       	std	Y+60, r25	; 0x3c
    1fa6:	8b af       	std	Y+59, r24	; 0x3b
    1fa8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1faa:	91 50       	subi	r25, 0x01	; 1
    1fac:	9f af       	std	Y+63, r25	; 0x3f
    1fae:	ef ad       	ldd	r30, Y+63	; 0x3f
    1fb0:	ee 23       	and	r30, r30
    1fb2:	51 f7       	brne	.-44     	; 0x1f88 <main+0x28>

    // Initialize LEDs
    for (u8 i = 0; i < NUM_LEDS; i++) {
    1fb4:	18 a2       	std	Y+32, r1	; 0x20
    1fb6:	17 c0       	rjmp	.+46     	; 0x1fe6 <main+0x86>
        LED_voidInit(leds[i]);
    1fb8:	88 a1       	ldd	r24, Y+32	; 0x20
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	c9 01       	movw	r24, r18
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	82 0f       	add	r24, r18
    1fc6:	93 1f       	adc	r25, r19
    1fc8:	9e 01       	movw	r18, r28
    1fca:	2f 5f       	subi	r18, 0xFF	; 255
    1fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fce:	82 0f       	add	r24, r18
    1fd0:	93 1f       	adc	r25, r19
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	b0 96       	adiw	r30, 0x20	; 32
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LED_voidInit>
        {LED_PORTB, LED_PIN6, ACTIVE_HIGH},
        {LED_PORTB, LED_PIN7, ACTIVE_HIGH}
    };

    // Initialize LEDs
    for (u8 i = 0; i < NUM_LEDS; i++) {
    1fe0:	88 a1       	ldd	r24, Y+32	; 0x20
    1fe2:	8f 5f       	subi	r24, 0xFF	; 255
    1fe4:	88 a3       	std	Y+32, r24	; 0x20
    1fe6:	88 a1       	ldd	r24, Y+32	; 0x20
    1fe8:	88 30       	cpi	r24, 0x08	; 8
    1fea:	30 f3       	brcs	.-52     	; 0x1fb8 <main+0x58>
        LED_voidInit(leds[i]);
    }

    // Initialize ADC
    ADC_voidInit();
    1fec:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>

    u16 ADCValue = 0;
    1ff0:	1a ae       	std	Y+58, r1	; 0x3a
    1ff2:	19 ae       	std	Y+57, r1	; 0x39

    while (1)
    {
        // Read ADC value
        u8 result = ADC_u8GetResultSync(ADC_CHANNEL0, &ADCValue);
    1ff4:	9e 01       	movw	r18, r28
    1ff6:	27 5c       	subi	r18, 0xC7	; 199
    1ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	b9 01       	movw	r22, r18
    1ffe:	0e 94 32 06 	call	0xc64	; 0xc64 <ADC_u8GetResultSync>
    2002:	8f 8f       	std	Y+31, r24	; 0x1f

        if (result == OK)
    2004:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2006:	88 23       	and	r24, r24
    2008:	09 f0       	breq	.+2      	; 0x200c <main+0xac>
    200a:	b7 c0       	rjmp	.+366    	; 0x217a <main+0x21a>
        {
            // Calculate number of LEDs to turn on
            u8 numLedsOn = (ADCValue * NUM_LEDS) / 1023;
    200c:	89 ad       	ldd	r24, Y+57	; 0x39
    200e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	2f ef       	ldi	r18, 0xFF	; 255
    201e:	33 e0       	ldi	r19, 0x03	; 3
    2020:	b9 01       	movw	r22, r18
    2022:	0e 94 35 11 	call	0x226a	; 0x226a <__udivmodhi4>
    2026:	cb 01       	movw	r24, r22
    2028:	8e 8f       	std	Y+30, r24	; 0x1e
            // Debugging: Print ADCValue and numLedsOn to check correctness
            // Use a serial monitor or other debugging method to check these values if possible
            // In this code, we'll use LEDs as debug indicators

            // Map ADC value to LEDs
            for (u8 i = 0; i < NUM_LEDS; i++) {
    202a:	1d 8e       	std	Y+29, r1	; 0x1d
    202c:	30 c0       	rjmp	.+96     	; 0x208e <main+0x12e>
                if (i < numLedsOn) {
    202e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2030:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2032:	98 17       	cp	r25, r24
    2034:	a8 f4       	brcc	.+42     	; 0x2060 <main+0x100>
                    LED_voidOn(leds[i]);
    2036:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	c9 01       	movw	r24, r18
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	82 0f       	add	r24, r18
    2044:	93 1f       	adc	r25, r19
    2046:	9e 01       	movw	r18, r28
    2048:	2f 5f       	subi	r18, 0xFF	; 255
    204a:	3f 4f       	sbci	r19, 0xFF	; 255
    204c:	82 0f       	add	r24, r18
    204e:	93 1f       	adc	r25, r19
    2050:	fc 01       	movw	r30, r24
    2052:	b0 96       	adiw	r30, 0x20	; 32
    2054:	60 81       	ld	r22, Z
    2056:	71 81       	ldd	r23, Z+1	; 0x01
    2058:	82 81       	ldd	r24, Z+2	; 0x02
    205a:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <LED_voidOn>
    205e:	14 c0       	rjmp	.+40     	; 0x2088 <main+0x128>
                } else {
                    LED_voidOff(leds[i]);
    2060:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	c9 01       	movw	r24, r18
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	82 0f       	add	r24, r18
    206e:	93 1f       	adc	r25, r19
    2070:	9e 01       	movw	r18, r28
    2072:	2f 5f       	subi	r18, 0xFF	; 255
    2074:	3f 4f       	sbci	r19, 0xFF	; 255
    2076:	82 0f       	add	r24, r18
    2078:	93 1f       	adc	r25, r19
    207a:	fc 01       	movw	r30, r24
    207c:	b0 96       	adiw	r30, 0x20	; 32
    207e:	60 81       	ld	r22, Z
    2080:	71 81       	ldd	r23, Z+1	; 0x01
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LED_voidOff>
            // Debugging: Print ADCValue and numLedsOn to check correctness
            // Use a serial monitor or other debugging method to check these values if possible
            // In this code, we'll use LEDs as debug indicators

            // Map ADC value to LEDs
            for (u8 i = 0; i < NUM_LEDS; i++) {
    2088:	8d 8d       	ldd	r24, Y+29	; 0x1d
    208a:	8f 5f       	subi	r24, 0xFF	; 255
    208c:	8d 8f       	std	Y+29, r24	; 0x1d
    208e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2090:	88 30       	cpi	r24, 0x08	; 8
    2092:	68 f2       	brcs	.-102    	; 0x202e <main+0xce>
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a8 ec       	ldi	r26, 0xC8	; 200
    209a:	b2 e4       	ldi	r27, 0x42	; 66
    209c:	89 8f       	std	Y+25, r24	; 0x19
    209e:	9a 8f       	std	Y+26, r25	; 0x1a
    20a0:	ab 8f       	std	Y+27, r26	; 0x1b
    20a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a4:	69 8d       	ldd	r22, Y+25	; 0x19
    20a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	4a e7       	ldi	r20, 0x7A	; 122
    20b2:	53 e4       	ldi	r21, 0x43	; 67
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	8d 8b       	std	Y+21, r24	; 0x15
    20be:	9e 8b       	std	Y+22, r25	; 0x16
    20c0:	af 8b       	std	Y+23, r26	; 0x17
    20c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20c4:	6d 89       	ldd	r22, Y+21	; 0x15
    20c6:	7e 89       	ldd	r23, Y+22	; 0x16
    20c8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ca:	98 8d       	ldd	r25, Y+24	; 0x18
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	40 e8       	ldi	r20, 0x80	; 128
    20d2:	5f e3       	ldi	r21, 0x3F	; 63
    20d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d8:	88 23       	and	r24, r24
    20da:	2c f4       	brge	.+10     	; 0x20e6 <main+0x186>
		__ticks = 1;
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9c 8b       	std	Y+20, r25	; 0x14
    20e2:	8b 8b       	std	Y+19, r24	; 0x13
    20e4:	3f c0       	rjmp	.+126    	; 0x2164 <main+0x204>
	else if (__tmp > 65535)
    20e6:	6d 89       	ldd	r22, Y+21	; 0x15
    20e8:	7e 89       	ldd	r23, Y+22	; 0x16
    20ea:	8f 89       	ldd	r24, Y+23	; 0x17
    20ec:	98 8d       	ldd	r25, Y+24	; 0x18
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	3f ef       	ldi	r19, 0xFF	; 255
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	57 e4       	ldi	r21, 0x47	; 71
    20f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	4c f5       	brge	.+82     	; 0x2150 <main+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2100:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2102:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2104:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e2       	ldi	r20, 0x20	; 32
    210c:	51 e4       	ldi	r21, 0x41	; 65
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	9c 8b       	std	Y+20, r25	; 0x14
    2124:	8b 8b       	std	Y+19, r24	; 0x13
    2126:	0f c0       	rjmp	.+30     	; 0x2146 <main+0x1e6>
    2128:	89 e1       	ldi	r24, 0x19	; 25
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9a 8b       	std	Y+18, r25	; 0x12
    212e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2130:	89 89       	ldd	r24, Y+17	; 0x11
    2132:	9a 89       	ldd	r25, Y+18	; 0x12
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <main+0x1d4>
    2138:	9a 8b       	std	Y+18, r25	; 0x12
    213a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213c:	8b 89       	ldd	r24, Y+19	; 0x13
    213e:	9c 89       	ldd	r25, Y+20	; 0x14
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	9c 8b       	std	Y+20, r25	; 0x14
    2144:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2146:	8b 89       	ldd	r24, Y+19	; 0x13
    2148:	9c 89       	ldd	r25, Y+20	; 0x14
    214a:	00 97       	sbiw	r24, 0x00	; 0
    214c:	69 f7       	brne	.-38     	; 0x2128 <main+0x1c8>
    214e:	52 cf       	rjmp	.-348    	; 0x1ff4 <main+0x94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2150:	6d 89       	ldd	r22, Y+21	; 0x15
    2152:	7e 89       	ldd	r23, Y+22	; 0x16
    2154:	8f 89       	ldd	r24, Y+23	; 0x17
    2156:	98 8d       	ldd	r25, Y+24	; 0x18
    2158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	9c 8b       	std	Y+20, r25	; 0x14
    2162:	8b 8b       	std	Y+19, r24	; 0x13
    2164:	8b 89       	ldd	r24, Y+19	; 0x13
    2166:	9c 89       	ldd	r25, Y+20	; 0x14
    2168:	98 8b       	std	Y+16, r25	; 0x10
    216a:	8f 87       	std	Y+15, r24	; 0x0f
    216c:	8f 85       	ldd	r24, Y+15	; 0x0f
    216e:	98 89       	ldd	r25, Y+16	; 0x10
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <main+0x210>
    2174:	98 8b       	std	Y+16, r25	; 0x10
    2176:	8f 87       	std	Y+15, r24	; 0x0f
    2178:	3d cf       	rjmp	.-390    	; 0x1ff4 <main+0x94>
            _delay_ms(100);
        }
        else
        {
            // Toggle one LED to indicate error
            LED_voidToggle(leds[0]);
    217a:	69 a1       	ldd	r22, Y+33	; 0x21
    217c:	7a a1       	ldd	r23, Y+34	; 0x22
    217e:	8b a1       	ldd	r24, Y+35	; 0x23
    2180:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <LED_voidToggle>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	aa e7       	ldi	r26, 0x7A	; 122
    218a:	b4 e4       	ldi	r27, 0x44	; 68
    218c:	8b 87       	std	Y+11, r24	; 0x0b
    218e:	9c 87       	std	Y+12, r25	; 0x0c
    2190:	ad 87       	std	Y+13, r26	; 0x0d
    2192:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2194:	6b 85       	ldd	r22, Y+11	; 0x0b
    2196:	7c 85       	ldd	r23, Y+12	; 0x0c
    2198:	8d 85       	ldd	r24, Y+13	; 0x0d
    219a:	9e 85       	ldd	r25, Y+14	; 0x0e
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a e7       	ldi	r20, 0x7A	; 122
    21a2:	53 e4       	ldi	r21, 0x43	; 67
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8f 83       	std	Y+7, r24	; 0x07
    21ae:	98 87       	std	Y+8, r25	; 0x08
    21b0:	a9 87       	std	Y+9, r26	; 0x09
    21b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b4:	6f 81       	ldd	r22, Y+7	; 0x07
    21b6:	78 85       	ldd	r23, Y+8	; 0x08
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e8       	ldi	r20, 0x80	; 128
    21c2:	5f e3       	ldi	r21, 0x3F	; 63
    21c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c8:	88 23       	and	r24, r24
    21ca:	2c f4       	brge	.+10     	; 0x21d6 <main+0x276>
		__ticks = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9e 83       	std	Y+6, r25	; 0x06
    21d2:	8d 83       	std	Y+5, r24	; 0x05
    21d4:	3f c0       	rjmp	.+126    	; 0x2254 <main+0x2f4>
	else if (__tmp > 65535)
    21d6:	6f 81       	ldd	r22, Y+7	; 0x07
    21d8:	78 85       	ldd	r23, Y+8	; 0x08
    21da:	89 85       	ldd	r24, Y+9	; 0x09
    21dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	4f e7       	ldi	r20, 0x7F	; 127
    21e4:	57 e4       	ldi	r21, 0x47	; 71
    21e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ea:	18 16       	cp	r1, r24
    21ec:	4c f5       	brge	.+82     	; 0x2240 <main+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e2       	ldi	r20, 0x20	; 32
    21fc:	51 e4       	ldi	r21, 0x41	; 65
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	9e 83       	std	Y+6, r25	; 0x06
    2214:	8d 83       	std	Y+5, r24	; 0x05
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <main+0x2d6>
    2218:	89 e1       	ldi	r24, 0x19	; 25
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9c 83       	std	Y+4, r25	; 0x04
    221e:	8b 83       	std	Y+3, r24	; 0x03
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <main+0x2c4>
    2228:	9c 83       	std	Y+4, r25	; 0x04
    222a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222c:	8d 81       	ldd	r24, Y+5	; 0x05
    222e:	9e 81       	ldd	r25, Y+6	; 0x06
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	9e 83       	std	Y+6, r25	; 0x06
    2234:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2236:	8d 81       	ldd	r24, Y+5	; 0x05
    2238:	9e 81       	ldd	r25, Y+6	; 0x06
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	69 f7       	brne	.-38     	; 0x2218 <main+0x2b8>
    223e:	da ce       	rjmp	.-588    	; 0x1ff4 <main+0x94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2240:	6f 81       	ldd	r22, Y+7	; 0x07
    2242:	78 85       	ldd	r23, Y+8	; 0x08
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a 85       	ldd	r25, Y+10	; 0x0a
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	9a 83       	std	Y+2, r25	; 0x02
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	9a 81       	ldd	r25, Y+2	; 0x02
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <main+0x300>
    2264:	9a 83       	std	Y+2, r25	; 0x02
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	c5 ce       	rjmp	.-630    	; 0x1ff4 <main+0x94>

0000226a <__udivmodhi4>:
    226a:	aa 1b       	sub	r26, r26
    226c:	bb 1b       	sub	r27, r27
    226e:	51 e1       	ldi	r21, 0x11	; 17
    2270:	07 c0       	rjmp	.+14     	; 0x2280 <__udivmodhi4_ep>

00002272 <__udivmodhi4_loop>:
    2272:	aa 1f       	adc	r26, r26
    2274:	bb 1f       	adc	r27, r27
    2276:	a6 17       	cp	r26, r22
    2278:	b7 07       	cpc	r27, r23
    227a:	10 f0       	brcs	.+4      	; 0x2280 <__udivmodhi4_ep>
    227c:	a6 1b       	sub	r26, r22
    227e:	b7 0b       	sbc	r27, r23

00002280 <__udivmodhi4_ep>:
    2280:	88 1f       	adc	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	5a 95       	dec	r21
    2286:	a9 f7       	brne	.-22     	; 0x2272 <__udivmodhi4_loop>
    2288:	80 95       	com	r24
    228a:	90 95       	com	r25
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	08 95       	ret

00002292 <__prologue_saves__>:
    2292:	2f 92       	push	r2
    2294:	3f 92       	push	r3
    2296:	4f 92       	push	r4
    2298:	5f 92       	push	r5
    229a:	6f 92       	push	r6
    229c:	7f 92       	push	r7
    229e:	8f 92       	push	r8
    22a0:	9f 92       	push	r9
    22a2:	af 92       	push	r10
    22a4:	bf 92       	push	r11
    22a6:	cf 92       	push	r12
    22a8:	df 92       	push	r13
    22aa:	ef 92       	push	r14
    22ac:	ff 92       	push	r15
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	ca 1b       	sub	r28, r26
    22bc:	db 0b       	sbc	r29, r27
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	09 94       	ijmp

000022ca <__epilogue_restores__>:
    22ca:	2a 88       	ldd	r2, Y+18	; 0x12
    22cc:	39 88       	ldd	r3, Y+17	; 0x11
    22ce:	48 88       	ldd	r4, Y+16	; 0x10
    22d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    22d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    22d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    22d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    22d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    22da:	aa 84       	ldd	r10, Y+10	; 0x0a
    22dc:	b9 84       	ldd	r11, Y+9	; 0x09
    22de:	c8 84       	ldd	r12, Y+8	; 0x08
    22e0:	df 80       	ldd	r13, Y+7	; 0x07
    22e2:	ee 80       	ldd	r14, Y+6	; 0x06
    22e4:	fd 80       	ldd	r15, Y+5	; 0x05
    22e6:	0c 81       	ldd	r16, Y+4	; 0x04
    22e8:	1b 81       	ldd	r17, Y+3	; 0x03
    22ea:	aa 81       	ldd	r26, Y+2	; 0x02
    22ec:	b9 81       	ldd	r27, Y+1	; 0x01
    22ee:	ce 0f       	add	r28, r30
    22f0:	d1 1d       	adc	r29, r1
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	ed 01       	movw	r28, r26
    22fe:	08 95       	ret

00002300 <_exit>:
    2300:	f8 94       	cli

00002302 <__stop_program>:
    2302:	ff cf       	rjmp	.-2      	; 0x2302 <__stop_program>
