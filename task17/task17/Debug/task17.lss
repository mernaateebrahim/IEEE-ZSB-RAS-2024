
task17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000025cc  00002640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001a88  00000000  00000000  00002658  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c59  00000000  00000000  000040e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004e79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006c32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000088cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009487  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <main>
      7a:	0c 94 e4 12 	jmp	0x25c8	; 0x25c8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ad 12 	jmp	0x255a	; 0x255a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ad 12 	jmp	0x255a	; 0x255a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 b9 12 	jmp	0x2572	; 0x2572 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 bd 12 	jmp	0x257a	; 0x257a <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_VoidSetPinDirection>:
#include "DIO_private.h"

#ifndef DIO_PROGRAM_C_
#define DIO_PROGRAM_C_

DIO_ErrorStatus DIO_VoidSetPinDirection(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	28 97       	sbiw	r28, 0x08	; 8
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8a 83       	std	Y+2, r24	; 0x02
     b4c:	6b 83       	std	Y+3, r22	; 0x03
     b4e:	4c 83       	std	Y+4, r20	; 0x04
    DIO_ErrorStatus LOC_enumState = DIO_OK;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7)) {
     b54:	8a 81       	ldd	r24, Y+2	; 0x02
     b56:	84 30       	cpi	r24, 0x04	; 4
     b58:	08 f0       	brcs	.+2      	; 0xb5c <DIO_VoidSetPinDirection+0x26>
     b5a:	ef c0       	rjmp	.+478    	; 0xd3a <DIO_VoidSetPinDirection+0x204>
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
     b5e:	88 30       	cpi	r24, 0x08	; 8
     b60:	08 f0       	brcs	.+2      	; 0xb64 <DIO_VoidSetPinDirection+0x2e>
     b62:	eb c0       	rjmp	.+470    	; 0xd3a <DIO_VoidSetPinDirection+0x204>
        if (Copy_u8Direction == DIO_PIN_OUTPUT) {
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	09 f0       	breq	.+2      	; 0xb6c <DIO_VoidSetPinDirection+0x36>
     b6a:	6f c0       	rjmp	.+222    	; 0xc4a <DIO_VoidSetPinDirection+0x114>
            switch (Copy_u8PORT) {
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	28 2f       	mov	r18, r24
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	38 87       	std	Y+8, r19	; 0x08
     b74:	2f 83       	std	Y+7, r18	; 0x07
     b76:	8f 81       	ldd	r24, Y+7	; 0x07
     b78:	98 85       	ldd	r25, Y+8	; 0x08
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	91 05       	cpc	r25, r1
     b7e:	49 f1       	breq	.+82     	; 0xbd2 <DIO_VoidSetPinDirection+0x9c>
     b80:	2f 81       	ldd	r18, Y+7	; 0x07
     b82:	38 85       	ldd	r19, Y+8	; 0x08
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <DIO_VoidSetPinDirection+0x5e>
     b8a:	8f 81       	ldd	r24, Y+7	; 0x07
     b8c:	98 85       	ldd	r25, Y+8	; 0x08
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	61 f0       	breq	.+24     	; 0xbaa <DIO_VoidSetPinDirection+0x74>
     b92:	d4 c0       	rjmp	.+424    	; 0xd3c <DIO_VoidSetPinDirection+0x206>
     b94:	2f 81       	ldd	r18, Y+7	; 0x07
     b96:	38 85       	ldd	r19, Y+8	; 0x08
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	71 f1       	breq	.+92     	; 0xbfa <DIO_VoidSetPinDirection+0xc4>
     b9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ba0:	98 85       	ldd	r25, Y+8	; 0x08
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	91 05       	cpc	r25, r1
     ba6:	e9 f1       	breq	.+122    	; 0xc22 <DIO_VoidSetPinDirection+0xec>
     ba8:	c9 c0       	rjmp	.+402    	; 0xd3c <DIO_VoidSetPinDirection+0x206>
                case DIO_PORTA: SET_BIT(DDRA, Copy_u8PIN); break;
     baa:	aa e3       	ldi	r26, 0x3A	; 58
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	ea e3       	ldi	r30, 0x3A	; 58
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	48 2f       	mov	r20, r24
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	02 2e       	mov	r0, r18
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <DIO_VoidSetPinDirection+0x92>
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	0a 94       	dec	r0
     bca:	e2 f7       	brpl	.-8      	; 0xbc4 <DIO_VoidSetPinDirection+0x8e>
     bcc:	84 2b       	or	r24, r20
     bce:	8c 93       	st	X, r24
     bd0:	b5 c0       	rjmp	.+362    	; 0xd3c <DIO_VoidSetPinDirection+0x206>
                case DIO_PORTB: SET_BIT(DDRB, Copy_u8PIN); break;
     bd2:	aa e3       	ldi	r26, 0x3A	; 58
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ea e3       	ldi	r30, 0x3A	; 58
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	48 2f       	mov	r20, r24
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	02 2e       	mov	r0, r18
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <DIO_VoidSetPinDirection+0xba>
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	0a 94       	dec	r0
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <DIO_VoidSetPinDirection+0xb6>
     bf4:	84 2b       	or	r24, r20
     bf6:	8c 93       	st	X, r24
     bf8:	a1 c0       	rjmp	.+322    	; 0xd3c <DIO_VoidSetPinDirection+0x206>
                case DIO_PORTC: SET_BIT(DDRC, Copy_u8PIN); break;
     bfa:	aa e3       	ldi	r26, 0x3A	; 58
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	ea e3       	ldi	r30, 0x3A	; 58
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	48 2f       	mov	r20, r24
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	02 2e       	mov	r0, r18
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <DIO_VoidSetPinDirection+0xe2>
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	0a 94       	dec	r0
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <DIO_VoidSetPinDirection+0xde>
     c1c:	84 2b       	or	r24, r20
     c1e:	8c 93       	st	X, r24
     c20:	8d c0       	rjmp	.+282    	; 0xd3c <DIO_VoidSetPinDirection+0x206>
                case DIO_PORTD: SET_BIT(DDRD, Copy_u8PIN); break;
     c22:	aa e3       	ldi	r26, 0x3A	; 58
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	ea e3       	ldi	r30, 0x3A	; 58
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	48 2f       	mov	r20, r24
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	02 2e       	mov	r0, r18
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <DIO_VoidSetPinDirection+0x10a>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	0a 94       	dec	r0
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <DIO_VoidSetPinDirection+0x106>
     c44:	84 2b       	or	r24, r20
     c46:	8c 93       	st	X, r24
     c48:	79 c0       	rjmp	.+242    	; 0xd3c <DIO_VoidSetPinDirection+0x206>
            }
        } else if (Copy_u8Direction == DIO_PIN_INPUT) {
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	88 23       	and	r24, r24
     c4e:	09 f0       	breq	.+2      	; 0xc52 <DIO_VoidSetPinDirection+0x11c>
     c50:	75 c0       	rjmp	.+234    	; 0xd3c <DIO_VoidSetPinDirection+0x206>
            switch (Copy_u8PORT) {
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	3e 83       	std	Y+6, r19	; 0x06
     c5a:	2d 83       	std	Y+5, r18	; 0x05
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	9e 81       	ldd	r25, Y+6	; 0x06
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	91 05       	cpc	r25, r1
     c64:	59 f1       	breq	.+86     	; 0xcbc <DIO_VoidSetPinDirection+0x186>
     c66:	2d 81       	ldd	r18, Y+5	; 0x05
     c68:	3e 81       	ldd	r19, Y+6	; 0x06
     c6a:	22 30       	cpi	r18, 0x02	; 2
     c6c:	31 05       	cpc	r19, r1
     c6e:	2c f4       	brge	.+10     	; 0xc7a <DIO_VoidSetPinDirection+0x144>
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	69 f0       	breq	.+26     	; 0xc92 <DIO_VoidSetPinDirection+0x15c>
     c78:	61 c0       	rjmp	.+194    	; 0xd3c <DIO_VoidSetPinDirection+0x206>
     c7a:	2d 81       	ldd	r18, Y+5	; 0x05
     c7c:	3e 81       	ldd	r19, Y+6	; 0x06
     c7e:	22 30       	cpi	r18, 0x02	; 2
     c80:	31 05       	cpc	r19, r1
     c82:	89 f1       	breq	.+98     	; 0xce6 <DIO_VoidSetPinDirection+0x1b0>
     c84:	8d 81       	ldd	r24, Y+5	; 0x05
     c86:	9e 81       	ldd	r25, Y+6	; 0x06
     c88:	83 30       	cpi	r24, 0x03	; 3
     c8a:	91 05       	cpc	r25, r1
     c8c:	09 f4       	brne	.+2      	; 0xc90 <DIO_VoidSetPinDirection+0x15a>
     c8e:	40 c0       	rjmp	.+128    	; 0xd10 <DIO_VoidSetPinDirection+0x1da>
     c90:	55 c0       	rjmp	.+170    	; 0xd3c <DIO_VoidSetPinDirection+0x206>
                case DIO_PORTA: CLR_BIT(DDRA, Copy_u8PIN); break;
     c92:	aa e3       	ldi	r26, 0x3A	; 58
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	48 2f       	mov	r20, r24
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	02 2e       	mov	r0, r18
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <DIO_VoidSetPinDirection+0x17a>
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	0a 94       	dec	r0
     cb2:	e2 f7       	brpl	.-8      	; 0xcac <DIO_VoidSetPinDirection+0x176>
     cb4:	80 95       	com	r24
     cb6:	84 23       	and	r24, r20
     cb8:	8c 93       	st	X, r24
     cba:	40 c0       	rjmp	.+128    	; 0xd3c <DIO_VoidSetPinDirection+0x206>
                case DIO_PORTB: CLR_BIT(DDRB, Copy_u8PIN); break;
     cbc:	aa e3       	ldi	r26, 0x3A	; 58
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ea e3       	ldi	r30, 0x3A	; 58
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <DIO_VoidSetPinDirection+0x1a4>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <DIO_VoidSetPinDirection+0x1a0>
     cde:	80 95       	com	r24
     ce0:	84 23       	and	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	2b c0       	rjmp	.+86     	; 0xd3c <DIO_VoidSetPinDirection+0x206>
                case DIO_PORTC: CLR_BIT(DDRC, Copy_u8PIN); break;
     ce6:	aa e3       	ldi	r26, 0x3A	; 58
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	ea e3       	ldi	r30, 0x3A	; 58
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_VoidSetPinDirection+0x1ce>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_VoidSetPinDirection+0x1ca>
     d08:	80 95       	com	r24
     d0a:	84 23       	and	r24, r20
     d0c:	8c 93       	st	X, r24
     d0e:	16 c0       	rjmp	.+44     	; 0xd3c <DIO_VoidSetPinDirection+0x206>
                case DIO_PORTD: CLR_BIT(DDRD, Copy_u8PIN); break;
     d10:	aa e3       	ldi	r26, 0x3A	; 58
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ea e3       	ldi	r30, 0x3A	; 58
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	48 2f       	mov	r20, r24
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 2e       	mov	r0, r18
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <DIO_VoidSetPinDirection+0x1f8>
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	0a 94       	dec	r0
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <DIO_VoidSetPinDirection+0x1f4>
     d32:	80 95       	com	r24
     d34:	84 23       	and	r24, r20
     d36:	8c 93       	st	X, r24
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <DIO_VoidSetPinDirection+0x206>
            }
        }
    } else {
        LOC_enumState = DIO_NOK;
     d3a:	19 82       	std	Y+1, r1	; 0x01
    }
    return LOC_enumState;
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d3e:	28 96       	adiw	r28, 0x08	; 8
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <DIO_VoidSetPinValue>:

DIO_ErrorStatus DIO_VoidSetPinValue(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value) {
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	28 97       	sbiw	r28, 0x08	; 8
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	8a 83       	std	Y+2, r24	; 0x02
     d66:	6b 83       	std	Y+3, r22	; 0x03
     d68:	4c 83       	std	Y+4, r20	; 0x04
    DIO_ErrorStatus LOC_enumState = DIO_OK;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7)) {
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	84 30       	cpi	r24, 0x04	; 4
     d72:	08 f0       	brcs	.+2      	; 0xd76 <DIO_VoidSetPinValue+0x26>
     d74:	ef c0       	rjmp	.+478    	; 0xf54 <DIO_VoidSetPinValue+0x204>
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	88 30       	cpi	r24, 0x08	; 8
     d7a:	08 f0       	brcs	.+2      	; 0xd7e <DIO_VoidSetPinValue+0x2e>
     d7c:	eb c0       	rjmp	.+470    	; 0xf54 <DIO_VoidSetPinValue+0x204>
        if (Copy_u8Value == DIO_PIN_HIGH) {
     d7e:	8c 81       	ldd	r24, Y+4	; 0x04
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	09 f0       	breq	.+2      	; 0xd86 <DIO_VoidSetPinValue+0x36>
     d84:	6f c0       	rjmp	.+222    	; 0xe64 <DIO_VoidSetPinValue+0x114>
            switch (Copy_u8PORT) {
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	38 87       	std	Y+8, r19	; 0x08
     d8e:	2f 83       	std	Y+7, r18	; 0x07
     d90:	8f 81       	ldd	r24, Y+7	; 0x07
     d92:	98 85       	ldd	r25, Y+8	; 0x08
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	91 05       	cpc	r25, r1
     d98:	49 f1       	breq	.+82     	; 0xdec <DIO_VoidSetPinValue+0x9c>
     d9a:	2f 81       	ldd	r18, Y+7	; 0x07
     d9c:	38 85       	ldd	r19, Y+8	; 0x08
     d9e:	22 30       	cpi	r18, 0x02	; 2
     da0:	31 05       	cpc	r19, r1
     da2:	2c f4       	brge	.+10     	; 0xdae <DIO_VoidSetPinValue+0x5e>
     da4:	8f 81       	ldd	r24, Y+7	; 0x07
     da6:	98 85       	ldd	r25, Y+8	; 0x08
     da8:	00 97       	sbiw	r24, 0x00	; 0
     daa:	61 f0       	breq	.+24     	; 0xdc4 <DIO_VoidSetPinValue+0x74>
     dac:	d4 c0       	rjmp	.+424    	; 0xf56 <DIO_VoidSetPinValue+0x206>
     dae:	2f 81       	ldd	r18, Y+7	; 0x07
     db0:	38 85       	ldd	r19, Y+8	; 0x08
     db2:	22 30       	cpi	r18, 0x02	; 2
     db4:	31 05       	cpc	r19, r1
     db6:	71 f1       	breq	.+92     	; 0xe14 <DIO_VoidSetPinValue+0xc4>
     db8:	8f 81       	ldd	r24, Y+7	; 0x07
     dba:	98 85       	ldd	r25, Y+8	; 0x08
     dbc:	83 30       	cpi	r24, 0x03	; 3
     dbe:	91 05       	cpc	r25, r1
     dc0:	e9 f1       	breq	.+122    	; 0xe3c <DIO_VoidSetPinValue+0xec>
     dc2:	c9 c0       	rjmp	.+402    	; 0xf56 <DIO_VoidSetPinValue+0x206>
                case DIO_PORTA: SET_BIT(PORTA, Copy_u8PIN); break;
     dc4:	ab e3       	ldi	r26, 0x3B	; 59
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	eb e3       	ldi	r30, 0x3B	; 59
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 2e       	mov	r0, r18
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <DIO_VoidSetPinValue+0x92>
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	0a 94       	dec	r0
     de4:	e2 f7       	brpl	.-8      	; 0xdde <DIO_VoidSetPinValue+0x8e>
     de6:	84 2b       	or	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	b5 c0       	rjmp	.+362    	; 0xf56 <DIO_VoidSetPinValue+0x206>
                case DIO_PORTB: SET_BIT(PORTB, Copy_u8PIN); break;
     dec:	ab e3       	ldi	r26, 0x3B	; 59
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	eb e3       	ldi	r30, 0x3B	; 59
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_VoidSetPinValue+0xba>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_VoidSetPinValue+0xb6>
     e0e:	84 2b       	or	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	a1 c0       	rjmp	.+322    	; 0xf56 <DIO_VoidSetPinValue+0x206>
                case DIO_PORTC: SET_BIT(PORTC, Copy_u8PIN); break;
     e14:	ab e3       	ldi	r26, 0x3B	; 59
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	eb e3       	ldi	r30, 0x3B	; 59
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_VoidSetPinValue+0xe2>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_VoidSetPinValue+0xde>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	8d c0       	rjmp	.+282    	; 0xf56 <DIO_VoidSetPinValue+0x206>
                case DIO_PORTD: SET_BIT(PORTD, Copy_u8PIN); break;
     e3c:	ab e3       	ldi	r26, 0x3B	; 59
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	eb e3       	ldi	r30, 0x3B	; 59
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_VoidSetPinValue+0x10a>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_VoidSetPinValue+0x106>
     e5e:	84 2b       	or	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	79 c0       	rjmp	.+242    	; 0xf56 <DIO_VoidSetPinValue+0x206>
            }
        } else if (Copy_u8Value == DIO_PIN_LOW) {
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	88 23       	and	r24, r24
     e68:	09 f0       	breq	.+2      	; 0xe6c <DIO_VoidSetPinValue+0x11c>
     e6a:	75 c0       	rjmp	.+234    	; 0xf56 <DIO_VoidSetPinValue+0x206>
            switch (Copy_u8PORT) {
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	3e 83       	std	Y+6, r19	; 0x06
     e74:	2d 83       	std	Y+5, r18	; 0x05
     e76:	8d 81       	ldd	r24, Y+5	; 0x05
     e78:	9e 81       	ldd	r25, Y+6	; 0x06
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	91 05       	cpc	r25, r1
     e7e:	59 f1       	breq	.+86     	; 0xed6 <DIO_VoidSetPinValue+0x186>
     e80:	2d 81       	ldd	r18, Y+5	; 0x05
     e82:	3e 81       	ldd	r19, Y+6	; 0x06
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	2c f4       	brge	.+10     	; 0xe94 <DIO_VoidSetPinValue+0x144>
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	9e 81       	ldd	r25, Y+6	; 0x06
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	69 f0       	breq	.+26     	; 0xeac <DIO_VoidSetPinValue+0x15c>
     e92:	61 c0       	rjmp	.+194    	; 0xf56 <DIO_VoidSetPinValue+0x206>
     e94:	2d 81       	ldd	r18, Y+5	; 0x05
     e96:	3e 81       	ldd	r19, Y+6	; 0x06
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	89 f1       	breq	.+98     	; 0xf00 <DIO_VoidSetPinValue+0x1b0>
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	83 30       	cpi	r24, 0x03	; 3
     ea4:	91 05       	cpc	r25, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <DIO_VoidSetPinValue+0x15a>
     ea8:	40 c0       	rjmp	.+128    	; 0xf2a <DIO_VoidSetPinValue+0x1da>
     eaa:	55 c0       	rjmp	.+170    	; 0xf56 <DIO_VoidSetPinValue+0x206>
                case DIO_PORTA: CLR_BIT(PORTA, Copy_u8PIN); break;
     eac:	ab e3       	ldi	r26, 0x3B	; 59
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	eb e3       	ldi	r30, 0x3B	; 59
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_VoidSetPinValue+0x17a>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_VoidSetPinValue+0x176>
     ece:	80 95       	com	r24
     ed0:	84 23       	and	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	40 c0       	rjmp	.+128    	; 0xf56 <DIO_VoidSetPinValue+0x206>
                case DIO_PORTB: CLR_BIT(PORTB, Copy_u8PIN); break;
     ed6:	ab e3       	ldi	r26, 0x3B	; 59
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	eb e3       	ldi	r30, 0x3B	; 59
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_VoidSetPinValue+0x1a4>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_VoidSetPinValue+0x1a0>
     ef8:	80 95       	com	r24
     efa:	84 23       	and	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	2b c0       	rjmp	.+86     	; 0xf56 <DIO_VoidSetPinValue+0x206>
                case DIO_PORTC: CLR_BIT(PORTC, Copy_u8PIN); break;
     f00:	ab e3       	ldi	r26, 0x3B	; 59
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	eb e3       	ldi	r30, 0x3B	; 59
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_VoidSetPinValue+0x1ce>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_VoidSetPinValue+0x1ca>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	16 c0       	rjmp	.+44     	; 0xf56 <DIO_VoidSetPinValue+0x206>
                case DIO_PORTD: CLR_BIT(PORTD, Copy_u8PIN); break;
     f2a:	ab e3       	ldi	r26, 0x3B	; 59
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	eb e3       	ldi	r30, 0x3B	; 59
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_VoidSetPinValue+0x1f8>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_VoidSetPinValue+0x1f4>
     f4c:	80 95       	com	r24
     f4e:	84 23       	and	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	01 c0       	rjmp	.+2      	; 0xf56 <DIO_VoidSetPinValue+0x206>
            }
        }
    } else {
        LOC_enumState = DIO_NOK;
     f54:	19 82       	std	Y+1, r1	; 0x01
    }
    return LOC_enumState;
     f56:	89 81       	ldd	r24, Y+1	; 0x01
}
     f58:	28 96       	adiw	r28, 0x08	; 8
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <DIO_GetPinValue>:

DIO_ErrorStatus DIO_GetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	27 97       	sbiw	r28, 0x07	; 7
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	8a 83       	std	Y+2, r24	; 0x02
     f80:	6b 83       	std	Y+3, r22	; 0x03
     f82:	5d 83       	std	Y+5, r21	; 0x05
     f84:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	84 30       	cpi	r24, 0x04	; 4
     f8e:	08 f0       	brcs	.+2      	; 0xf92 <DIO_GetPinValue+0x28>
     f90:	a6 c0       	rjmp	.+332    	; 0x10de <DIO_GetPinValue+0x174>
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 30       	cpi	r24, 0x08	; 8
     f96:	08 f0       	brcs	.+2      	; 0xf9a <DIO_GetPinValue+0x30>
     f98:	a2 c0       	rjmp	.+324    	; 0x10de <DIO_GetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	3f 83       	std	Y+7, r19	; 0x07
     fa2:	2e 83       	std	Y+6, r18	; 0x06
     fa4:	4e 81       	ldd	r20, Y+6	; 0x06
     fa6:	5f 81       	ldd	r21, Y+7	; 0x07
     fa8:	41 30       	cpi	r20, 0x01	; 1
     faa:	51 05       	cpc	r21, r1
     fac:	c1 f1       	breq	.+112    	; 0x101e <DIO_GetPinValue+0xb4>
     fae:	8e 81       	ldd	r24, Y+6	; 0x06
     fb0:	9f 81       	ldd	r25, Y+7	; 0x07
     fb2:	82 30       	cpi	r24, 0x02	; 2
     fb4:	91 05       	cpc	r25, r1
     fb6:	34 f4       	brge	.+12     	; 0xfc4 <DIO_GetPinValue+0x5a>
     fb8:	2e 81       	ldd	r18, Y+6	; 0x06
     fba:	3f 81       	ldd	r19, Y+7	; 0x07
     fbc:	21 15       	cp	r18, r1
     fbe:	31 05       	cpc	r19, r1
     fc0:	71 f0       	breq	.+28     	; 0xfde <DIO_GetPinValue+0x74>
     fc2:	8e c0       	rjmp	.+284    	; 0x10e0 <DIO_GetPinValue+0x176>
     fc4:	4e 81       	ldd	r20, Y+6	; 0x06
     fc6:	5f 81       	ldd	r21, Y+7	; 0x07
     fc8:	42 30       	cpi	r20, 0x02	; 2
     fca:	51 05       	cpc	r21, r1
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <DIO_GetPinValue+0x66>
     fce:	47 c0       	rjmp	.+142    	; 0x105e <DIO_GetPinValue+0xf4>
     fd0:	8e 81       	ldd	r24, Y+6	; 0x06
     fd2:	9f 81       	ldd	r25, Y+7	; 0x07
     fd4:	83 30       	cpi	r24, 0x03	; 3
     fd6:	91 05       	cpc	r25, r1
     fd8:	09 f4       	brne	.+2      	; 0xfdc <DIO_GetPinValue+0x72>
     fda:	61 c0       	rjmp	.+194    	; 0x109e <DIO_GetPinValue+0x134>
     fdc:	81 c0       	rjmp	.+258    	; 0x10e0 <DIO_GetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA,Copy_u8PIN); break;
     fde:	e9 e3       	ldi	r30, 0x39	; 57
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	50 e0       	ldi	r21, 0x00	; 0
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_GetPinValue+0x8e>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	2a 95       	dec	r18
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_GetPinValue+0x8a>
     ffc:	9a 01       	movw	r18, r20
     ffe:	28 23       	and	r18, r24
    1000:	39 23       	and	r19, r25
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	a9 01       	movw	r20, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_GetPinValue+0xa6>
    100c:	55 95       	asr	r21
    100e:	47 95       	ror	r20
    1010:	8a 95       	dec	r24
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_GetPinValue+0xa2>
    1014:	ca 01       	movw	r24, r20
    1016:	ec 81       	ldd	r30, Y+4	; 0x04
    1018:	fd 81       	ldd	r31, Y+5	; 0x05
    101a:	80 83       	st	Z, r24
    101c:	61 c0       	rjmp	.+194    	; 0x10e0 <DIO_GetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB,Copy_u8PIN); break;
    101e:	e9 e3       	ldi	r30, 0x39	; 57
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	50 e0       	ldi	r21, 0x00	; 0
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_GetPinValue+0xce>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	2a 95       	dec	r18
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_GetPinValue+0xca>
    103c:	9a 01       	movw	r18, r20
    103e:	28 23       	and	r18, r24
    1040:	39 23       	and	r19, r25
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	88 2f       	mov	r24, r24
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	a9 01       	movw	r20, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_GetPinValue+0xe6>
    104c:	55 95       	asr	r21
    104e:	47 95       	ror	r20
    1050:	8a 95       	dec	r24
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_GetPinValue+0xe2>
    1054:	ca 01       	movw	r24, r20
    1056:	ec 81       	ldd	r30, Y+4	; 0x04
    1058:	fd 81       	ldd	r31, Y+5	; 0x05
    105a:	80 83       	st	Z, r24
    105c:	41 c0       	rjmp	.+130    	; 0x10e0 <DIO_GetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC,Copy_u8PIN); break;
    105e:	e9 e3       	ldi	r30, 0x39	; 57
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_GetPinValue+0x10e>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	2a 95       	dec	r18
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_GetPinValue+0x10a>
    107c:	9a 01       	movw	r18, r20
    107e:	28 23       	and	r18, r24
    1080:	39 23       	and	r19, r25
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	a9 01       	movw	r20, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_GetPinValue+0x126>
    108c:	55 95       	asr	r21
    108e:	47 95       	ror	r20
    1090:	8a 95       	dec	r24
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_GetPinValue+0x122>
    1094:	ca 01       	movw	r24, r20
    1096:	ec 81       	ldd	r30, Y+4	; 0x04
    1098:	fd 81       	ldd	r31, Y+5	; 0x05
    109a:	80 83       	st	Z, r24
    109c:	21 c0       	rjmp	.+66     	; 0x10e0 <DIO_GetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND,Copy_u8PIN); break;
    109e:	e9 e3       	ldi	r30, 0x39	; 57
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_GetPinValue+0x14e>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	2a 95       	dec	r18
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_GetPinValue+0x14a>
    10bc:	9a 01       	movw	r18, r20
    10be:	28 23       	and	r18, r24
    10c0:	39 23       	and	r19, r25
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	a9 01       	movw	r20, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_GetPinValue+0x166>
    10cc:	55 95       	asr	r21
    10ce:	47 95       	ror	r20
    10d0:	8a 95       	dec	r24
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_GetPinValue+0x162>
    10d4:	ca 01       	movw	r24, r20
    10d6:	ec 81       	ldd	r30, Y+4	; 0x04
    10d8:	fd 81       	ldd	r31, Y+5	; 0x05
    10da:	80 83       	st	Z, r24
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <DIO_GetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    10de:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e2:	27 96       	adiw	r28, 0x07	; 7
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <DIO_TogglePinValue>:

DIO_ErrorStatus DIO_TogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <DIO_TogglePinValue+0x6>
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <DIO_TogglePinValue+0x8>
    10fc:	0f 92       	push	r0
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	8a 83       	std	Y+2, r24	; 0x02
    1104:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	88 30       	cpi	r24, 0x08	; 8
    110e:	08 f0       	brcs	.+2      	; 0x1112 <DIO_TogglePinValue+0x1e>
    1110:	6f c0       	rjmp	.+222    	; 0x11f0 <DIO_TogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	3d 83       	std	Y+5, r19	; 0x05
    111a:	2c 83       	std	Y+4, r18	; 0x04
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	91 05       	cpc	r25, r1
    1124:	49 f1       	breq	.+82     	; 0x1178 <DIO_TogglePinValue+0x84>
    1126:	2c 81       	ldd	r18, Y+4	; 0x04
    1128:	3d 81       	ldd	r19, Y+5	; 0x05
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	2c f4       	brge	.+10     	; 0x113a <DIO_TogglePinValue+0x46>
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	9d 81       	ldd	r25, Y+5	; 0x05
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	61 f0       	breq	.+24     	; 0x1150 <DIO_TogglePinValue+0x5c>
    1138:	5c c0       	rjmp	.+184    	; 0x11f2 <DIO_TogglePinValue+0xfe>
    113a:	2c 81       	ldd	r18, Y+4	; 0x04
    113c:	3d 81       	ldd	r19, Y+5	; 0x05
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	71 f1       	breq	.+92     	; 0x11a0 <DIO_TogglePinValue+0xac>
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	9d 81       	ldd	r25, Y+5	; 0x05
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	91 05       	cpc	r25, r1
    114c:	e9 f1       	breq	.+122    	; 0x11c8 <DIO_TogglePinValue+0xd4>
    114e:	51 c0       	rjmp	.+162    	; 0x11f2 <DIO_TogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA,Copy_u8PIN);
    1150:	ab e3       	ldi	r26, 0x3B	; 59
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	eb e3       	ldi	r30, 0x3B	; 59
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_TogglePinValue+0x7a>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_TogglePinValue+0x76>
    1172:	84 27       	eor	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	3d c0       	rjmp	.+122    	; 0x11f2 <DIO_TogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB,Copy_u8PIN);
    1178:	ab e3       	ldi	r26, 0x3B	; 59
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	eb e3       	ldi	r30, 0x3B	; 59
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_TogglePinValue+0xa2>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_TogglePinValue+0x9e>
    119a:	84 27       	eor	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	29 c0       	rjmp	.+82     	; 0x11f2 <DIO_TogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC,Copy_u8PIN);
    11a0:	ab e3       	ldi	r26, 0x3B	; 59
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	eb e3       	ldi	r30, 0x3B	; 59
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_TogglePinValue+0xca>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_TogglePinValue+0xc6>
    11c2:	84 27       	eor	r24, r20
    11c4:	8c 93       	st	X, r24
    11c6:	15 c0       	rjmp	.+42     	; 0x11f2 <DIO_TogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD,Copy_u8PIN);
    11c8:	ab e3       	ldi	r26, 0x3B	; 59
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	eb e3       	ldi	r30, 0x3B	; 59
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_TogglePinValue+0xf2>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <DIO_TogglePinValue+0xee>
    11ea:	84 27       	eor	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <DIO_TogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    11f0:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <DIO_VoidSetPortDirection>:

DIO_ErrorStatus DIO_VoidSetPortDirection(u8 Copy_u8PORT, u8 Copy_u8Direction){
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <DIO_VoidSetPortDirection+0x6>
    120a:	00 d0       	rcall	.+0      	; 0x120c <DIO_VoidSetPortDirection+0x8>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	8a 83       	std	Y+2, r24	; 0x02
    1214:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PORT<=DIO_PORTD){
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	a8 f5       	brcc	.+106    	; 0x128a <DIO_VoidSetPortDirection+0x86>
		switch(Copy_u8PORT){
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	3d 83       	std	Y+5, r19	; 0x05
    1228:	2c 83       	std	Y+4, r18	; 0x04
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	9d 81       	ldd	r25, Y+5	; 0x05
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	91 05       	cpc	r25, r1
    1232:	d1 f0       	breq	.+52     	; 0x1268 <DIO_VoidSetPortDirection+0x64>
    1234:	2c 81       	ldd	r18, Y+4	; 0x04
    1236:	3d 81       	ldd	r19, Y+5	; 0x05
    1238:	22 30       	cpi	r18, 0x02	; 2
    123a:	31 05       	cpc	r19, r1
    123c:	2c f4       	brge	.+10     	; 0x1248 <DIO_VoidSetPortDirection+0x44>
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	61 f0       	breq	.+24     	; 0x125e <DIO_VoidSetPortDirection+0x5a>
    1246:	1f c0       	rjmp	.+62     	; 0x1286 <DIO_VoidSetPortDirection+0x82>
    1248:	2c 81       	ldd	r18, Y+4	; 0x04
    124a:	3d 81       	ldd	r19, Y+5	; 0x05
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	81 f0       	breq	.+32     	; 0x1272 <DIO_VoidSetPortDirection+0x6e>
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	9d 81       	ldd	r25, Y+5	; 0x05
    1256:	83 30       	cpi	r24, 0x03	; 3
    1258:	91 05       	cpc	r25, r1
    125a:	81 f0       	breq	.+32     	; 0x127c <DIO_VoidSetPortDirection+0x78>
    125c:	14 c0       	rjmp	.+40     	; 0x1286 <DIO_VoidSetPortDirection+0x82>
		      case DIO_PORTA :  DDRA = Copy_u8Direction; break;
    125e:	ea e3       	ldi	r30, 0x3A	; 58
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	80 83       	st	Z, r24
    1266:	12 c0       	rjmp	.+36     	; 0x128c <DIO_VoidSetPortDirection+0x88>
		      case DIO_PORTB :  DDRB = Copy_u8Direction; break;
    1268:	ea e3       	ldi	r30, 0x3A	; 58
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	80 83       	st	Z, r24
    1270:	0d c0       	rjmp	.+26     	; 0x128c <DIO_VoidSetPortDirection+0x88>
		      case DIO_PORTC :  DDRC = Copy_u8Direction; break;
    1272:	ea e3       	ldi	r30, 0x3A	; 58
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	80 83       	st	Z, r24
    127a:	08 c0       	rjmp	.+16     	; 0x128c <DIO_VoidSetPortDirection+0x88>
		      case DIO_PORTD :	DDRD = Copy_u8Direction; break;
    127c:	ea e3       	ldi	r30, 0x3A	; 58
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	80 83       	st	Z, r24
    1284:	03 c0       	rjmp	.+6      	; 0x128c <DIO_VoidSetPortDirection+0x88>
		      default: LOC_enumState =  DIO_NOK;    break;
    1286:	19 82       	std	Y+1, r1	; 0x01
    1288:	01 c0       	rjmp	.+2      	; 0x128c <DIO_VoidSetPortDirection+0x88>
		      		}
		      	}
	else
	{
		LOC_enumState = DIO_NOK;
    128a:	19 82       	std	Y+1, r1	; 0x01
     }
   return LOC_enumState ;
    128c:	89 81       	ldd	r24, Y+1	; 0x01

		}
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <DIO_VoidSetPortValue>:
DIO_ErrorStatus DIO_VoidSetPortValue(u8 Copy_u8PORT, u8 Copy_u8Value){
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <DIO_VoidSetPortValue+0x6>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <DIO_VoidSetPortValue+0x8>
    12a6:	0f 92       	push	r0
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	8a 83       	std	Y+2, r24	; 0x02
    12ae:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PORT<=DIO_PORTD) && ((Copy_u8Value <=255)||(Copy_u8Value==DIO_PIN_LOW)||(Copy_u8Value==DIO_PIN_HIGH))){
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	a8 f5       	brcc	.+106    	; 0x1324 <DIO_VoidSetPortValue+0x86>
			switch(Copy_u8PORT){
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3d 83       	std	Y+5, r19	; 0x05
    12c2:	2c 83       	std	Y+4, r18	; 0x04
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	9d 81       	ldd	r25, Y+5	; 0x05
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	91 05       	cpc	r25, r1
    12cc:	d1 f0       	breq	.+52     	; 0x1302 <DIO_VoidSetPortValue+0x64>
    12ce:	2c 81       	ldd	r18, Y+4	; 0x04
    12d0:	3d 81       	ldd	r19, Y+5	; 0x05
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <DIO_VoidSetPortValue+0x44>
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	9d 81       	ldd	r25, Y+5	; 0x05
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	61 f0       	breq	.+24     	; 0x12f8 <DIO_VoidSetPortValue+0x5a>
    12e0:	1f c0       	rjmp	.+62     	; 0x1320 <DIO_VoidSetPortValue+0x82>
    12e2:	2c 81       	ldd	r18, Y+4	; 0x04
    12e4:	3d 81       	ldd	r19, Y+5	; 0x05
    12e6:	22 30       	cpi	r18, 0x02	; 2
    12e8:	31 05       	cpc	r19, r1
    12ea:	81 f0       	breq	.+32     	; 0x130c <DIO_VoidSetPortValue+0x6e>
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	91 05       	cpc	r25, r1
    12f4:	81 f0       	breq	.+32     	; 0x1316 <DIO_VoidSetPortValue+0x78>
    12f6:	14 c0       	rjmp	.+40     	; 0x1320 <DIO_VoidSetPortValue+0x82>
			      case DIO_PORTA :  PORTA = Copy_u8Value; break;
    12f8:	eb e3       	ldi	r30, 0x3B	; 59
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	80 83       	st	Z, r24
    1300:	12 c0       	rjmp	.+36     	; 0x1326 <DIO_VoidSetPortValue+0x88>
			      case DIO_PORTB :  PORTB = Copy_u8Value; break;
    1302:	eb e3       	ldi	r30, 0x3B	; 59
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	80 83       	st	Z, r24
    130a:	0d c0       	rjmp	.+26     	; 0x1326 <DIO_VoidSetPortValue+0x88>
			      case DIO_PORTC :  PORTC = Copy_u8Value; break;
    130c:	eb e3       	ldi	r30, 0x3B	; 59
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	80 83       	st	Z, r24
    1314:	08 c0       	rjmp	.+16     	; 0x1326 <DIO_VoidSetPortValue+0x88>
			      case DIO_PORTD :	PORTD = Copy_u8Value; break;
    1316:	eb e3       	ldi	r30, 0x3B	; 59
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	80 83       	st	Z, r24
    131e:	03 c0       	rjmp	.+6      	; 0x1326 <DIO_VoidSetPortValue+0x88>
			      default: LOC_enumState =  DIO_NOK;    break;
    1320:	19 82       	std	Y+1, r1	; 0x01
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <DIO_VoidSetPortValue+0x88>
			      		}
			      	}
		else
		{
			LOC_enumState = DIO_NOK;
    1324:	19 82       	std	Y+1, r1	; 0x01
	     }
	   return LOC_enumState ;
    1326:	89 81       	ldd	r24, Y+1	; 0x01
}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <DIO_TogglePortValue>:

DIO_ErrorStatus DIO_TogglePortValue      (u8 Copy_u8PORT                       )
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	00 d0       	rcall	.+0      	; 0x133e <DIO_TogglePortValue+0x6>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <DIO_TogglePortValue+0x8>
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PORT <= DIO_PORTD)
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	84 30       	cpi	r24, 0x04	; 4
    134e:	08 f0       	brcs	.+2      	; 0x1352 <DIO_TogglePortValue+0x1a>
    1350:	3f c0       	rjmp	.+126    	; 0x13d0 <DIO_TogglePortValue+0x98>
	{
		switch (Copy_u8PORT)
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	3c 83       	std	Y+4, r19	; 0x04
    135a:	2b 83       	std	Y+3, r18	; 0x03
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	91 05       	cpc	r25, r1
    1364:	e9 f0       	breq	.+58     	; 0x13a0 <DIO_TogglePortValue+0x68>
    1366:	2b 81       	ldd	r18, Y+3	; 0x03
    1368:	3c 81       	ldd	r19, Y+4	; 0x04
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	2c f4       	brge	.+10     	; 0x137a <DIO_TogglePortValue+0x42>
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	61 f0       	breq	.+24     	; 0x1390 <DIO_TogglePortValue+0x58>
    1378:	2c c0       	rjmp	.+88     	; 0x13d2 <DIO_TogglePortValue+0x9a>
    137a:	2b 81       	ldd	r18, Y+3	; 0x03
    137c:	3c 81       	ldd	r19, Y+4	; 0x04
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	b1 f0       	breq	.+44     	; 0x13b0 <DIO_TogglePortValue+0x78>
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	83 30       	cpi	r24, 0x03	; 3
    138a:	91 05       	cpc	r25, r1
    138c:	c9 f0       	breq	.+50     	; 0x13c0 <DIO_TogglePortValue+0x88>
    138e:	21 c0       	rjmp	.+66     	; 0x13d2 <DIO_TogglePortValue+0x9a>
		{
		case DIO_PORTA : PORTA = ~PORTA ;
    1390:	ab e3       	ldi	r26, 0x3B	; 59
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	eb e3       	ldi	r30, 0x3B	; 59
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 95       	com	r24
    139c:	8c 93       	st	X, r24
    139e:	19 c0       	rjmp	.+50     	; 0x13d2 <DIO_TogglePortValue+0x9a>
		break ;
		case DIO_PORTB : PORTB = ~PORTB ;
    13a0:	ab e3       	ldi	r26, 0x3B	; 59
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	eb e3       	ldi	r30, 0x3B	; 59
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	80 95       	com	r24
    13ac:	8c 93       	st	X, r24
    13ae:	11 c0       	rjmp	.+34     	; 0x13d2 <DIO_TogglePortValue+0x9a>
		break ;
		case DIO_PORTC : PORTC = ~PORTC ;
    13b0:	ab e3       	ldi	r26, 0x3B	; 59
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	eb e3       	ldi	r30, 0x3B	; 59
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	80 95       	com	r24
    13bc:	8c 93       	st	X, r24
    13be:	09 c0       	rjmp	.+18     	; 0x13d2 <DIO_TogglePortValue+0x9a>
		break ;
		case DIO_PORTD : PORTD = ~PORTD ;
    13c0:	ab e3       	ldi	r26, 0x3B	; 59
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	eb e3       	ldi	r30, 0x3B	; 59
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	80 95       	com	r24
    13cc:	8c 93       	st	X, r24
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <DIO_TogglePortValue+0x9a>
		break ;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    13d0:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <DIO_GetPortValue>:

DIO_ErrorStatus   DIO_GetPortValue         ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <DIO_GetPortValue+0x6>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <DIO_GetPortValue+0x8>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <DIO_GetPortValue+0xa>
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	8a 83       	std	Y+2, r24	; 0x02
    13f2:	7c 83       	std	Y+4, r23	; 0x04
    13f4:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	84 30       	cpi	r24, 0x04	; 4
    13fe:	e8 f5       	brcc	.+122    	; 0x147a <DIO_GetPortValue+0x98>
	{
		switch (Copy_u8PORT)
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3e 83       	std	Y+6, r19	; 0x06
    1408:	2d 83       	std	Y+5, r18	; 0x05
    140a:	8d 81       	ldd	r24, Y+5	; 0x05
    140c:	9e 81       	ldd	r25, Y+6	; 0x06
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	91 05       	cpc	r25, r1
    1412:	e1 f0       	breq	.+56     	; 0x144c <DIO_GetPortValue+0x6a>
    1414:	2d 81       	ldd	r18, Y+5	; 0x05
    1416:	3e 81       	ldd	r19, Y+6	; 0x06
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	2c f4       	brge	.+10     	; 0x1428 <DIO_GetPortValue+0x46>
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	61 f0       	breq	.+24     	; 0x143e <DIO_GetPortValue+0x5c>
    1426:	27 c0       	rjmp	.+78     	; 0x1476 <DIO_GetPortValue+0x94>
    1428:	2d 81       	ldd	r18, Y+5	; 0x05
    142a:	3e 81       	ldd	r19, Y+6	; 0x06
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	a1 f0       	breq	.+40     	; 0x145a <DIO_GetPortValue+0x78>
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	9e 81       	ldd	r25, Y+6	; 0x06
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	b1 f0       	breq	.+44     	; 0x1468 <DIO_GetPortValue+0x86>
    143c:	1c c0       	rjmp	.+56     	; 0x1476 <DIO_GetPortValue+0x94>
		{
		case DIO_PORTA :
			*Copy_PtrData = PINA  ;
    143e:	e9 e3       	ldi	r30, 0x39	; 57
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	eb 81       	ldd	r30, Y+3	; 0x03
    1446:	fc 81       	ldd	r31, Y+4	; 0x04
    1448:	80 83       	st	Z, r24
    144a:	18 c0       	rjmp	.+48     	; 0x147c <DIO_GetPortValue+0x9a>
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB  ;
    144c:	e9 e3       	ldi	r30, 0x39	; 57
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	eb 81       	ldd	r30, Y+3	; 0x03
    1454:	fc 81       	ldd	r31, Y+4	; 0x04
    1456:	80 83       	st	Z, r24
    1458:	11 c0       	rjmp	.+34     	; 0x147c <DIO_GetPortValue+0x9a>
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC  ;
    145a:	e9 e3       	ldi	r30, 0x39	; 57
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	eb 81       	ldd	r30, Y+3	; 0x03
    1462:	fc 81       	ldd	r31, Y+4	; 0x04
    1464:	80 83       	st	Z, r24
    1466:	0a c0       	rjmp	.+20     	; 0x147c <DIO_GetPortValue+0x9a>
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND  ;
    1468:	e9 e3       	ldi	r30, 0x39	; 57
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	eb 81       	ldd	r30, Y+3	; 0x03
    1470:	fc 81       	ldd	r31, Y+4	; 0x04
    1472:	80 83       	st	Z, r24
    1474:	03 c0       	rjmp	.+6      	; 0x147c <DIO_GetPortValue+0x9a>
			break ;
		default : LOC_enumState = DIO_NOK ;
    1476:	19 82       	std	Y+1, r1	; 0x01
    1478:	01 c0       	rjmp	.+2      	; 0x147c <DIO_GetPortValue+0x9a>
		break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    147a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    147c:	89 81       	ldd	r24, Y+1	; 0x01
}
    147e:	26 96       	adiw	r28, 0x06	; 6
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <SPI_voidInit>:

#ifndef SPI_PROGRAM_C_
#define SPI_PROGRAM_C_


void SPI_voidInit(void){
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
     #if  (SPI_MODE==SPI_MASTER_MODE)
	    /*Data order=MSB First*/
       	CLR_BIT(SPCR,SPCR_DORD);
    1498:	ad e2       	ldi	r26, 0x2D	; 45
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	ed e2       	ldi	r30, 0x2D	; 45
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	8f 7d       	andi	r24, 0xDF	; 223
    14a4:	8c 93       	st	X, r24
	   /*select master mode*/
	    SET_BIT(SPCR,SPCR_MSTR);
    14a6:	ad e2       	ldi	r26, 0x2D	; 45
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	ed e2       	ldi	r30, 0x2D	; 45
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	80 61       	ori	r24, 0x10	; 16
    14b2:	8c 93       	st	X, r24
	  /*Choose CPOL and CPHA*/
	    SET_BIT(SPCR,SPCR_CPOL);
    14b4:	ad e2       	ldi	r26, 0x2D	; 45
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	ed e2       	ldi	r30, 0x2D	; 45
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	88 60       	ori	r24, 0x08	; 8
    14c0:	8c 93       	st	X, r24
	    SET_BIT(SPCR,SPCR_CPHA);
    14c2:	ad e2       	ldi	r26, 0x2D	; 45
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	ed e2       	ldi	r30, 0x2D	; 45
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	84 60       	ori	r24, 0x04	; 4
    14ce:	8c 93       	st	X, r24
	  /*Select CLK->FOSC/64*/
	    SET_BIT(SPCR,SPCR_SPR1);
    14d0:	ad e2       	ldi	r26, 0x2D	; 45
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ed e2       	ldi	r30, 0x2D	; 45
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	82 60       	ori	r24, 0x02	; 2
    14dc:	8c 93       	st	X, r24
	    CLR_BIT(SPCR,SPCR_SPR0);
    14de:	ad e2       	ldi	r26, 0x2D	; 45
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	ed e2       	ldi	r30, 0x2D	; 45
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	8e 7f       	andi	r24, 0xFE	; 254
    14ea:	8c 93       	st	X, r24
	    SET_BIT(SPCR,SPCR_SPR1);
	    CLR_BIT(SPCR,SPCR_SPR0);

    #endif
	/*Enable SPI*/
	SET_BIT(SPCR,SPCR_SPE);
    14ec:	ad e2       	ldi	r26, 0x2D	; 45
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ed e2       	ldi	r30, 0x2D	; 45
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	80 64       	ori	r24, 0x40	; 64
    14f8:	8c 93       	st	X, r24
}
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <SPI_u8TransRecieve>:
u8 SPI_u8TransRecieve(u8 copy_u8TransmittedByte,u8 * copy_pu8RecievedByte){
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <SPI_u8TransRecieve+0x6>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <SPI_u8TransRecieve+0x8>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	8a 83       	std	Y+2, r24	; 0x02
    150e:	7c 83       	std	Y+4, r23	; 0x04
    1510:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Error_State=NOK;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pu8RecievedByte != NULL){
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	b1 f0       	breq	.+44     	; 0x154a <SPI_u8TransRecieve+0x4a>
		/*Send Byte*/
		SPDR=copy_u8TransmittedByte;
    151e:	ef e2       	ldi	r30, 0x2F	; 47
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	80 83       	st	Z, r24
		/*Check if the Transmission is completed*/
		while((GET_BIT(SPSR,SPSR_SPIF))==0);
    1526:	ee e2       	ldi	r30, 0x2E	; 46
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	88 1f       	adc	r24, r24
    152e:	88 27       	eor	r24, r24
    1530:	88 1f       	adc	r24, r24
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	90 70       	andi	r25, 0x00	; 0
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	a9 f3       	breq	.-22     	; 0x1526 <SPI_u8TransRecieve+0x26>
		/*Read Byte*/
		*copy_pu8RecievedByte =SPDR;
    153c:	ef e2       	ldi	r30, 0x2F	; 47
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	eb 81       	ldd	r30, Y+3	; 0x03
    1544:	fc 81       	ldd	r31, Y+4	; 0x04
    1546:	80 83       	st	Z, r24

		Local_Error_State=OK;
    1548:	19 82       	std	Y+1, r1	; 0x01


	}
	return Local_Error_State;
    154a:	89 81       	ldd	r24, Y+1	; 0x01
}
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <SPI_VoidSendByte>:
void SPI_VoidSendByte(u8 copy_u8DataByte){
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	0f 92       	push	r0
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	89 83       	std	Y+1, r24	; 0x01
	SPDR=copy_u8DataByte;
    1566:	ef e2       	ldi	r30, 0x2F	; 47
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	80 83       	st	Z, r24
}
    156e:	0f 90       	pop	r0
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <SPI_VoidRecByte>:

u8 SPI_VoidRecByte(u8 *copy_pu8RecByte){
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	00 d0       	rcall	.+0      	; 0x157c <SPI_VoidRecByte+0x6>
    157c:	0f 92       	push	r0
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	9b 83       	std	Y+3, r25	; 0x03
    1584:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Error_State=NOK;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	89 83       	std	Y+1, r24	; 0x01
		if(copy_pu8RecByte != NULL){
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	9b 81       	ldd	r25, Y+3	; 0x03
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	91 f0       	breq	.+36     	; 0x15b6 <SPI_VoidRecByte+0x40>
			/*Check if the Transmission is completed*/
			while((GET_BIT(SPSR,SPSR_SPIF))==0);
    1592:	ee e2       	ldi	r30, 0x2E	; 46
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	88 1f       	adc	r24, r24
    159a:	88 27       	eor	r24, r24
    159c:	88 1f       	adc	r24, r24
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	90 70       	andi	r25, 0x00	; 0
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	a9 f3       	breq	.-22     	; 0x1592 <SPI_VoidRecByte+0x1c>
			/*Read Byte*/
			*copy_pu8RecByte =SPDR;
    15a8:	ef e2       	ldi	r30, 0x2F	; 47
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	ea 81       	ldd	r30, Y+2	; 0x02
    15b0:	fb 81       	ldd	r31, Y+3	; 0x03
    15b2:	80 83       	st	Z, r24

			Local_Error_State=OK;
    15b4:	19 82       	std	Y+1, r1	; 0x01


		}
		return Local_Error_State;
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <masterInit>:
 */
#include <avr/io.h>
#define F_CPU 4000000UL
#include <util/delay.h>

void masterInit(void){
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    /* Set MOSI, SCK, and SS as Output */
    DDRB = (1 << 7) | (1 << 5) | (1 << 4);
    15cc:	e7 e3       	ldi	r30, 0x37	; 55
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 eb       	ldi	r24, 0xB0	; 176
    15d2:	80 83       	st	Z, r24
    /* Enable SPI Master, set clock rate fck/128, data is sampled at falling edge */
    SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0) | (1 << CPHA);
    15d4:	ed e2       	ldi	r30, 0x2D	; 45
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	87 e5       	ldi	r24, 0x57	; 87
    15da:	80 83       	st	Z, r24
    // SPSR |= (1 << 0);
}
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <masterTransmit>:

void masterTransmit(char spiData){
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	0f 92       	push	r0
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	89 83       	std	Y+1, r24	; 0x01
    /* Start the transmission */
    SPDR = spiData;
    15ee:	ef e2       	ldi	r30, 0x2F	; 47
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	80 83       	st	Z, r24
    /* Wait for completion */
    while (!(SPSR & (1 << SPIF)));
    15f6:	ee e2       	ldi	r30, 0x2E	; 46
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	88 23       	and	r24, r24
    15fe:	dc f7       	brge	.-10     	; 0x15f6 <masterTransmit+0x14>
}
    1600:	0f 90       	pop	r0
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <masterReceive>:

char masterReceive(void){
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    /* Wait for the SPI buffer to be full */
    while (!(SPSR & (1 << SPIF)));
    1610:	ee e2       	ldi	r30, 0x2E	; 46
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	88 23       	and	r24, r24
    1618:	dc f7       	brge	.-10     	; 0x1610 <masterReceive+0x8>
    /* Return SPI Buffer */
    return SPDR;
    161a:	ef e2       	ldi	r30, 0x2F	; 47
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
}
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <tc72Init>:

void tc72Init(void){
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	2e 97       	sbiw	r28, 0x0e	; 14
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    PORTB |= (1 << 4);
    163a:	a8 e3       	ldi	r26, 0x38	; 56
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e8 e3       	ldi	r30, 0x38	; 56
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	80 61       	ori	r24, 0x10	; 16
    1646:	8c 93       	st	X, r24
    /* Select Control Register */
    masterTransmit(0x80);
    1648:	80 e8       	ldi	r24, 0x80	; 128
    164a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <masterTransmit>
    /* Select Continuous temperature Conversion */
    masterTransmit(0x04);
    164e:	84 e0       	ldi	r24, 0x04	; 4
    1650:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <masterTransmit>
    PORTB &= ~(1 << 4);
    1654:	a8 e3       	ldi	r26, 0x38	; 56
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e8 e3       	ldi	r30, 0x38	; 56
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	8f 7e       	andi	r24, 0xEF	; 239
    1660:	8c 93       	st	X, r24
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	a6 e1       	ldi	r26, 0x16	; 22
    1668:	b3 e4       	ldi	r27, 0x43	; 67
    166a:	8b 87       	std	Y+11, r24	; 0x0b
    166c:	9c 87       	std	Y+12, r25	; 0x0c
    166e:	ad 87       	std	Y+13, r26	; 0x0d
    1670:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1672:	6b 85       	ldd	r22, Y+11	; 0x0b
    1674:	7c 85       	ldd	r23, Y+12	; 0x0c
    1676:	8d 85       	ldd	r24, Y+13	; 0x0d
    1678:	9e 85       	ldd	r25, Y+14	; 0x0e
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	4a e7       	ldi	r20, 0x7A	; 122
    1680:	54 e4       	ldi	r21, 0x44	; 68
    1682:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	8f 83       	std	Y+7, r24	; 0x07
    168c:	98 87       	std	Y+8, r25	; 0x08
    168e:	a9 87       	std	Y+9, r26	; 0x09
    1690:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1692:	6f 81       	ldd	r22, Y+7	; 0x07
    1694:	78 85       	ldd	r23, Y+8	; 0x08
    1696:	89 85       	ldd	r24, Y+9	; 0x09
    1698:	9a 85       	ldd	r25, Y+10	; 0x0a
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e8       	ldi	r20, 0x80	; 128
    16a0:	5f e3       	ldi	r21, 0x3F	; 63
    16a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16a6:	88 23       	and	r24, r24
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <tc72Init+0x8e>
		__ticks = 1;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
    16b2:	3f c0       	rjmp	.+126    	; 0x1732 <tc72Init+0x10c>
	else if (__tmp > 65535)
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	3f ef       	ldi	r19, 0xFF	; 255
    16c0:	4f e7       	ldi	r20, 0x7F	; 127
    16c2:	57 e4       	ldi	r21, 0x47	; 71
    16c4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16c8:	18 16       	cp	r1, r24
    16ca:	4c f5       	brge	.+82     	; 0x171e <tc72Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e2       	ldi	r20, 0x20	; 32
    16da:	51 e4       	ldi	r21, 0x41	; 65
    16dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	bc 01       	movw	r22, r24
    16e6:	cd 01       	movw	r24, r26
    16e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	0f c0       	rjmp	.+30     	; 0x1714 <tc72Init+0xee>
    16f6:	84 e6       	ldi	r24, 0x64	; 100
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	f1 f7       	brne	.-4      	; 0x1702 <tc72Init+0xdc>
    1706:	9c 83       	std	Y+4, r25	; 0x04
    1708:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	9e 81       	ldd	r25, Y+6	; 0x06
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	69 f7       	brne	.-38     	; 0x16f6 <tc72Init+0xd0>
    171c:	14 c0       	rjmp	.+40     	; 0x1746 <tc72Init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    171e:	6f 81       	ldd	r22, Y+7	; 0x07
    1720:	78 85       	ldd	r23, Y+8	; 0x08
    1722:	89 85       	ldd	r24, Y+9	; 0x09
    1724:	9a 85       	ldd	r25, Y+10	; 0x0a
    1726:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	9a 81       	ldd	r25, Y+2	; 0x02
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <tc72Init+0x118>
    1742:	9a 83       	std	Y+2, r25	; 0x02
    1744:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(150);
}
    1746:	2e 96       	adiw	r28, 0x0e	; 14
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <displayTemperature>:

void displayTemperature(char msb, char lsb){
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	ca 57       	subi	r28, 0x7A	; 122
    1766:	d0 40       	sbci	r29, 0x00	; 0
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	fe 01       	movw	r30, r28
    1774:	ec 58       	subi	r30, 0x8C	; 140
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 83       	st	Z, r24
    177a:	fe 01       	movw	r30, r28
    177c:	eb 58       	subi	r30, 0x8B	; 139
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	60 83       	st	Z, r22
    char ssd[16] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D,
                    0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
    1782:	ce 01       	movw	r24, r28
    1784:	8c 59       	subi	r24, 0x9C	; 156
    1786:	9f 4f       	sbci	r25, 0xFF	; 255
    1788:	e8 96       	adiw	r28, 0x38	; 56
    178a:	9f af       	std	Y+63, r25	; 0x3f
    178c:	8e af       	std	Y+62, r24	; 0x3e
    178e:	e8 97       	sbiw	r28, 0x38	; 56
    1790:	88 e6       	ldi	r24, 0x68	; 104
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	ea 96       	adiw	r28, 0x3a	; 58
    1796:	9f af       	std	Y+63, r25	; 0x3f
    1798:	8e af       	std	Y+62, r24	; 0x3e
    179a:	ea 97       	sbiw	r28, 0x3a	; 58
    179c:	90 e1       	ldi	r25, 0x10	; 16
    179e:	eb 96       	adiw	r28, 0x3b	; 59
    17a0:	9f af       	std	Y+63, r25	; 0x3f
    17a2:	eb 97       	sbiw	r28, 0x3b	; 59
    17a4:	ea 96       	adiw	r28, 0x3a	; 58
    17a6:	ee ad       	ldd	r30, Y+62	; 0x3e
    17a8:	ff ad       	ldd	r31, Y+63	; 0x3f
    17aa:	ea 97       	sbiw	r28, 0x3a	; 58
    17ac:	00 80       	ld	r0, Z
    17ae:	ea 96       	adiw	r28, 0x3a	; 58
    17b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    17b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    17b4:	ea 97       	sbiw	r28, 0x3a	; 58
    17b6:	01 96       	adiw	r24, 0x01	; 1
    17b8:	ea 96       	adiw	r28, 0x3a	; 58
    17ba:	9f af       	std	Y+63, r25	; 0x3f
    17bc:	8e af       	std	Y+62, r24	; 0x3e
    17be:	ea 97       	sbiw	r28, 0x3a	; 58
    17c0:	e8 96       	adiw	r28, 0x38	; 56
    17c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    17c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    17c6:	e8 97       	sbiw	r28, 0x38	; 56
    17c8:	00 82       	st	Z, r0
    17ca:	e8 96       	adiw	r28, 0x38	; 56
    17cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    17ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    17d0:	e8 97       	sbiw	r28, 0x38	; 56
    17d2:	01 96       	adiw	r24, 0x01	; 1
    17d4:	e8 96       	adiw	r28, 0x38	; 56
    17d6:	9f af       	std	Y+63, r25	; 0x3f
    17d8:	8e af       	std	Y+62, r24	; 0x3e
    17da:	e8 97       	sbiw	r28, 0x38	; 56
    17dc:	eb 96       	adiw	r28, 0x3b	; 59
    17de:	9f ad       	ldd	r25, Y+63	; 0x3f
    17e0:	eb 97       	sbiw	r28, 0x3b	; 59
    17e2:	91 50       	subi	r25, 0x01	; 1
    17e4:	eb 96       	adiw	r28, 0x3b	; 59
    17e6:	9f af       	std	Y+63, r25	; 0x3f
    17e8:	eb 97       	sbiw	r28, 0x3b	; 59
    17ea:	eb 96       	adiw	r28, 0x3b	; 59
    17ec:	ef ad       	ldd	r30, Y+63	; 0x3f
    17ee:	eb 97       	sbiw	r28, 0x3b	; 59
    17f0:	ee 23       	and	r30, r30
    17f2:	c1 f6       	brne	.-80     	; 0x17a4 <displayTemperature+0x4c>
    char sign;
    lsb >>= 6;
    17f4:	de 01       	movw	r26, r28
    17f6:	ab 58       	subi	r26, 0x8B	; 139
    17f8:	bf 4f       	sbci	r27, 0xFF	; 255
    17fa:	fe 01       	movw	r30, r28
    17fc:	eb 58       	subi	r30, 0x8B	; 139
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 81       	ld	r24, Z
    1802:	82 95       	swap	r24
    1804:	86 95       	lsr	r24
    1806:	86 95       	lsr	r24
    1808:	83 70       	andi	r24, 0x03	; 3
    180a:	8c 93       	st	X, r24

    if (msb & 0x80) {
    180c:	fe 01       	movw	r30, r28
    180e:	ec 58       	subi	r30, 0x8C	; 140
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	80 81       	ld	r24, Z
    1814:	88 23       	and	r24, r24
    1816:	2c f5       	brge	.+74     	; 0x1862 <displayTemperature+0x10a>
        msb = (~msb) + 1;
    1818:	fe 01       	movw	r30, r28
    181a:	ec 58       	subi	r30, 0x8C	; 140
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 81       	ld	r24, Z
    1820:	81 95       	neg	r24
    1822:	fe 01       	movw	r30, r28
    1824:	ec 58       	subi	r30, 0x8C	; 140
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	80 83       	st	Z, r24
        sign = 1;
    182a:	fe 01       	movw	r30, r28
    182c:	ed 59       	subi	r30, 0x9D	; 157
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	80 83       	st	Z, r24
        if (lsb != 0) lsb = 75 / lsb;
    1834:	fe 01       	movw	r30, r28
    1836:	eb 58       	subi	r30, 0x8B	; 139
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	80 81       	ld	r24, Z
    183c:	88 23       	and	r24, r24
    183e:	61 f1       	breq	.+88     	; 0x1898 <displayTemperature+0x140>
    1840:	fe 01       	movw	r30, r28
    1842:	eb 58       	subi	r30, 0x8B	; 139
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	8b e4       	ldi	r24, 0x4B	; 75
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	b9 01       	movw	r22, r18
    1852:	0e 94 86 12 	call	0x250c	; 0x250c <__divmodhi4>
    1856:	cb 01       	movw	r24, r22
    1858:	fe 01       	movw	r30, r28
    185a:	eb 58       	subi	r30, 0x8B	; 139
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 83       	st	Z, r24
    1860:	1b c0       	rjmp	.+54     	; 0x1898 <displayTemperature+0x140>
    } else {
        sign = 0;
    1862:	fe 01       	movw	r30, r28
    1864:	ed 59       	subi	r30, 0x9D	; 157
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	10 82       	st	Z, r1
        lsb *= 25;
    186a:	fe 01       	movw	r30, r28
    186c:	eb 58       	subi	r30, 0x8B	; 139
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	c9 01       	movw	r24, r18
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	82 0f       	add	r24, r18
    187e:	93 1f       	adc	r25, r19
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	82 0f       	add	r24, r18
    188e:	93 1f       	adc	r25, r19
    1890:	fe 01       	movw	r30, r28
    1892:	eb 58       	subi	r30, 0x8B	; 139
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	80 83       	st	Z, r24
    }

    PORTD = 0x00;
    1898:	e2 e3       	ldi	r30, 0x32	; 50
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	10 82       	st	Z, r1
    if (sign == 1) PORTC = 0x40;
    189e:	fe 01       	movw	r30, r28
    18a0:	ed 59       	subi	r30, 0x9D	; 157
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	80 81       	ld	r24, Z
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	29 f4       	brne	.+10     	; 0x18b4 <displayTemperature+0x15c>
    18aa:	e5 e3       	ldi	r30, 0x35	; 53
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 e4       	ldi	r24, 0x40	; 64
    18b0:	80 83       	st	Z, r24
    18b2:	1e c0       	rjmp	.+60     	; 0x18f0 <displayTemperature+0x198>
    else if (msb >= 100) PORTC = ssd[msb / 100];
    18b4:	fe 01       	movw	r30, r28
    18b6:	ec 58       	subi	r30, 0x8C	; 140
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 81       	ld	r24, Z
    18bc:	84 36       	cpi	r24, 0x64	; 100
    18be:	a8 f0       	brcs	.+42     	; 0x18ea <displayTemperature+0x192>
    18c0:	a5 e3       	ldi	r26, 0x35	; 53
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	fe 01       	movw	r30, r28
    18c6:	ec 58       	subi	r30, 0x8C	; 140
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 81       	ld	r24, Z
    18cc:	94 e6       	ldi	r25, 0x64	; 100
    18ce:	69 2f       	mov	r22, r25
    18d0:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__udivmodqi4>
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	ce 01       	movw	r24, r28
    18da:	8c 59       	subi	r24, 0x9C	; 156
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	fc 01       	movw	r30, r24
    18e0:	e2 0f       	add	r30, r18
    18e2:	f3 1f       	adc	r31, r19
    18e4:	80 81       	ld	r24, Z
    18e6:	8c 93       	st	X, r24
    18e8:	03 c0       	rjmp	.+6      	; 0x18f0 <displayTemperature+0x198>
    else PORTC = 0x00;
    18ea:	e5 e3       	ldi	r30, 0x35	; 53
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	10 82       	st	Z, r1
    PORTD = (1 << 0);
    18f0:	e2 e3       	ldi	r30, 0x32	; 50
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	80 83       	st	Z, r24
    18f8:	fe 01       	movw	r30, r28
    18fa:	e1 5a       	subi	r30, 0xA1	; 161
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a0 ea       	ldi	r26, 0xA0	; 160
    1904:	b0 e4       	ldi	r27, 0x40	; 64
    1906:	80 83       	st	Z, r24
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	a2 83       	std	Z+2, r26	; 0x02
    190c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190e:	8e 01       	movw	r16, r28
    1910:	05 5a       	subi	r16, 0xA5	; 165
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	fe 01       	movw	r30, r28
    1916:	e1 5a       	subi	r30, 0xA1	; 161
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	60 81       	ld	r22, Z
    191c:	71 81       	ldd	r23, Z+1	; 0x01
    191e:	82 81       	ldd	r24, Z+2	; 0x02
    1920:	93 81       	ldd	r25, Z+3	; 0x03
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	4a e7       	ldi	r20, 0x7A	; 122
    1928:	54 e4       	ldi	r21, 0x44	; 68
    192a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	f8 01       	movw	r30, r16
    1934:	80 83       	st	Z, r24
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	a2 83       	std	Z+2, r26	; 0x02
    193a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    193c:	fe 01       	movw	r30, r28
    193e:	e5 5a       	subi	r30, 0xA5	; 165
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	44 f4       	brge	.+16     	; 0x196a <displayTemperature+0x212>
		__ticks = 1;
    195a:	fe 01       	movw	r30, r28
    195c:	e7 5a       	subi	r30, 0xA7	; 167
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	91 83       	std	Z+1, r25	; 0x01
    1966:	80 83       	st	Z, r24
    1968:	64 c0       	rjmp	.+200    	; 0x1a32 <displayTemperature+0x2da>
	else if (__tmp > 65535)
    196a:	fe 01       	movw	r30, r28
    196c:	e5 5a       	subi	r30, 0xA5	; 165
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	3f ef       	ldi	r19, 0xFF	; 255
    197c:	4f e7       	ldi	r20, 0x7F	; 127
    197e:	57 e4       	ldi	r21, 0x47	; 71
    1980:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1984:	18 16       	cp	r1, r24
    1986:	0c f0       	brlt	.+2      	; 0x198a <displayTemperature+0x232>
    1988:	43 c0       	rjmp	.+134    	; 0x1a10 <displayTemperature+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198a:	fe 01       	movw	r30, r28
    198c:	e1 5a       	subi	r30, 0xA1	; 161
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	40 e2       	ldi	r20, 0x20	; 32
    199e:	51 e4       	ldi	r21, 0x41	; 65
    19a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8e 01       	movw	r16, r28
    19aa:	07 5a       	subi	r16, 0xA7	; 167
    19ac:	1f 4f       	sbci	r17, 0xFF	; 255
    19ae:	bc 01       	movw	r22, r24
    19b0:	cd 01       	movw	r24, r26
    19b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	f8 01       	movw	r30, r16
    19bc:	91 83       	std	Z+1, r25	; 0x01
    19be:	80 83       	st	Z, r24
    19c0:	1f c0       	rjmp	.+62     	; 0x1a00 <displayTemperature+0x2a8>
    19c2:	fe 01       	movw	r30, r28
    19c4:	e9 5a       	subi	r30, 0xA9	; 169
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	84 e6       	ldi	r24, 0x64	; 100
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	91 83       	std	Z+1, r25	; 0x01
    19ce:	80 83       	st	Z, r24
    19d0:	fe 01       	movw	r30, r28
    19d2:	e9 5a       	subi	r30, 0xA9	; 169
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	80 81       	ld	r24, Z
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <displayTemperature+0x282>
    19de:	fe 01       	movw	r30, r28
    19e0:	e9 5a       	subi	r30, 0xA9	; 169
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	de 01       	movw	r26, r28
    19ea:	a7 5a       	subi	r26, 0xA7	; 167
    19ec:	bf 4f       	sbci	r27, 0xFF	; 255
    19ee:	fe 01       	movw	r30, r28
    19f0:	e7 5a       	subi	r30, 0xA7	; 167
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	11 96       	adiw	r26, 0x01	; 1
    19fc:	9c 93       	st	X, r25
    19fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a00:	fe 01       	movw	r30, r28
    1a02:	e7 5a       	subi	r30, 0xA7	; 167
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	d1 f6       	brne	.-76     	; 0x19c2 <displayTemperature+0x26a>
    1a0e:	28 c0       	rjmp	.+80     	; 0x1a60 <displayTemperature+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a10:	8e 01       	movw	r16, r28
    1a12:	07 5a       	subi	r16, 0xA7	; 167
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	fe 01       	movw	r30, r28
    1a18:	e5 5a       	subi	r30, 0xA5	; 165
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	60 81       	ld	r22, Z
    1a1e:	71 81       	ldd	r23, Z+1	; 0x01
    1a20:	82 81       	ldd	r24, Z+2	; 0x02
    1a22:	93 81       	ldd	r25, Z+3	; 0x03
    1a24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	91 83       	std	Z+1, r25	; 0x01
    1a30:	80 83       	st	Z, r24
    1a32:	de 01       	movw	r26, r28
    1a34:	ab 5a       	subi	r26, 0xAB	; 171
    1a36:	bf 4f       	sbci	r27, 0xFF	; 255
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e7 5a       	subi	r30, 0xA7	; 167
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	80 81       	ld	r24, Z
    1a40:	91 81       	ldd	r25, Z+1	; 0x01
    1a42:	11 96       	adiw	r26, 0x01	; 1
    1a44:	9c 93       	st	X, r25
    1a46:	8e 93       	st	-X, r24
    1a48:	fe 01       	movw	r30, r28
    1a4a:	eb 5a       	subi	r30, 0xAB	; 171
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 81       	ld	r24, Z
    1a50:	91 81       	ldd	r25, Z+1	; 0x01
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <displayTemperature+0x2fa>
    1a56:	fe 01       	movw	r30, r28
    1a58:	eb 5a       	subi	r30, 0xAB	; 171
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	80 83       	st	Z, r24
    _delay_ms(5);

    PORTD = 0x00;
    1a60:	e2 e3       	ldi	r30, 0x32	; 50
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	10 82       	st	Z, r1
    if (msb >= 10)
    1a66:	fe 01       	movw	r30, r28
    1a68:	ec 58       	subi	r30, 0x8C	; 140
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8a 30       	cpi	r24, 0x0A	; 10
    1a70:	d0 f0       	brcs	.+52     	; 0x1aa6 <displayTemperature+0x34e>
        PORTC = ssd[(msb % 100) / 10];
    1a72:	a5 e3       	ldi	r26, 0x35	; 53
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	fe 01       	movw	r30, r28
    1a78:	ec 58       	subi	r30, 0x8C	; 140
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 81       	ld	r24, Z
    1a7e:	94 e6       	ldi	r25, 0x64	; 100
    1a80:	69 2f       	mov	r22, r25
    1a82:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__udivmodqi4>
    1a86:	89 2f       	mov	r24, r25
    1a88:	9a e0       	ldi	r25, 0x0A	; 10
    1a8a:	69 2f       	mov	r22, r25
    1a8c:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__udivmodqi4>
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	ce 01       	movw	r24, r28
    1a96:	8c 59       	subi	r24, 0x9C	; 156
    1a98:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	e2 0f       	add	r30, r18
    1a9e:	f3 1f       	adc	r31, r19
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8c 93       	st	X, r24
    1aa4:	03 c0       	rjmp	.+6      	; 0x1aac <displayTemperature+0x354>
    else PORTC = 0;
    1aa6:	e5 e3       	ldi	r30, 0x35	; 53
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	10 82       	st	Z, r1
    PORTD = (1 << 1);
    1aac:	e2 e3       	ldi	r30, 0x32	; 50
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	82 e0       	ldi	r24, 0x02	; 2
    1ab2:	80 83       	st	Z, r24
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	ef 5a       	subi	r30, 0xAF	; 175
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a0 ea       	ldi	r26, 0xA0	; 160
    1ac0:	b0 e4       	ldi	r27, 0x40	; 64
    1ac2:	80 83       	st	Z, r24
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	a2 83       	std	Z+2, r26	; 0x02
    1ac8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aca:	8e 01       	movw	r16, r28
    1acc:	03 5b       	subi	r16, 0xB3	; 179
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	ef 5a       	subi	r30, 0xAF	; 175
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4a e7       	ldi	r20, 0x7A	; 122
    1ae4:	54 e4       	ldi	r21, 0x44	; 68
    1ae6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	f8 01       	movw	r30, r16
    1af0:	80 83       	st	Z, r24
    1af2:	91 83       	std	Z+1, r25	; 0x01
    1af4:	a2 83       	std	Z+2, r26	; 0x02
    1af6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1af8:	fe 01       	movw	r30, r28
    1afa:	e3 5b       	subi	r30, 0xB3	; 179
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	60 81       	ld	r22, Z
    1b00:	71 81       	ldd	r23, Z+1	; 0x01
    1b02:	82 81       	ldd	r24, Z+2	; 0x02
    1b04:	93 81       	ldd	r25, Z+3	; 0x03
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e8       	ldi	r20, 0x80	; 128
    1b0c:	5f e3       	ldi	r21, 0x3F	; 63
    1b0e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b12:	88 23       	and	r24, r24
    1b14:	44 f4       	brge	.+16     	; 0x1b26 <displayTemperature+0x3ce>
		__ticks = 1;
    1b16:	fe 01       	movw	r30, r28
    1b18:	e5 5b       	subi	r30, 0xB5	; 181
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	91 83       	std	Z+1, r25	; 0x01
    1b22:	80 83       	st	Z, r24
    1b24:	64 c0       	rjmp	.+200    	; 0x1bee <displayTemperature+0x496>
	else if (__tmp > 65535)
    1b26:	fe 01       	movw	r30, r28
    1b28:	e3 5b       	subi	r30, 0xB3	; 179
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	3f ef       	ldi	r19, 0xFF	; 255
    1b38:	4f e7       	ldi	r20, 0x7F	; 127
    1b3a:	57 e4       	ldi	r21, 0x47	; 71
    1b3c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b40:	18 16       	cp	r1, r24
    1b42:	0c f0       	brlt	.+2      	; 0x1b46 <displayTemperature+0x3ee>
    1b44:	43 c0       	rjmp	.+134    	; 0x1bcc <displayTemperature+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b46:	fe 01       	movw	r30, r28
    1b48:	ef 5a       	subi	r30, 0xAF	; 175
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	60 81       	ld	r22, Z
    1b4e:	71 81       	ldd	r23, Z+1	; 0x01
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	93 81       	ldd	r25, Z+3	; 0x03
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e2       	ldi	r20, 0x20	; 32
    1b5a:	51 e4       	ldi	r21, 0x41	; 65
    1b5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	8e 01       	movw	r16, r28
    1b66:	05 5b       	subi	r16, 0xB5	; 181
    1b68:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6a:	bc 01       	movw	r22, r24
    1b6c:	cd 01       	movw	r24, r26
    1b6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	f8 01       	movw	r30, r16
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	80 83       	st	Z, r24
    1b7c:	1f c0       	rjmp	.+62     	; 0x1bbc <displayTemperature+0x464>
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e7 5b       	subi	r30, 0xB7	; 183
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	84 e6       	ldi	r24, 0x64	; 100
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	80 83       	st	Z, r24
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e7 5b       	subi	r30, 0xB7	; 183
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <displayTemperature+0x43e>
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e7 5b       	subi	r30, 0xB7	; 183
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	91 83       	std	Z+1, r25	; 0x01
    1ba2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba4:	de 01       	movw	r26, r28
    1ba6:	a5 5b       	subi	r26, 0xB5	; 181
    1ba8:	bf 4f       	sbci	r27, 0xFF	; 255
    1baa:	fe 01       	movw	r30, r28
    1bac:	e5 5b       	subi	r30, 0xB5	; 181
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	11 96       	adiw	r26, 0x01	; 1
    1bb8:	9c 93       	st	X, r25
    1bba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e5 5b       	subi	r30, 0xB5	; 181
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	91 81       	ldd	r25, Z+1	; 0x01
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	d1 f6       	brne	.-76     	; 0x1b7e <displayTemperature+0x426>
    1bca:	27 c0       	rjmp	.+78     	; 0x1c1a <displayTemperature+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bcc:	8e 01       	movw	r16, r28
    1bce:	05 5b       	subi	r16, 0xB5	; 181
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e3 5b       	subi	r30, 0xB3	; 179
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	f8 01       	movw	r30, r16
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	80 83       	st	Z, r24
    1bee:	de 01       	movw	r26, r28
    1bf0:	a9 5b       	subi	r26, 0xB9	; 185
    1bf2:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e5 5b       	subi	r30, 0xB5	; 181
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 81       	ld	r24, Z
    1bfc:	91 81       	ldd	r25, Z+1	; 0x01
    1bfe:	8d 93       	st	X+, r24
    1c00:	9c 93       	st	X, r25
    1c02:	fe 01       	movw	r30, r28
    1c04:	e9 5b       	subi	r30, 0xB9	; 185
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	80 81       	ld	r24, Z
    1c0a:	91 81       	ldd	r25, Z+1	; 0x01
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <displayTemperature+0x4b4>
    1c10:	fe 01       	movw	r30, r28
    1c12:	e9 5b       	subi	r30, 0xB9	; 185
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
    _delay_ms(5);

    PORTD = 0x00;
    1c1a:	e2 e3       	ldi	r30, 0x32	; 50
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	10 82       	st	Z, r1
    PORTC = ssd[msb % 10] | 0x80;
    1c20:	a5 e3       	ldi	r26, 0x35	; 53
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	fe 01       	movw	r30, r28
    1c26:	ec 58       	subi	r30, 0x8C	; 140
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 81       	ld	r24, Z
    1c2c:	9a e0       	ldi	r25, 0x0A	; 10
    1c2e:	69 2f       	mov	r22, r25
    1c30:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__udivmodqi4>
    1c34:	89 2f       	mov	r24, r25
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	8c 59       	subi	r24, 0x9C	; 156
    1c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c40:	fc 01       	movw	r30, r24
    1c42:	e2 0f       	add	r30, r18
    1c44:	f3 1f       	adc	r31, r19
    1c46:	80 81       	ld	r24, Z
    1c48:	80 68       	ori	r24, 0x80	; 128
    1c4a:	8c 93       	st	X, r24
    PORTD = (1 << 2);
    1c4c:	e2 e3       	ldi	r30, 0x32	; 50
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	84 e0       	ldi	r24, 0x04	; 4
    1c52:	80 83       	st	Z, r24
    1c54:	fe 01       	movw	r30, r28
    1c56:	ed 5b       	subi	r30, 0xBD	; 189
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a0 ea       	ldi	r26, 0xA0	; 160
    1c60:	b0 e4       	ldi	r27, 0x40	; 64
    1c62:	80 83       	st	Z, r24
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	a2 83       	std	Z+2, r26	; 0x02
    1c68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6a:	8e 01       	movw	r16, r28
    1c6c:	01 5c       	subi	r16, 0xC1	; 193
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	fe 01       	movw	r30, r28
    1c72:	ed 5b       	subi	r30, 0xBD	; 189
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a e7       	ldi	r20, 0x7A	; 122
    1c84:	54 e4       	ldi	r21, 0x44	; 68
    1c86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	f8 01       	movw	r30, r16
    1c90:	80 83       	st	Z, r24
    1c92:	91 83       	std	Z+1, r25	; 0x01
    1c94:	a2 83       	std	Z+2, r26	; 0x02
    1c96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c98:	fe 01       	movw	r30, r28
    1c9a:	ff 96       	adiw	r30, 0x3f	; 63
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e8       	ldi	r20, 0x80	; 128
    1caa:	5f e3       	ldi	r21, 0x3F	; 63
    1cac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cb0:	88 23       	and	r24, r24
    1cb2:	2c f4       	brge	.+10     	; 0x1cbe <displayTemperature+0x566>
		__ticks = 1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	9e af       	std	Y+62, r25	; 0x3e
    1cba:	8d af       	std	Y+61, r24	; 0x3d
    1cbc:	46 c0       	rjmp	.+140    	; 0x1d4a <displayTemperature+0x5f2>
	else if (__tmp > 65535)
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	ff 96       	adiw	r30, 0x3f	; 63
    1cc2:	60 81       	ld	r22, Z
    1cc4:	71 81       	ldd	r23, Z+1	; 0x01
    1cc6:	82 81       	ldd	r24, Z+2	; 0x02
    1cc8:	93 81       	ldd	r25, Z+3	; 0x03
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	3f ef       	ldi	r19, 0xFF	; 255
    1cce:	4f e7       	ldi	r20, 0x7F	; 127
    1cd0:	57 e4       	ldi	r21, 0x47	; 71
    1cd2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cd6:	18 16       	cp	r1, r24
    1cd8:	64 f5       	brge	.+88     	; 0x1d32 <displayTemperature+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cda:	fe 01       	movw	r30, r28
    1cdc:	ed 5b       	subi	r30, 0xBD	; 189
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	60 81       	ld	r22, Z
    1ce2:	71 81       	ldd	r23, Z+1	; 0x01
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e2       	ldi	r20, 0x20	; 32
    1cee:	51 e4       	ldi	r21, 0x41	; 65
    1cf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9e af       	std	Y+62, r25	; 0x3e
    1d06:	8d af       	std	Y+61, r24	; 0x3d
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <displayTemperature+0x5d0>
    1d0a:	84 e6       	ldi	r24, 0x64	; 100
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9c af       	std	Y+60, r25	; 0x3c
    1d10:	8b af       	std	Y+59, r24	; 0x3b
    1d12:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d14:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <displayTemperature+0x5be>
    1d1a:	9c af       	std	Y+60, r25	; 0x3c
    1d1c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d20:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	9e af       	std	Y+62, r25	; 0x3e
    1d26:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	69 f7       	brne	.-38     	; 0x1d0a <displayTemperature+0x5b2>
    1d30:	16 c0       	rjmp	.+44     	; 0x1d5e <displayTemperature+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d32:	fe 01       	movw	r30, r28
    1d34:	ff 96       	adiw	r30, 0x3f	; 63
    1d36:	60 81       	ld	r22, Z
    1d38:	71 81       	ldd	r23, Z+1	; 0x01
    1d3a:	82 81       	ldd	r24, Z+2	; 0x02
    1d3c:	93 81       	ldd	r25, Z+3	; 0x03
    1d3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	9e af       	std	Y+62, r25	; 0x3e
    1d48:	8d af       	std	Y+61, r24	; 0x3d
    1d4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d4e:	9a af       	std	Y+58, r25	; 0x3a
    1d50:	89 af       	std	Y+57, r24	; 0x39
    1d52:	89 ad       	ldd	r24, Y+57	; 0x39
    1d54:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <displayTemperature+0x5fe>
    1d5a:	9a af       	std	Y+58, r25	; 0x3a
    1d5c:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(5);

    PORTD = 0x00;
    1d5e:	e2 e3       	ldi	r30, 0x32	; 50
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	10 82       	st	Z, r1
    PORTC = ssd[lsb / 10];
    1d64:	a5 e3       	ldi	r26, 0x35	; 53
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	fe 01       	movw	r30, r28
    1d6a:	eb 58       	subi	r30, 0x8B	; 139
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	80 81       	ld	r24, Z
    1d70:	9a e0       	ldi	r25, 0x0A	; 10
    1d72:	69 2f       	mov	r22, r25
    1d74:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__udivmodqi4>
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	8c 59       	subi	r24, 0x9C	; 156
    1d80:	9f 4f       	sbci	r25, 0xFF	; 255
    1d82:	fc 01       	movw	r30, r24
    1d84:	e2 0f       	add	r30, r18
    1d86:	f3 1f       	adc	r31, r19
    1d88:	80 81       	ld	r24, Z
    1d8a:	8c 93       	st	X, r24
    PORTD = (1 << 3);
    1d8c:	e2 e3       	ldi	r30, 0x32	; 50
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	88 e0       	ldi	r24, 0x08	; 8
    1d92:	80 83       	st	Z, r24
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	a0 ea       	ldi	r26, 0xA0	; 160
    1d9a:	b0 e4       	ldi	r27, 0x40	; 64
    1d9c:	8d ab       	std	Y+53, r24	; 0x35
    1d9e:	9e ab       	std	Y+54, r25	; 0x36
    1da0:	af ab       	std	Y+55, r26	; 0x37
    1da2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da4:	6d a9       	ldd	r22, Y+53	; 0x35
    1da6:	7e a9       	ldd	r23, Y+54	; 0x36
    1da8:	8f a9       	ldd	r24, Y+55	; 0x37
    1daa:	98 ad       	ldd	r25, Y+56	; 0x38
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	4a e7       	ldi	r20, 0x7A	; 122
    1db2:	54 e4       	ldi	r21, 0x44	; 68
    1db4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	89 ab       	std	Y+49, r24	; 0x31
    1dbe:	9a ab       	std	Y+50, r25	; 0x32
    1dc0:	ab ab       	std	Y+51, r26	; 0x33
    1dc2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1dc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1dc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dca:	9c a9       	ldd	r25, Y+52	; 0x34
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e8       	ldi	r20, 0x80	; 128
    1dd2:	5f e3       	ldi	r21, 0x3F	; 63
    1dd4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dd8:	88 23       	and	r24, r24
    1dda:	2c f4       	brge	.+10     	; 0x1de6 <displayTemperature+0x68e>
		__ticks = 1;
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	98 ab       	std	Y+48, r25	; 0x30
    1de2:	8f a7       	std	Y+47, r24	; 0x2f
    1de4:	3f c0       	rjmp	.+126    	; 0x1e64 <displayTemperature+0x70c>
	else if (__tmp > 65535)
    1de6:	69 a9       	ldd	r22, Y+49	; 0x31
    1de8:	7a a9       	ldd	r23, Y+50	; 0x32
    1dea:	8b a9       	ldd	r24, Y+51	; 0x33
    1dec:	9c a9       	ldd	r25, Y+52	; 0x34
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f ef       	ldi	r19, 0xFF	; 255
    1df2:	4f e7       	ldi	r20, 0x7F	; 127
    1df4:	57 e4       	ldi	r21, 0x47	; 71
    1df6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dfa:	18 16       	cp	r1, r24
    1dfc:	4c f5       	brge	.+82     	; 0x1e50 <displayTemperature+0x6f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfe:	6d a9       	ldd	r22, Y+53	; 0x35
    1e00:	7e a9       	ldd	r23, Y+54	; 0x36
    1e02:	8f a9       	ldd	r24, Y+55	; 0x37
    1e04:	98 ad       	ldd	r25, Y+56	; 0x38
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e2       	ldi	r20, 0x20	; 32
    1e0c:	51 e4       	ldi	r21, 0x41	; 65
    1e0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	bc 01       	movw	r22, r24
    1e18:	cd 01       	movw	r24, r26
    1e1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	98 ab       	std	Y+48, r25	; 0x30
    1e24:	8f a7       	std	Y+47, r24	; 0x2f
    1e26:	0f c0       	rjmp	.+30     	; 0x1e46 <displayTemperature+0x6ee>
    1e28:	84 e6       	ldi	r24, 0x64	; 100
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9e a7       	std	Y+46, r25	; 0x2e
    1e2e:	8d a7       	std	Y+45, r24	; 0x2d
    1e30:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e32:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <displayTemperature+0x6dc>
    1e38:	9e a7       	std	Y+46, r25	; 0x2e
    1e3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	98 ab       	std	Y+48, r25	; 0x30
    1e44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e48:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4a:	00 97       	sbiw	r24, 0x00	; 0
    1e4c:	69 f7       	brne	.-38     	; 0x1e28 <displayTemperature+0x6d0>
    1e4e:	14 c0       	rjmp	.+40     	; 0x1e78 <displayTemperature+0x720>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e50:	69 a9       	ldd	r22, Y+49	; 0x31
    1e52:	7a a9       	ldd	r23, Y+50	; 0x32
    1e54:	8b a9       	ldd	r24, Y+51	; 0x33
    1e56:	9c a9       	ldd	r25, Y+52	; 0x34
    1e58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	98 ab       	std	Y+48, r25	; 0x30
    1e62:	8f a7       	std	Y+47, r24	; 0x2f
    1e64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e66:	98 a9       	ldd	r25, Y+48	; 0x30
    1e68:	9c a7       	std	Y+44, r25	; 0x2c
    1e6a:	8b a7       	std	Y+43, r24	; 0x2b
    1e6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <displayTemperature+0x718>
    1e74:	9c a7       	std	Y+44, r25	; 0x2c
    1e76:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(5);

    PORTD = 0x00;
    1e78:	e2 e3       	ldi	r30, 0x32	; 50
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	10 82       	st	Z, r1
    PORTC = ssd[lsb % 10];
    1e7e:	a5 e3       	ldi	r26, 0x35	; 53
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	fe 01       	movw	r30, r28
    1e84:	eb 58       	subi	r30, 0x8B	; 139
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	9a e0       	ldi	r25, 0x0A	; 10
    1e8c:	69 2f       	mov	r22, r25
    1e8e:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__udivmodqi4>
    1e92:	89 2f       	mov	r24, r25
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	ce 01       	movw	r24, r28
    1e9a:	8c 59       	subi	r24, 0x9C	; 156
    1e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	e2 0f       	add	r30, r18
    1ea2:	f3 1f       	adc	r31, r19
    1ea4:	80 81       	ld	r24, Z
    1ea6:	8c 93       	st	X, r24
    PORTD = (1 << 4);
    1ea8:	e2 e3       	ldi	r30, 0x32	; 50
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 e1       	ldi	r24, 0x10	; 16
    1eae:	80 83       	st	Z, r24
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 ea       	ldi	r26, 0xA0	; 160
    1eb6:	b0 e4       	ldi	r27, 0x40	; 64
    1eb8:	8f a3       	std	Y+39, r24	; 0x27
    1eba:	98 a7       	std	Y+40, r25	; 0x28
    1ebc:	a9 a7       	std	Y+41, r26	; 0x29
    1ebe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ec4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	4a e7       	ldi	r20, 0x7A	; 122
    1ece:	54 e4       	ldi	r21, 0x44	; 68
    1ed0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	8b a3       	std	Y+35, r24	; 0x23
    1eda:	9c a3       	std	Y+36, r25	; 0x24
    1edc:	ad a3       	std	Y+37, r26	; 0x25
    1ede:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ee0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ee6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e8       	ldi	r20, 0x80	; 128
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ef4:	88 23       	and	r24, r24
    1ef6:	2c f4       	brge	.+10     	; 0x1f02 <displayTemperature+0x7aa>
		__ticks = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9a a3       	std	Y+34, r25	; 0x22
    1efe:	89 a3       	std	Y+33, r24	; 0x21
    1f00:	3f c0       	rjmp	.+126    	; 0x1f80 <displayTemperature+0x828>
	else if (__tmp > 65535)
    1f02:	6b a1       	ldd	r22, Y+35	; 0x23
    1f04:	7c a1       	ldd	r23, Y+36	; 0x24
    1f06:	8d a1       	ldd	r24, Y+37	; 0x25
    1f08:	9e a1       	ldd	r25, Y+38	; 0x26
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	3f ef       	ldi	r19, 0xFF	; 255
    1f0e:	4f e7       	ldi	r20, 0x7F	; 127
    1f10:	57 e4       	ldi	r21, 0x47	; 71
    1f12:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f16:	18 16       	cp	r1, r24
    1f18:	4c f5       	brge	.+82     	; 0x1f6c <displayTemperature+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f1c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f1e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f20:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e2       	ldi	r20, 0x20	; 32
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9a a3       	std	Y+34, r25	; 0x22
    1f40:	89 a3       	std	Y+33, r24	; 0x21
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <displayTemperature+0x80a>
    1f44:	84 e6       	ldi	r24, 0x64	; 100
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	98 a3       	std	Y+32, r25	; 0x20
    1f4a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f4e:	98 a1       	ldd	r25, Y+32	; 0x20
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <displayTemperature+0x7f8>
    1f54:	98 a3       	std	Y+32, r25	; 0x20
    1f56:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f58:	89 a1       	ldd	r24, Y+33	; 0x21
    1f5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	9a a3       	std	Y+34, r25	; 0x22
    1f60:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f62:	89 a1       	ldd	r24, Y+33	; 0x21
    1f64:	9a a1       	ldd	r25, Y+34	; 0x22
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	69 f7       	brne	.-38     	; 0x1f44 <displayTemperature+0x7ec>
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <displayTemperature+0x83c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f70:	8d a1       	ldd	r24, Y+37	; 0x25
    1f72:	9e a1       	ldd	r25, Y+38	; 0x26
    1f74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9a a3       	std	Y+34, r25	; 0x22
    1f7e:	89 a3       	std	Y+33, r24	; 0x21
    1f80:	89 a1       	ldd	r24, Y+33	; 0x21
    1f82:	9a a1       	ldd	r25, Y+34	; 0x22
    1f84:	9e 8f       	std	Y+30, r25	; 0x1e
    1f86:	8d 8f       	std	Y+29, r24	; 0x1d
    1f88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <displayTemperature+0x834>
    1f90:	9e 8f       	std	Y+30, r25	; 0x1e
    1f92:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(5);

    PORTD = 0x00;
    1f94:	e2 e3       	ldi	r30, 0x32	; 50
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	10 82       	st	Z, r1
    PORTC = 0x63;
    1f9a:	e5 e3       	ldi	r30, 0x35	; 53
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	83 e6       	ldi	r24, 0x63	; 99
    1fa0:	80 83       	st	Z, r24
    PORTD = (1 << 5);
    1fa2:	e2 e3       	ldi	r30, 0x32	; 50
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 e2       	ldi	r24, 0x20	; 32
    1fa8:	80 83       	st	Z, r24
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a0 ea       	ldi	r26, 0xA0	; 160
    1fb0:	b0 e4       	ldi	r27, 0x40	; 64
    1fb2:	89 8f       	std	Y+25, r24	; 0x19
    1fb4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fb6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fb8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fba:	69 8d       	ldd	r22, Y+25	; 0x19
    1fbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	4a e7       	ldi	r20, 0x7A	; 122
    1fc8:	54 e4       	ldi	r21, 0x44	; 68
    1fca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	8d 8b       	std	Y+21, r24	; 0x15
    1fd4:	9e 8b       	std	Y+22, r25	; 0x16
    1fd6:	af 8b       	std	Y+23, r26	; 0x17
    1fd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fda:	6d 89       	ldd	r22, Y+21	; 0x15
    1fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fde:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e8       	ldi	r20, 0x80	; 128
    1fe8:	5f e3       	ldi	r21, 0x3F	; 63
    1fea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fee:	88 23       	and	r24, r24
    1ff0:	2c f4       	brge	.+10     	; 0x1ffc <displayTemperature+0x8a4>
		__ticks = 1;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9c 8b       	std	Y+20, r25	; 0x14
    1ff8:	8b 8b       	std	Y+19, r24	; 0x13
    1ffa:	3f c0       	rjmp	.+126    	; 0x207a <displayTemperature+0x922>
	else if (__tmp > 65535)
    1ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    2000:	8f 89       	ldd	r24, Y+23	; 0x17
    2002:	98 8d       	ldd	r25, Y+24	; 0x18
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	3f ef       	ldi	r19, 0xFF	; 255
    2008:	4f e7       	ldi	r20, 0x7F	; 127
    200a:	57 e4       	ldi	r21, 0x47	; 71
    200c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2010:	18 16       	cp	r1, r24
    2012:	4c f5       	brge	.+82     	; 0x2066 <displayTemperature+0x90e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2014:	69 8d       	ldd	r22, Y+25	; 0x19
    2016:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2018:	8b 8d       	ldd	r24, Y+27	; 0x1b
    201a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e2       	ldi	r20, 0x20	; 32
    2022:	51 e4       	ldi	r21, 0x41	; 65
    2024:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9c 8b       	std	Y+20, r25	; 0x14
    203a:	8b 8b       	std	Y+19, r24	; 0x13
    203c:	0f c0       	rjmp	.+30     	; 0x205c <displayTemperature+0x904>
    203e:	84 e6       	ldi	r24, 0x64	; 100
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	9a 8b       	std	Y+18, r25	; 0x12
    2044:	89 8b       	std	Y+17, r24	; 0x11
    2046:	89 89       	ldd	r24, Y+17	; 0x11
    2048:	9a 89       	ldd	r25, Y+18	; 0x12
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <displayTemperature+0x8f2>
    204e:	9a 8b       	std	Y+18, r25	; 0x12
    2050:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2052:	8b 89       	ldd	r24, Y+19	; 0x13
    2054:	9c 89       	ldd	r25, Y+20	; 0x14
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	9c 8b       	std	Y+20, r25	; 0x14
    205a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205c:	8b 89       	ldd	r24, Y+19	; 0x13
    205e:	9c 89       	ldd	r25, Y+20	; 0x14
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	69 f7       	brne	.-38     	; 0x203e <displayTemperature+0x8e6>
    2064:	14 c0       	rjmp	.+40     	; 0x208e <displayTemperature+0x936>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2066:	6d 89       	ldd	r22, Y+21	; 0x15
    2068:	7e 89       	ldd	r23, Y+22	; 0x16
    206a:	8f 89       	ldd	r24, Y+23	; 0x17
    206c:	98 8d       	ldd	r25, Y+24	; 0x18
    206e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9c 8b       	std	Y+20, r25	; 0x14
    2078:	8b 8b       	std	Y+19, r24	; 0x13
    207a:	8b 89       	ldd	r24, Y+19	; 0x13
    207c:	9c 89       	ldd	r25, Y+20	; 0x14
    207e:	98 8b       	std	Y+16, r25	; 0x10
    2080:	8f 87       	std	Y+15, r24	; 0x0f
    2082:	8f 85       	ldd	r24, Y+15	; 0x0f
    2084:	98 89       	ldd	r25, Y+16	; 0x10
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	f1 f7       	brne	.-4      	; 0x2086 <displayTemperature+0x92e>
    208a:	98 8b       	std	Y+16, r25	; 0x10
    208c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(5);

    PORTD = 0x00;
    208e:	e2 e3       	ldi	r30, 0x32	; 50
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	10 82       	st	Z, r1
    PORTC = ssd[12];
    2094:	a5 e3       	ldi	r26, 0x35	; 53
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	fe 01       	movw	r30, r28
    209a:	ec 59       	subi	r30, 0x9C	; 156
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	84 85       	ldd	r24, Z+12	; 0x0c
    20a0:	8c 93       	st	X, r24
    PORTD = (1 << 6);
    20a2:	e2 e3       	ldi	r30, 0x32	; 50
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 e4       	ldi	r24, 0x40	; 64
    20a8:	80 83       	st	Z, r24
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a0 ea       	ldi	r26, 0xA0	; 160
    20b0:	b0 e4       	ldi	r27, 0x40	; 64
    20b2:	8b 87       	std	Y+11, r24	; 0x0b
    20b4:	9c 87       	std	Y+12, r25	; 0x0c
    20b6:	ad 87       	std	Y+13, r26	; 0x0d
    20b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    20bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20be:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	4a e7       	ldi	r20, 0x7A	; 122
    20c8:	54 e4       	ldi	r21, 0x44	; 68
    20ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	8f 83       	std	Y+7, r24	; 0x07
    20d4:	98 87       	std	Y+8, r25	; 0x08
    20d6:	a9 87       	std	Y+9, r26	; 0x09
    20d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20da:	6f 81       	ldd	r22, Y+7	; 0x07
    20dc:	78 85       	ldd	r23, Y+8	; 0x08
    20de:	89 85       	ldd	r24, Y+9	; 0x09
    20e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e8       	ldi	r20, 0x80	; 128
    20e8:	5f e3       	ldi	r21, 0x3F	; 63
    20ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20ee:	88 23       	and	r24, r24
    20f0:	2c f4       	brge	.+10     	; 0x20fc <displayTemperature+0x9a4>
		__ticks = 1;
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	9e 83       	std	Y+6, r25	; 0x06
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	3f c0       	rjmp	.+126    	; 0x217a <displayTemperature+0xa22>
	else if (__tmp > 65535)
    20fc:	6f 81       	ldd	r22, Y+7	; 0x07
    20fe:	78 85       	ldd	r23, Y+8	; 0x08
    2100:	89 85       	ldd	r24, Y+9	; 0x09
    2102:	9a 85       	ldd	r25, Y+10	; 0x0a
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	3f ef       	ldi	r19, 0xFF	; 255
    2108:	4f e7       	ldi	r20, 0x7F	; 127
    210a:	57 e4       	ldi	r21, 0x47	; 71
    210c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2110:	18 16       	cp	r1, r24
    2112:	4c f5       	brge	.+82     	; 0x2166 <displayTemperature+0xa0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2114:	6b 85       	ldd	r22, Y+11	; 0x0b
    2116:	7c 85       	ldd	r23, Y+12	; 0x0c
    2118:	8d 85       	ldd	r24, Y+13	; 0x0d
    211a:	9e 85       	ldd	r25, Y+14	; 0x0e
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e2       	ldi	r20, 0x20	; 32
    2122:	51 e4       	ldi	r21, 0x41	; 65
    2124:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	bc 01       	movw	r22, r24
    212e:	cd 01       	movw	r24, r26
    2130:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9e 83       	std	Y+6, r25	; 0x06
    213a:	8d 83       	std	Y+5, r24	; 0x05
    213c:	0f c0       	rjmp	.+30     	; 0x215c <displayTemperature+0xa04>
    213e:	84 e6       	ldi	r24, 0x64	; 100
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	9c 83       	std	Y+4, r25	; 0x04
    2144:	8b 83       	std	Y+3, r24	; 0x03
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <displayTemperature+0x9f2>
    214e:	9c 83       	std	Y+4, r25	; 0x04
    2150:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	9e 83       	std	Y+6, r25	; 0x06
    215a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215c:	8d 81       	ldd	r24, Y+5	; 0x05
    215e:	9e 81       	ldd	r25, Y+6	; 0x06
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	69 f7       	brne	.-38     	; 0x213e <displayTemperature+0x9e6>
    2164:	14 c0       	rjmp	.+40     	; 0x218e <displayTemperature+0xa36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2166:	6f 81       	ldd	r22, Y+7	; 0x07
    2168:	78 85       	ldd	r23, Y+8	; 0x08
    216a:	89 85       	ldd	r24, Y+9	; 0x09
    216c:	9a 85       	ldd	r25, Y+10	; 0x0a
    216e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	9e 83       	std	Y+6, r25	; 0x06
    2178:	8d 83       	std	Y+5, r24	; 0x05
    217a:	8d 81       	ldd	r24, Y+5	; 0x05
    217c:	9e 81       	ldd	r25, Y+6	; 0x06
    217e:	9a 83       	std	Y+2, r25	; 0x02
    2180:	89 83       	std	Y+1, r24	; 0x01
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	9a 81       	ldd	r25, Y+2	; 0x02
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <displayTemperature+0xa2e>
    218a:	9a 83       	std	Y+2, r25	; 0x02
    218c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
}
    218e:	c6 58       	subi	r28, 0x86	; 134
    2190:	df 4f       	sbci	r29, 0xFF	; 255
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	08 95       	ret

000021a6 <main>:

int main(void)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	ac 97       	sbiw	r28, 0x2c	; 44
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    char msb, lsb;
    DDRC = 0xFF;
    21ba:	e4 e3       	ldi	r30, 0x34	; 52
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	8f ef       	ldi	r24, 0xFF	; 255
    21c0:	80 83       	st	Z, r24
    DDRD = 0xFF;
    21c2:	e1 e3       	ldi	r30, 0x31	; 49
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	8f ef       	ldi	r24, 0xFF	; 255
    21c8:	80 83       	st	Z, r24
    DDRA = 0xFF;
    21ca:	ea e3       	ldi	r30, 0x3A	; 58
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	8f ef       	ldi	r24, 0xFF	; 255
    21d0:	80 83       	st	Z, r24
    masterInit();
    21d2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <masterInit>
    tc72Init();
    21d6:	0e 94 13 0b 	call	0x1626	; 0x1626 <tc72Init>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a6 e1       	ldi	r26, 0x16	; 22
    21e0:	b3 e4       	ldi	r27, 0x43	; 67
    21e2:	8f a3       	std	Y+39, r24	; 0x27
    21e4:	98 a7       	std	Y+40, r25	; 0x28
    21e6:	a9 a7       	std	Y+41, r26	; 0x29
    21e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	6f a1       	ldd	r22, Y+39	; 0x27
    21ec:	78 a5       	ldd	r23, Y+40	; 0x28
    21ee:	89 a5       	ldd	r24, Y+41	; 0x29
    21f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a e7       	ldi	r20, 0x7A	; 122
    21f8:	54 e4       	ldi	r21, 0x44	; 68
    21fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	8b a3       	std	Y+35, r24	; 0x23
    2204:	9c a3       	std	Y+36, r25	; 0x24
    2206:	ad a3       	std	Y+37, r26	; 0x25
    2208:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    220a:	6b a1       	ldd	r22, Y+35	; 0x23
    220c:	7c a1       	ldd	r23, Y+36	; 0x24
    220e:	8d a1       	ldd	r24, Y+37	; 0x25
    2210:	9e a1       	ldd	r25, Y+38	; 0x26
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	2c f4       	brge	.+10     	; 0x222c <main+0x86>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9a a3       	std	Y+34, r25	; 0x22
    2228:	89 a3       	std	Y+33, r24	; 0x21
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <main+0x104>
	else if (__tmp > 65535)
    222c:	6b a1       	ldd	r22, Y+35	; 0x23
    222e:	7c a1       	ldd	r23, Y+36	; 0x24
    2230:	8d a1       	ldd	r24, Y+37	; 0x25
    2232:	9e a1       	ldd	r25, Y+38	; 0x26
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	4c f5       	brge	.+82     	; 0x2296 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	6f a1       	ldd	r22, Y+39	; 0x27
    2246:	78 a5       	ldd	r23, Y+40	; 0x28
    2248:	89 a5       	ldd	r24, Y+41	; 0x29
    224a:	9a a5       	ldd	r25, Y+42	; 0x2a
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9a a3       	std	Y+34, r25	; 0x22
    226a:	89 a3       	std	Y+33, r24	; 0x21
    226c:	0f c0       	rjmp	.+30     	; 0x228c <main+0xe6>
    226e:	84 e6       	ldi	r24, 0x64	; 100
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	98 a3       	std	Y+32, r25	; 0x20
    2274:	8f 8f       	std	Y+31, r24	; 0x1f
    2276:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2278:	98 a1       	ldd	r25, Y+32	; 0x20
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <main+0xd4>
    227e:	98 a3       	std	Y+32, r25	; 0x20
    2280:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	89 a1       	ldd	r24, Y+33	; 0x21
    2284:	9a a1       	ldd	r25, Y+34	; 0x22
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	9a a3       	std	Y+34, r25	; 0x22
    228a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	89 a1       	ldd	r24, Y+33	; 0x21
    228e:	9a a1       	ldd	r25, Y+34	; 0x22
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	69 f7       	brne	.-38     	; 0x226e <main+0xc8>
    2294:	14 c0       	rjmp	.+40     	; 0x22be <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2296:	6b a1       	ldd	r22, Y+35	; 0x23
    2298:	7c a1       	ldd	r23, Y+36	; 0x24
    229a:	8d a1       	ldd	r24, Y+37	; 0x25
    229c:	9e a1       	ldd	r25, Y+38	; 0x26
    229e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9a a3       	std	Y+34, r25	; 0x22
    22a8:	89 a3       	std	Y+33, r24	; 0x21
    22aa:	89 a1       	ldd	r24, Y+33	; 0x21
    22ac:	9a a1       	ldd	r25, Y+34	; 0x22
    22ae:	9e 8f       	std	Y+30, r25	; 0x1e
    22b0:	8d 8f       	std	Y+29, r24	; 0x1d
    22b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <main+0x110>
    22ba:	9e 8f       	std	Y+30, r25	; 0x1e
    22bc:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(150);
    while (1)
    {
        PORTB |= (1 << 4);
    22be:	a8 e3       	ldi	r26, 0x38	; 56
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e8 e3       	ldi	r30, 0x38	; 56
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	80 61       	ori	r24, 0x10	; 16
    22ca:	8c 93       	st	X, r24
        /* Read the MSB */
        masterTransmit(0x02);
    22cc:	82 e0       	ldi	r24, 0x02	; 2
    22ce:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <masterTransmit>
        /* Issue one more clock frame to force data out */
        masterTransmit(0x00);
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <masterTransmit>
        PORTB &= ~(1 << 4);
    22d8:	a8 e3       	ldi	r26, 0x38	; 56
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	e8 e3       	ldi	r30, 0x38	; 56
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	8f 7e       	andi	r24, 0xEF	; 239
    22e4:	8c 93       	st	X, r24
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a0 e8       	ldi	r26, 0x80	; 128
    22ec:	bf e3       	ldi	r27, 0x3F	; 63
    22ee:	89 8f       	std	Y+25, r24	; 0x19
    22f0:	9a 8f       	std	Y+26, r25	; 0x1a
    22f2:	ab 8f       	std	Y+27, r26	; 0x1b
    22f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f6:	69 8d       	ldd	r22, Y+25	; 0x19
    22f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	4a e7       	ldi	r20, 0x7A	; 122
    2304:	54 e4       	ldi	r21, 0x44	; 68
    2306:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	8d 8b       	std	Y+21, r24	; 0x15
    2310:	9e 8b       	std	Y+22, r25	; 0x16
    2312:	af 8b       	std	Y+23, r26	; 0x17
    2314:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2316:	6d 89       	ldd	r22, Y+21	; 0x15
    2318:	7e 89       	ldd	r23, Y+22	; 0x16
    231a:	8f 89       	ldd	r24, Y+23	; 0x17
    231c:	98 8d       	ldd	r25, Y+24	; 0x18
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e8       	ldi	r20, 0x80	; 128
    2324:	5f e3       	ldi	r21, 0x3F	; 63
    2326:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    232a:	88 23       	and	r24, r24
    232c:	2c f4       	brge	.+10     	; 0x2338 <main+0x192>
		__ticks = 1;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	9c 8b       	std	Y+20, r25	; 0x14
    2334:	8b 8b       	std	Y+19, r24	; 0x13
    2336:	3f c0       	rjmp	.+126    	; 0x23b6 <main+0x210>
	else if (__tmp > 65535)
    2338:	6d 89       	ldd	r22, Y+21	; 0x15
    233a:	7e 89       	ldd	r23, Y+22	; 0x16
    233c:	8f 89       	ldd	r24, Y+23	; 0x17
    233e:	98 8d       	ldd	r25, Y+24	; 0x18
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	3f ef       	ldi	r19, 0xFF	; 255
    2344:	4f e7       	ldi	r20, 0x7F	; 127
    2346:	57 e4       	ldi	r21, 0x47	; 71
    2348:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    234c:	18 16       	cp	r1, r24
    234e:	4c f5       	brge	.+82     	; 0x23a2 <main+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2350:	69 8d       	ldd	r22, Y+25	; 0x19
    2352:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2354:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2356:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	40 e2       	ldi	r20, 0x20	; 32
    235e:	51 e4       	ldi	r21, 0x41	; 65
    2360:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	9c 8b       	std	Y+20, r25	; 0x14
    2376:	8b 8b       	std	Y+19, r24	; 0x13
    2378:	0f c0       	rjmp	.+30     	; 0x2398 <main+0x1f2>
    237a:	84 e6       	ldi	r24, 0x64	; 100
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	9a 8b       	std	Y+18, r25	; 0x12
    2380:	89 8b       	std	Y+17, r24	; 0x11
    2382:	89 89       	ldd	r24, Y+17	; 0x11
    2384:	9a 89       	ldd	r25, Y+18	; 0x12
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <main+0x1e0>
    238a:	9a 8b       	std	Y+18, r25	; 0x12
    238c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238e:	8b 89       	ldd	r24, Y+19	; 0x13
    2390:	9c 89       	ldd	r25, Y+20	; 0x14
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	9c 8b       	std	Y+20, r25	; 0x14
    2396:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2398:	8b 89       	ldd	r24, Y+19	; 0x13
    239a:	9c 89       	ldd	r25, Y+20	; 0x14
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	69 f7       	brne	.-38     	; 0x237a <main+0x1d4>
    23a0:	14 c0       	rjmp	.+40     	; 0x23ca <main+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a2:	6d 89       	ldd	r22, Y+21	; 0x15
    23a4:	7e 89       	ldd	r23, Y+22	; 0x16
    23a6:	8f 89       	ldd	r24, Y+23	; 0x17
    23a8:	98 8d       	ldd	r25, Y+24	; 0x18
    23aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	9c 8b       	std	Y+20, r25	; 0x14
    23b4:	8b 8b       	std	Y+19, r24	; 0x13
    23b6:	8b 89       	ldd	r24, Y+19	; 0x13
    23b8:	9c 89       	ldd	r25, Y+20	; 0x14
    23ba:	98 8b       	std	Y+16, r25	; 0x10
    23bc:	8f 87       	std	Y+15, r24	; 0x0f
    23be:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c0:	98 89       	ldd	r25, Y+16	; 0x10
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	f1 f7       	brne	.-4      	; 0x23c2 <main+0x21c>
    23c6:	98 8b       	std	Y+16, r25	; 0x10
    23c8:	8f 87       	std	Y+15, r24	; 0x0f

        _delay_ms(1);
        msb = masterReceive();
    23ca:	0e 94 04 0b 	call	0x1608	; 0x1608 <masterReceive>
    23ce:	8c a7       	std	Y+44, r24	; 0x2c

        PORTB |= (1 << 4);
    23d0:	a8 e3       	ldi	r26, 0x38	; 56
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	e8 e3       	ldi	r30, 0x38	; 56
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	80 61       	ori	r24, 0x10	; 16
    23dc:	8c 93       	st	X, r24
        /* Read The LSB */
        masterTransmit(0x01);
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <masterTransmit>
        /* Issue one more clock frame to force data out */
        masterTransmit(0x00);
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <masterTransmit>
        PORTB &= ~(1 << 4);
    23ea:	a8 e3       	ldi	r26, 0x38	; 56
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e8 e3       	ldi	r30, 0x38	; 56
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	8f 7e       	andi	r24, 0xEF	; 239
    23f6:	8c 93       	st	X, r24
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	a0 e8       	ldi	r26, 0x80	; 128
    23fe:	bf e3       	ldi	r27, 0x3F	; 63
    2400:	8b 87       	std	Y+11, r24	; 0x0b
    2402:	9c 87       	std	Y+12, r25	; 0x0c
    2404:	ad 87       	std	Y+13, r26	; 0x0d
    2406:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2408:	6b 85       	ldd	r22, Y+11	; 0x0b
    240a:	7c 85       	ldd	r23, Y+12	; 0x0c
    240c:	8d 85       	ldd	r24, Y+13	; 0x0d
    240e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	4a e7       	ldi	r20, 0x7A	; 122
    2416:	54 e4       	ldi	r21, 0x44	; 68
    2418:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	8f 83       	std	Y+7, r24	; 0x07
    2422:	98 87       	std	Y+8, r25	; 0x08
    2424:	a9 87       	std	Y+9, r26	; 0x09
    2426:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2428:	6f 81       	ldd	r22, Y+7	; 0x07
    242a:	78 85       	ldd	r23, Y+8	; 0x08
    242c:	89 85       	ldd	r24, Y+9	; 0x09
    242e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e8       	ldi	r20, 0x80	; 128
    2436:	5f e3       	ldi	r21, 0x3F	; 63
    2438:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    243c:	88 23       	and	r24, r24
    243e:	2c f4       	brge	.+10     	; 0x244a <main+0x2a4>
		__ticks = 1;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	9e 83       	std	Y+6, r25	; 0x06
    2446:	8d 83       	std	Y+5, r24	; 0x05
    2448:	3f c0       	rjmp	.+126    	; 0x24c8 <main+0x322>
	else if (__tmp > 65535)
    244a:	6f 81       	ldd	r22, Y+7	; 0x07
    244c:	78 85       	ldd	r23, Y+8	; 0x08
    244e:	89 85       	ldd	r24, Y+9	; 0x09
    2450:	9a 85       	ldd	r25, Y+10	; 0x0a
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	3f ef       	ldi	r19, 0xFF	; 255
    2456:	4f e7       	ldi	r20, 0x7F	; 127
    2458:	57 e4       	ldi	r21, 0x47	; 71
    245a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    245e:	18 16       	cp	r1, r24
    2460:	4c f5       	brge	.+82     	; 0x24b4 <main+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2462:	6b 85       	ldd	r22, Y+11	; 0x0b
    2464:	7c 85       	ldd	r23, Y+12	; 0x0c
    2466:	8d 85       	ldd	r24, Y+13	; 0x0d
    2468:	9e 85       	ldd	r25, Y+14	; 0x0e
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e2       	ldi	r20, 0x20	; 32
    2470:	51 e4       	ldi	r21, 0x41	; 65
    2472:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	9e 83       	std	Y+6, r25	; 0x06
    2488:	8d 83       	std	Y+5, r24	; 0x05
    248a:	0f c0       	rjmp	.+30     	; 0x24aa <main+0x304>
    248c:	84 e6       	ldi	r24, 0x64	; 100
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	9c 83       	std	Y+4, r25	; 0x04
    2492:	8b 83       	std	Y+3, r24	; 0x03
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	9c 81       	ldd	r25, Y+4	; 0x04
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <main+0x2f2>
    249c:	9c 83       	std	Y+4, r25	; 0x04
    249e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a0:	8d 81       	ldd	r24, Y+5	; 0x05
    24a2:	9e 81       	ldd	r25, Y+6	; 0x06
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	9e 83       	std	Y+6, r25	; 0x06
    24a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24aa:	8d 81       	ldd	r24, Y+5	; 0x05
    24ac:	9e 81       	ldd	r25, Y+6	; 0x06
    24ae:	00 97       	sbiw	r24, 0x00	; 0
    24b0:	69 f7       	brne	.-38     	; 0x248c <main+0x2e6>
    24b2:	14 c0       	rjmp	.+40     	; 0x24dc <main+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b4:	6f 81       	ldd	r22, Y+7	; 0x07
    24b6:	78 85       	ldd	r23, Y+8	; 0x08
    24b8:	89 85       	ldd	r24, Y+9	; 0x09
    24ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    24bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9e 83       	std	Y+6, r25	; 0x06
    24c6:	8d 83       	std	Y+5, r24	; 0x05
    24c8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ca:	9e 81       	ldd	r25, Y+6	; 0x06
    24cc:	9a 83       	std	Y+2, r25	; 0x02
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	9a 81       	ldd	r25, Y+2	; 0x02
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <main+0x32e>
    24d8:	9a 83       	std	Y+2, r25	; 0x02
    24da:	89 83       	std	Y+1, r24	; 0x01

        _delay_ms(1);
        lsb = masterReceive();
    24dc:	0e 94 04 0b 	call	0x1608	; 0x1608 <masterReceive>
    24e0:	8b a7       	std	Y+43, r24	; 0x2b
        PORTA = lsb;
    24e2:	eb e3       	ldi	r30, 0x3B	; 59
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    24e8:	80 83       	st	Z, r24
        displayTemperature(msb, lsb);
    24ea:	8c a5       	ldd	r24, Y+44	; 0x2c
    24ec:	6b a5       	ldd	r22, Y+43	; 0x2b
    24ee:	0e 94 ac 0b 	call	0x1758	; 0x1758 <displayTemperature>
    24f2:	e5 ce       	rjmp	.-566    	; 0x22be <main+0x118>

000024f4 <__udivmodqi4>:
    24f4:	99 1b       	sub	r25, r25
    24f6:	79 e0       	ldi	r23, 0x09	; 9
    24f8:	04 c0       	rjmp	.+8      	; 0x2502 <__udivmodqi4_ep>

000024fa <__udivmodqi4_loop>:
    24fa:	99 1f       	adc	r25, r25
    24fc:	96 17       	cp	r25, r22
    24fe:	08 f0       	brcs	.+2      	; 0x2502 <__udivmodqi4_ep>
    2500:	96 1b       	sub	r25, r22

00002502 <__udivmodqi4_ep>:
    2502:	88 1f       	adc	r24, r24
    2504:	7a 95       	dec	r23
    2506:	c9 f7       	brne	.-14     	; 0x24fa <__udivmodqi4_loop>
    2508:	80 95       	com	r24
    250a:	08 95       	ret

0000250c <__divmodhi4>:
    250c:	97 fb       	bst	r25, 7
    250e:	09 2e       	mov	r0, r25
    2510:	07 26       	eor	r0, r23
    2512:	0a d0       	rcall	.+20     	; 0x2528 <__divmodhi4_neg1>
    2514:	77 fd       	sbrc	r23, 7
    2516:	04 d0       	rcall	.+8      	; 0x2520 <__divmodhi4_neg2>
    2518:	0c d0       	rcall	.+24     	; 0x2532 <__udivmodhi4>
    251a:	06 d0       	rcall	.+12     	; 0x2528 <__divmodhi4_neg1>
    251c:	00 20       	and	r0, r0
    251e:	1a f4       	brpl	.+6      	; 0x2526 <__divmodhi4_exit>

00002520 <__divmodhi4_neg2>:
    2520:	70 95       	com	r23
    2522:	61 95       	neg	r22
    2524:	7f 4f       	sbci	r23, 0xFF	; 255

00002526 <__divmodhi4_exit>:
    2526:	08 95       	ret

00002528 <__divmodhi4_neg1>:
    2528:	f6 f7       	brtc	.-4      	; 0x2526 <__divmodhi4_exit>
    252a:	90 95       	com	r25
    252c:	81 95       	neg	r24
    252e:	9f 4f       	sbci	r25, 0xFF	; 255
    2530:	08 95       	ret

00002532 <__udivmodhi4>:
    2532:	aa 1b       	sub	r26, r26
    2534:	bb 1b       	sub	r27, r27
    2536:	51 e1       	ldi	r21, 0x11	; 17
    2538:	07 c0       	rjmp	.+14     	; 0x2548 <__udivmodhi4_ep>

0000253a <__udivmodhi4_loop>:
    253a:	aa 1f       	adc	r26, r26
    253c:	bb 1f       	adc	r27, r27
    253e:	a6 17       	cp	r26, r22
    2540:	b7 07       	cpc	r27, r23
    2542:	10 f0       	brcs	.+4      	; 0x2548 <__udivmodhi4_ep>
    2544:	a6 1b       	sub	r26, r22
    2546:	b7 0b       	sbc	r27, r23

00002548 <__udivmodhi4_ep>:
    2548:	88 1f       	adc	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	5a 95       	dec	r21
    254e:	a9 f7       	brne	.-22     	; 0x253a <__udivmodhi4_loop>
    2550:	80 95       	com	r24
    2552:	90 95       	com	r25
    2554:	bc 01       	movw	r22, r24
    2556:	cd 01       	movw	r24, r26
    2558:	08 95       	ret

0000255a <__prologue_saves__>:
    255a:	2f 92       	push	r2
    255c:	3f 92       	push	r3
    255e:	4f 92       	push	r4
    2560:	5f 92       	push	r5
    2562:	6f 92       	push	r6
    2564:	7f 92       	push	r7
    2566:	8f 92       	push	r8
    2568:	9f 92       	push	r9
    256a:	af 92       	push	r10
    256c:	bf 92       	push	r11
    256e:	cf 92       	push	r12
    2570:	df 92       	push	r13
    2572:	ef 92       	push	r14
    2574:	ff 92       	push	r15
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	ca 1b       	sub	r28, r26
    2584:	db 0b       	sbc	r29, r27
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	09 94       	ijmp

00002592 <__epilogue_restores__>:
    2592:	2a 88       	ldd	r2, Y+18	; 0x12
    2594:	39 88       	ldd	r3, Y+17	; 0x11
    2596:	48 88       	ldd	r4, Y+16	; 0x10
    2598:	5f 84       	ldd	r5, Y+15	; 0x0f
    259a:	6e 84       	ldd	r6, Y+14	; 0x0e
    259c:	7d 84       	ldd	r7, Y+13	; 0x0d
    259e:	8c 84       	ldd	r8, Y+12	; 0x0c
    25a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    25a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    25a4:	b9 84       	ldd	r11, Y+9	; 0x09
    25a6:	c8 84       	ldd	r12, Y+8	; 0x08
    25a8:	df 80       	ldd	r13, Y+7	; 0x07
    25aa:	ee 80       	ldd	r14, Y+6	; 0x06
    25ac:	fd 80       	ldd	r15, Y+5	; 0x05
    25ae:	0c 81       	ldd	r16, Y+4	; 0x04
    25b0:	1b 81       	ldd	r17, Y+3	; 0x03
    25b2:	aa 81       	ldd	r26, Y+2	; 0x02
    25b4:	b9 81       	ldd	r27, Y+1	; 0x01
    25b6:	ce 0f       	add	r28, r30
    25b8:	d1 1d       	adc	r29, r1
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	f8 94       	cli
    25be:	de bf       	out	0x3e, r29	; 62
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	cd bf       	out	0x3d, r28	; 61
    25c4:	ed 01       	movw	r28, r26
    25c6:	08 95       	ret

000025c8 <_exit>:
    25c8:	f8 94       	cli

000025ca <__stop_program>:
    25ca:	ff cf       	rjmp	.-2      	; 0x25ca <__stop_program>
