
motors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000528  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000756  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  64:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <right>:
#define MOTOR1_PIN1 PD0
#define MOTOR1_PIN2 PD1
#define MOTOR2_PIN1 PD2
#define MOTOR2_PIN2 PD3

void right() {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
    PORTD &= ~(1 << MOTOR1_PIN1);
  74:	a2 e3       	ldi	r26, 0x32	; 50
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e2 e3       	ldi	r30, 0x32	; 50
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8e 7f       	andi	r24, 0xFE	; 254
  80:	8c 93       	st	X, r24
    PORTD |= (1 << MOTOR1_PIN2);
  82:	a2 e3       	ldi	r26, 0x32	; 50
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e2 e3       	ldi	r30, 0x32	; 50
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	8c 93       	st	X, r24
    PORTD |= (1 << MOTOR2_PIN1);
  90:	a2 e3       	ldi	r26, 0x32	; 50
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e2 e3       	ldi	r30, 0x32	; 50
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	8c 93       	st	X, r24
    PORTD &= ~(1 << MOTOR2_PIN2);
  9e:	a2 e3       	ldi	r26, 0x32	; 50
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e2 e3       	ldi	r30, 0x32	; 50
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	8c 93       	st	X, r24
}
  ac:	cf 91       	pop	r28
  ae:	df 91       	pop	r29
  b0:	08 95       	ret

000000b2 <left>:

void left() {
  b2:	df 93       	push	r29
  b4:	cf 93       	push	r28
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
    PORTD |= (1 << MOTOR1_PIN1);
  ba:	a2 e3       	ldi	r26, 0x32	; 50
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e2 e3       	ldi	r30, 0x32	; 50
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	8c 93       	st	X, r24
    PORTD &= ~(1 << MOTOR1_PIN2);
  c8:	a2 e3       	ldi	r26, 0x32	; 50
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e2 e3       	ldi	r30, 0x32	; 50
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8d 7f       	andi	r24, 0xFD	; 253
  d4:	8c 93       	st	X, r24
    PORTD &= ~(1 << MOTOR2_PIN1);
  d6:	a2 e3       	ldi	r26, 0x32	; 50
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	e2 e3       	ldi	r30, 0x32	; 50
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8b 7f       	andi	r24, 0xFB	; 251
  e2:	8c 93       	st	X, r24
    PORTD |= (1 << MOTOR2_PIN2);
  e4:	a2 e3       	ldi	r26, 0x32	; 50
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e2 e3       	ldi	r30, 0x32	; 50
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	8c 93       	st	X, r24
}
  f2:	cf 91       	pop	r28
  f4:	df 91       	pop	r29
  f6:	08 95       	ret

000000f8 <forward>:

void forward() {
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
    PORTD |= (1 << MOTOR1_PIN1);
 100:	a2 e3       	ldi	r26, 0x32	; 50
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	e2 e3       	ldi	r30, 0x32	; 50
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	8c 93       	st	X, r24
    PORTD &= ~(1 << MOTOR1_PIN2);
 10e:	a2 e3       	ldi	r26, 0x32	; 50
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e2 e3       	ldi	r30, 0x32	; 50
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	8c 93       	st	X, r24
    PORTD |= (1 << MOTOR2_PIN1);
 11c:	a2 e3       	ldi	r26, 0x32	; 50
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	e2 e3       	ldi	r30, 0x32	; 50
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	84 60       	ori	r24, 0x04	; 4
 128:	8c 93       	st	X, r24
    PORTD &= ~(1 << MOTOR2_PIN2);
 12a:	a2 e3       	ldi	r26, 0x32	; 50
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	e2 e3       	ldi	r30, 0x32	; 50
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	87 7f       	andi	r24, 0xF7	; 247
 136:	8c 93       	st	X, r24
}
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	08 95       	ret

0000013e <backward>:

void backward() {
 13e:	df 93       	push	r29
 140:	cf 93       	push	r28
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
    PORTD &= ~(1 << MOTOR1_PIN1);
 146:	a2 e3       	ldi	r26, 0x32	; 50
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	e2 e3       	ldi	r30, 0x32	; 50
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	8e 7f       	andi	r24, 0xFE	; 254
 152:	8c 93       	st	X, r24
    PORTD |= (1 << MOTOR1_PIN2);
 154:	a2 e3       	ldi	r26, 0x32	; 50
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	e2 e3       	ldi	r30, 0x32	; 50
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	8c 93       	st	X, r24
    PORTD &= ~(1 << MOTOR2_PIN1);
 162:	a2 e3       	ldi	r26, 0x32	; 50
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	e2 e3       	ldi	r30, 0x32	; 50
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	8b 7f       	andi	r24, 0xFB	; 251
 16e:	8c 93       	st	X, r24
    PORTD |= (1 << MOTOR2_PIN2);
 170:	a2 e3       	ldi	r26, 0x32	; 50
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	e2 e3       	ldi	r30, 0x32	; 50
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	8c 93       	st	X, r24
}
 17e:	cf 91       	pop	r28
 180:	df 91       	pop	r29
 182:	08 95       	ret

00000184 <stop>:

void stop() {
 184:	df 93       	push	r29
 186:	cf 93       	push	r28
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
    PORTD &= ~(1 << MOTOR1_PIN1);
 18c:	a2 e3       	ldi	r26, 0x32	; 50
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	e2 e3       	ldi	r30, 0x32	; 50
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8e 7f       	andi	r24, 0xFE	; 254
 198:	8c 93       	st	X, r24
    PORTD &= ~(1 << MOTOR1_PIN2);
 19a:	a2 e3       	ldi	r26, 0x32	; 50
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	e2 e3       	ldi	r30, 0x32	; 50
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	8d 7f       	andi	r24, 0xFD	; 253
 1a6:	8c 93       	st	X, r24
    PORTD &= ~(1 << MOTOR2_PIN1);
 1a8:	a2 e3       	ldi	r26, 0x32	; 50
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	e2 e3       	ldi	r30, 0x32	; 50
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	8c 93       	st	X, r24
    PORTD &= ~(1 << MOTOR2_PIN2);
 1b6:	a2 e3       	ldi	r26, 0x32	; 50
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	e2 e3       	ldi	r30, 0x32	; 50
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	87 7f       	andi	r24, 0xF7	; 247
 1c2:	8c 93       	st	X, r24
}
 1c4:	cf 91       	pop	r28
 1c6:	df 91       	pop	r29
 1c8:	08 95       	ret

000001ca <main>:

int main(void) {
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
    // Configure Port A as input for switches
    DDRA = 0x00; // All pins in Port A as input
 1d2:	ea e3       	ldi	r30, 0x3A	; 58
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	10 82       	st	Z, r1
    // Enable pull-up resistors for switches
    PORTA = (1 << RIGHT_BUTTON) | (1 << LEFT_BUTTON) | (1 << FORWARD_BUTTON) | (1 << BACKWARD_BUTTON) | (1 << STOP_BUTTON);
 1d8:	eb e3       	ldi	r30, 0x3B	; 59
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	8f e1       	ldi	r24, 0x1F	; 31
 1de:	80 83       	st	Z, r24

    // Configure Port D as output for motors
    DDRD = (1 << MOTOR1_PIN1) | (1 << MOTOR1_PIN2) | (1 << MOTOR2_PIN1) | (1 << MOTOR2_PIN2);
 1e0:	e1 e3       	ldi	r30, 0x31	; 49
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	8f e0       	ldi	r24, 0x0F	; 15
 1e6:	80 83       	st	Z, r24

    while (1) {
        // Check button states
        if ((PINA & (1 << RIGHT_BUTTON)) == 0) {
 1e8:	e9 e3       	ldi	r30, 0x39	; 57
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	88 2f       	mov	r24, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	81 70       	andi	r24, 0x01	; 1
 1f4:	90 70       	andi	r25, 0x00	; 0
 1f6:	00 97       	sbiw	r24, 0x00	; 0
 1f8:	19 f4       	brne	.+6      	; 0x200 <main+0x36>
            right();
 1fa:	0e 94 36 00 	call	0x6c	; 0x6c <right>
 1fe:	f4 cf       	rjmp	.-24     	; 0x1e8 <main+0x1e>
        } else if ((PINA & (1 << LEFT_BUTTON)) == 0) {
 200:	e9 e3       	ldi	r30, 0x39	; 57
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	88 2f       	mov	r24, r24
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	82 70       	andi	r24, 0x02	; 2
 20c:	90 70       	andi	r25, 0x00	; 0
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	19 f4       	brne	.+6      	; 0x218 <main+0x4e>
            left();
 212:	0e 94 59 00 	call	0xb2	; 0xb2 <left>
 216:	e8 cf       	rjmp	.-48     	; 0x1e8 <main+0x1e>
        } else if ((PINA & (1 << FORWARD_BUTTON)) == 0) {
 218:	e9 e3       	ldi	r30, 0x39	; 57
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 2f       	mov	r24, r24
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	84 70       	andi	r24, 0x04	; 4
 224:	90 70       	andi	r25, 0x00	; 0
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	19 f4       	brne	.+6      	; 0x230 <main+0x66>
            forward();
 22a:	0e 94 7c 00 	call	0xf8	; 0xf8 <forward>
 22e:	dc cf       	rjmp	.-72     	; 0x1e8 <main+0x1e>
        } else if ((PINA & (1 << BACKWARD_BUTTON)) == 0) {
 230:	e9 e3       	ldi	r30, 0x39	; 57
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	88 2f       	mov	r24, r24
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	88 70       	andi	r24, 0x08	; 8
 23c:	90 70       	andi	r25, 0x00	; 0
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	19 f4       	brne	.+6      	; 0x248 <main+0x7e>
            backward();
 242:	0e 94 9f 00 	call	0x13e	; 0x13e <backward>
 246:	d0 cf       	rjmp	.-96     	; 0x1e8 <main+0x1e>
        } else if ((PINA & (1 << STOP_BUTTON)) == 0) {
 248:	e9 e3       	ldi	r30, 0x39	; 57
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	88 2f       	mov	r24, r24
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	80 71       	andi	r24, 0x10	; 16
 254:	90 70       	andi	r25, 0x00	; 0
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	39 f6       	brne	.-114    	; 0x1e8 <main+0x1e>
            stop();
 25a:	0e 94 c2 00 	call	0x184	; 0x184 <stop>
 25e:	c4 cf       	rjmp	.-120    	; 0x1e8 <main+0x1e>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
