
task_15.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c58  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002a  00800060  00800060  00001ccc  2**0
                  ALLOC
  2 .stab         000021cc  00000000  00000000  00001ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001265  00000000  00000000  00003e98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__vector_4>
      14:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__vector_5>
      18:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__vector_6>
      1c:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__vector_7>
      20:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__vector_8>
      24:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__vector_9>
      28:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <__vector_10>
      2c:	0c 94 25 0c 	jmp	0x184a	; 0x184a <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_16>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 38       	cpi	r26, 0x8A	; 138
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <main>
      74:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_voidInit>:
static u8 ADC_u8State= IDLE ;

//=====================================================================================================================

void ADC_voidInit(void)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
	#if ADC_VREF == AREF
		CLR_BIT(ADMUX , ADMUX_REFS0) ;
		CLR_BIT(ADMUX , ADMUX_REFS1) ;

	#elif ADC_VREF == AVCC
		SET_BIT(ADMUX , ADMUX_REFS0) ;
      84:	a7 e2       	ldi	r26, 0x27	; 39
      86:	b0 e0       	ldi	r27, 0x00	; 0
      88:	e7 e2       	ldi	r30, 0x27	; 39
      8a:	f0 e0       	ldi	r31, 0x00	; 0
      8c:	80 81       	ld	r24, Z
      8e:	80 64       	ori	r24, 0x40	; 64
      90:	8c 93       	st	X, r24
		CLR_BIT(ADMUX , ADMUX_REFS1) ;
      92:	a7 e2       	ldi	r26, 0x27	; 39
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	e7 e2       	ldi	r30, 0x27	; 39
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	80 81       	ld	r24, Z
      9c:	8f 77       	andi	r24, 0x7F	; 127
      9e:	8c 93       	st	X, r24
	#endif


	/*Set Left Adjust Result*/
	#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
			CLR_BIT(ADMUX , ADMUX_ADLAR) ;
      a0:	a7 e2       	ldi	r26, 0x27	; 39
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	e7 e2       	ldi	r30, 0x27	; 39
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	80 81       	ld	r24, Z
      aa:	8f 7d       	andi	r24, 0xDF	; 223
      ac:	8c 93       	st	X, r24
		#error "Wrong ADC_ADJUSTMENT config"
	
	#endif 

	/*Set Prescaler Value*/
	ADSAR &= ADC_PRE_MASK ;
      ae:	a6 e2       	ldi	r26, 0x26	; 38
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	e6 e2       	ldi	r30, 0x26	; 38
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	88 7f       	andi	r24, 0xF8	; 248
      ba:	8c 93       	st	X, r24
	ADSAR |= ADC_PRESCALLER ;
      bc:	a6 e2       	ldi	r26, 0x26	; 38
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	e6 e2       	ldi	r30, 0x26	; 38
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	87 60       	ori	r24, 0x07	; 7
      c8:	8c 93       	st	X, r24
	
	/*Enable ADC Peripheral*/
	#if ADC_STATUS == ADC_DISABLE
		CLR_BIT(ADSAR , ADSAR_ADEN) ;
	#elif ADC_STATUS == ADC_ENABLE
		SET_BIT(ADSAR , ADSAR_ADEN) ;
      ca:	a6 e2       	ldi	r26, 0x26	; 38
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	e6 e2       	ldi	r30, 0x26	; 38
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	80 68       	ori	r24, 0x80	; 128
      d6:	8c 93       	st	X, r24

	/*Enable ADC Interrupt*/
	#if INT_STATUS == INT_DISABLE
		CLR_BIT(ADSAR , ADSAR_ADIE) ;
	#elif INT_STATUS == INT_ENABLE
		SET_BIT(ADSAR , ADSAR_ADIE) ;
      d8:	a6 e2       	ldi	r26, 0x26	; 38
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	e6 e2       	ldi	r30, 0x26	; 38
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	88 60       	ori	r24, 0x08	; 8
      e4:	8c 93       	st	X, r24
	#else
	#error "Wrong INT_STATUS config"
	#endif 

}
      e6:	cf 91       	pop	r28
      e8:	df 91       	pop	r29
      ea:	08 95       	ret

000000ec <ADC_voidEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidEnable (void)
{
      ec:	df 93       	push	r29
      ee:	cf 93       	push	r28
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADSAR , ADSAR_ADEN) ;
      f4:	a6 e2       	ldi	r26, 0x26	; 38
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e6 e2       	ldi	r30, 0x26	; 38
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	80 68       	ori	r24, 0x80	; 128
     100:	8c 93       	st	X, r24
}
     102:	cf 91       	pop	r28
     104:	df 91       	pop	r29
     106:	08 95       	ret

00000108 <ADC_voidDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidDisable (void)
{
     108:	df 93       	push	r29
     10a:	cf 93       	push	r28
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADSAR , ADSAR_ADEN) ;
     110:	a6 e2       	ldi	r26, 0x26	; 38
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	e6 e2       	ldi	r30, 0x26	; 38
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 81       	ld	r24, Z
     11a:	8f 77       	andi	r24, 0x7F	; 127
     11c:	8c 93       	st	X, r24
}
     11e:	cf 91       	pop	r28
     120:	df 91       	pop	r29
     122:	08 95       	ret

00000124 <ADC_voidInterruptEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidInterruptEnable (void)
{
     124:	df 93       	push	r29
     126:	cf 93       	push	r28
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADSAR , ADSAR_ADIE) ;
     12c:	a6 e2       	ldi	r26, 0x26	; 38
     12e:	b0 e0       	ldi	r27, 0x00	; 0
     130:	e6 e2       	ldi	r30, 0x26	; 38
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	88 60       	ori	r24, 0x08	; 8
     138:	8c 93       	st	X, r24
}
     13a:	cf 91       	pop	r28
     13c:	df 91       	pop	r29
     13e:	08 95       	ret

00000140 <ADC_voidInterruptDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidInterruptDisable (void)
{
     140:	df 93       	push	r29
     142:	cf 93       	push	r28
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADSAR , ADSAR_ADIE) ;
     148:	a6 e2       	ldi	r26, 0x26	; 38
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	e6 e2       	ldi	r30, 0x26	; 38
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	87 7f       	andi	r24, 0xF7	; 247
     154:	8c 93       	st	X, r24
}
     156:	cf 91       	pop	r28
     158:	df 91       	pop	r29
     15a:	08 95       	ret

0000015c <ADC_u8SetPrescaler>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 ADC_u8SetPrescaler (u8 Copy_u8Prescaler)
{
     15c:	df 93       	push	r29
     15e:	cf 93       	push	r28
     160:	00 d0       	rcall	.+0      	; 0x162 <ADC_u8SetPrescaler+0x6>
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
     166:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
     168:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Prescaler < 8)
     16a:	8a 81       	ldd	r24, Y+2	; 0x02
     16c:	88 30       	cpi	r24, 0x08	; 8
     16e:	78 f4       	brcc	.+30     	; 0x18e <ADC_u8SetPrescaler+0x32>
	{
		/*Set Prescaler Value*/
		ADSAR &= ADC_PRE_MASK ;
     170:	a6 e2       	ldi	r26, 0x26	; 38
     172:	b0 e0       	ldi	r27, 0x00	; 0
     174:	e6 e2       	ldi	r30, 0x26	; 38
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 81       	ld	r24, Z
     17a:	88 7f       	andi	r24, 0xF8	; 248
     17c:	8c 93       	st	X, r24
		ADSAR |= Copy_u8Prescaler ;
     17e:	a6 e2       	ldi	r26, 0x26	; 38
     180:	b0 e0       	ldi	r27, 0x00	; 0
     182:	e6 e2       	ldi	r30, 0x26	; 38
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	90 81       	ld	r25, Z
     188:	8a 81       	ldd	r24, Y+2	; 0x02
     18a:	89 2b       	or	r24, r25
     18c:	8c 93       	st	X, r24
	}

	return Local_u8ErrorState ;
     18e:	89 81       	ldd	r24, Y+1	; 0x01
}
     190:	0f 90       	pop	r0
     192:	0f 90       	pop	r0
     194:	cf 91       	pop	r28
     196:	df 91       	pop	r29
     198:	08 95       	ret

0000019a <ADC_u8GetResultSync>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 ADC_u8GetResultSync (u8 Copy_u8Channel , u16 * Copy_pu16Result)
{
     19a:	df 93       	push	r29
     19c:	cf 93       	push	r28
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	28 97       	sbiw	r28, 0x08	; 8
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	f8 94       	cli
     1a8:	de bf       	out	0x3e, r29	; 62
     1aa:	0f be       	out	0x3f, r0	; 63
     1ac:	cd bf       	out	0x3d, r28	; 61
     1ae:	8e 83       	std	Y+6, r24	; 0x06
     1b0:	78 87       	std	Y+8, r23	; 0x08
     1b2:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = OK ;
     1b4:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32TimeoutCounter = 0 ;
     1b6:	19 82       	std	Y+1, r1	; 0x01
     1b8:	1a 82       	std	Y+2, r1	; 0x02
     1ba:	1b 82       	std	Y+3, r1	; 0x03
     1bc:	1c 82       	std	Y+4, r1	; 0x04
	if (Copy_pu16Result != NULL)
     1be:	8f 81       	ldd	r24, Y+7	; 0x07
     1c0:	98 85       	ldd	r25, Y+8	; 0x08
     1c2:	00 97       	sbiw	r24, 0x00	; 0
     1c4:	09 f4       	brne	.+2      	; 0x1c8 <ADC_u8GetResultSync+0x2e>
     1c6:	75 c0       	rjmp	.+234    	; 0x2b2 <ADC_u8GetResultSync+0x118>
	{
		if (ADC_u8State == IDLE)
     1c8:	80 91 64 00 	lds	r24, 0x0064
     1cc:	88 23       	and	r24, r24
     1ce:	09 f0       	breq	.+2      	; 0x1d2 <ADC_u8GetResultSync+0x38>
     1d0:	6d c0       	rjmp	.+218    	; 0x2ac <ADC_u8GetResultSync+0x112>
		{
			/*ADC is now Busy*/
			ADC_u8State = BUSY ;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	80 93 64 00 	sts	0x0064, r24

			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
     1d8:	a7 e2       	ldi	r26, 0x27	; 39
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	e7 e2       	ldi	r30, 0x27	; 39
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	80 7e       	andi	r24, 0xE0	; 224
     1e4:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel ;
     1e6:	a7 e2       	ldi	r26, 0x27	; 39
     1e8:	b0 e0       	ldi	r27, 0x00	; 0
     1ea:	e7 e2       	ldi	r30, 0x27	; 39
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	90 81       	ld	r25, Z
     1f0:	8e 81       	ldd	r24, Y+6	; 0x06
     1f2:	89 2b       	or	r24, r25
     1f4:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
     1f6:	a6 e2       	ldi	r26, 0x26	; 38
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	e6 e2       	ldi	r30, 0x26	; 38
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	80 64       	ori	r24, 0x40	; 64
     202:	8c 93       	st	X, r24
     204:	0b c0       	rjmp	.+22     	; 0x21c <ADC_u8GetResultSync+0x82>

			/*Waiting until the conversion is complete*/
			while (((GET_BIT(ADSAR , ADSAR_ADIF)) == 0) && (Local_u32TimeoutCounter < ADC_TIMEOUT))
			{
				Local_u32TimeoutCounter++ ;
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	9a 81       	ldd	r25, Y+2	; 0x02
     20a:	ab 81       	ldd	r26, Y+3	; 0x03
     20c:	bc 81       	ldd	r27, Y+4	; 0x04
     20e:	01 96       	adiw	r24, 0x01	; 1
     210:	a1 1d       	adc	r26, r1
     212:	b1 1d       	adc	r27, r1
     214:	89 83       	std	Y+1, r24	; 0x01
     216:	9a 83       	std	Y+2, r25	; 0x02
     218:	ab 83       	std	Y+3, r26	; 0x03
     21a:	bc 83       	std	Y+4, r27	; 0x04

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;

			/*Waiting until the conversion is complete*/
			while (((GET_BIT(ADSAR , ADSAR_ADIF)) == 0) && (Local_u32TimeoutCounter < ADC_TIMEOUT))
     21c:	e6 e2       	ldi	r30, 0x26	; 38
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	88 2f       	mov	r24, r24
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	80 71       	andi	r24, 0x10	; 16
     228:	90 70       	andi	r25, 0x00	; 0
     22a:	95 95       	asr	r25
     22c:	87 95       	ror	r24
     22e:	95 95       	asr	r25
     230:	87 95       	ror	r24
     232:	95 95       	asr	r25
     234:	87 95       	ror	r24
     236:	95 95       	asr	r25
     238:	87 95       	ror	r24
     23a:	00 97       	sbiw	r24, 0x00	; 0
     23c:	61 f4       	brne	.+24     	; 0x256 <ADC_u8GetResultSync+0xbc>
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	9a 81       	ldd	r25, Y+2	; 0x02
     242:	ab 81       	ldd	r26, Y+3	; 0x03
     244:	bc 81       	ldd	r27, Y+4	; 0x04
     246:	80 35       	cpi	r24, 0x50	; 80
     248:	23 ec       	ldi	r18, 0xC3	; 195
     24a:	92 07       	cpc	r25, r18
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	a2 07       	cpc	r26, r18
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	b2 07       	cpc	r27, r18
     254:	c0 f2       	brcs	.-80     	; 0x206 <ADC_u8GetResultSync+0x6c>
			{
				Local_u32TimeoutCounter++ ;
			}
			if (Local_u32TimeoutCounter == ADC_TIMEOUT)
     256:	89 81       	ldd	r24, Y+1	; 0x01
     258:	9a 81       	ldd	r25, Y+2	; 0x02
     25a:	ab 81       	ldd	r26, Y+3	; 0x03
     25c:	bc 81       	ldd	r27, Y+4	; 0x04
     25e:	80 35       	cpi	r24, 0x50	; 80
     260:	23 ec       	ldi	r18, 0xC3	; 195
     262:	92 07       	cpc	r25, r18
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	a2 07       	cpc	r26, r18
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	b2 07       	cpc	r27, r18
     26c:	19 f4       	brne	.+6      	; 0x274 <ADC_u8GetResultSync+0xda>
			{
				Local_u8ErrorState = TIMEOUT_STATE ;
     26e:	84 e0       	ldi	r24, 0x04	; 4
     270:	8d 83       	std	Y+5, r24	; 0x05
     272:	19 c0       	rjmp	.+50     	; 0x2a6 <ADC_u8GetResultSync+0x10c>
			}
			else
			{
				/*Clear the interrupt flag*/
				SET_BIT(ADSAR , ADSAR_ADIF) ;
     274:	a6 e2       	ldi	r26, 0x26	; 38
     276:	b0 e0       	ldi	r27, 0x00	; 0
     278:	e6 e2       	ldi	r30, 0x26	; 38
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	80 61       	ori	r24, 0x10	; 16
     280:	8c 93       	st	X, r24

				/*Return Conversion Result*/
				#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
					*Copy_pu16Result = (ADCL|(ADCH << 8))  ;
     282:	e4 e2       	ldi	r30, 0x24	; 36
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	28 2f       	mov	r18, r24
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	e5 e2       	ldi	r30, 0x25	; 37
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	88 2f       	mov	r24, r24
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	98 2f       	mov	r25, r24
     298:	88 27       	eor	r24, r24
     29a:	82 2b       	or	r24, r18
     29c:	93 2b       	or	r25, r19
     29e:	ef 81       	ldd	r30, Y+7	; 0x07
     2a0:	f8 85       	ldd	r31, Y+8	; 0x08
     2a2:	91 83       	std	Z+1, r25	; 0x01
     2a4:	80 83       	st	Z, r24

				#endif
			}

			/*ADC is IDLE*/
			ADC_u8State = IDLE ;
     2a6:	10 92 64 00 	sts	0x0064, r1
     2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <ADC_u8GetResultSync+0x11c>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE ;
     2ac:	83 e0       	ldi	r24, 0x03	; 3
     2ae:	8d 83       	std	Y+5, r24	; 0x05
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <ADC_u8GetResultSync+0x11c>


	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u8ErrorState ;
     2b6:	8d 81       	ldd	r24, Y+5	; 0x05
}
     2b8:	28 96       	adiw	r28, 0x08	; 8
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	de bf       	out	0x3e, r29	; 62
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	cd bf       	out	0x3d, r28	; 61
     2c4:	cf 91       	pop	r28
     2c6:	df 91       	pop	r29
     2c8:	08 95       	ret

000002ca <ADC_u8StartConversionAsynch>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 ADC_u8StartConversionAsynch (u8 Copy_u8Channel , u16 * Copy_pu16Result , void (*Copy_pvNotificationFunc)(void))
{
     2ca:	df 93       	push	r29
     2cc:	cf 93       	push	r28
     2ce:	00 d0       	rcall	.+0      	; 0x2d0 <ADC_u8StartConversionAsynch+0x6>
     2d0:	00 d0       	rcall	.+0      	; 0x2d2 <ADC_u8StartConversionAsynch+0x8>
     2d2:	00 d0       	rcall	.+0      	; 0x2d4 <ADC_u8StartConversionAsynch+0xa>
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	8a 83       	std	Y+2, r24	; 0x02
     2da:	7c 83       	std	Y+4, r23	; 0x04
     2dc:	6b 83       	std	Y+3, r22	; 0x03
     2de:	5e 83       	std	Y+6, r21	; 0x06
     2e0:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK ;
     2e2:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
     2e4:	8b 81       	ldd	r24, Y+3	; 0x03
     2e6:	9c 81       	ldd	r25, Y+4	; 0x04
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	d1 f1       	breq	.+116    	; 0x360 <ADC_u8StartConversionAsynch+0x96>
     2ec:	8d 81       	ldd	r24, Y+5	; 0x05
     2ee:	9e 81       	ldd	r25, Y+6	; 0x06
     2f0:	00 97       	sbiw	r24, 0x00	; 0
     2f2:	b1 f1       	breq	.+108    	; 0x360 <ADC_u8StartConversionAsynch+0x96>
	{
		if (ADC_u8State == IDLE)
     2f4:	80 91 64 00 	lds	r24, 0x0064
     2f8:	88 23       	and	r24, r24
     2fa:	79 f5       	brne	.+94     	; 0x35a <ADC_u8StartConversionAsynch+0x90>
		{
			/*ADC is now Busy*/
			ADC_u8State = BUSY ;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	80 93 64 00 	sts	0x0064, r24

			/*Set ISR State*/
			ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH ;
     302:	10 92 65 00 	sts	0x0065, r1

			/*Initialize the global result pointer*/
			ADC_pu16AsynchConversionResult = Copy_pu16Result;
     306:	8b 81       	ldd	r24, Y+3	; 0x03
     308:	9c 81       	ldd	r25, Y+4	; 0x04
     30a:	90 93 61 00 	sts	0x0061, r25
     30e:	80 93 60 00 	sts	0x0060, r24

			/*Initialize the global notification function pointer*/
			ADC_pvNotificationFunc= Copy_pvNotificationFunc;
     312:	8d 81       	ldd	r24, Y+5	; 0x05
     314:	9e 81       	ldd	r25, Y+6	; 0x06
     316:	90 93 63 00 	sts	0x0063, r25
     31a:	80 93 62 00 	sts	0x0062, r24

			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
     31e:	a7 e2       	ldi	r26, 0x27	; 39
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	e7 e2       	ldi	r30, 0x27	; 39
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	80 7e       	andi	r24, 0xE0	; 224
     32a:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel ;
     32c:	a7 e2       	ldi	r26, 0x27	; 39
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	e7 e2       	ldi	r30, 0x27	; 39
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	90 81       	ld	r25, Z
     336:	8a 81       	ldd	r24, Y+2	; 0x02
     338:	89 2b       	or	r24, r25
     33a:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
     33c:	a6 e2       	ldi	r26, 0x26	; 38
     33e:	b0 e0       	ldi	r27, 0x00	; 0
     340:	e6 e2       	ldi	r30, 0x26	; 38
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	80 64       	ori	r24, 0x40	; 64
     348:	8c 93       	st	X, r24

			/*ADC Conversion Complete Interrupt Enable*/
			SET_BIT(ADSAR , ADSAR_ADIE) ;
     34a:	a6 e2       	ldi	r26, 0x26	; 38
     34c:	b0 e0       	ldi	r27, 0x00	; 0
     34e:	e6 e2       	ldi	r30, 0x26	; 38
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	80 81       	ld	r24, Z
     354:	88 60       	ori	r24, 0x08	; 8
     356:	8c 93       	st	X, r24
     358:	05 c0       	rjmp	.+10     	; 0x364 <ADC_u8StartConversionAsynch+0x9a>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE ;
     35a:	83 e0       	ldi	r24, 0x03	; 3
     35c:	89 83       	std	Y+1, r24	; 0x01
     35e:	02 c0       	rjmp	.+4      	; 0x364 <ADC_u8StartConversionAsynch+0x9a>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
     364:	89 81       	ldd	r24, Y+1	; 0x01
}
     366:	26 96       	adiw	r28, 0x06	; 6
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	de bf       	out	0x3e, r29	; 62
     36e:	0f be       	out	0x3f, r0	; 63
     370:	cd bf       	out	0x3d, r28	; 61
     372:	cf 91       	pop	r28
     374:	df 91       	pop	r29
     376:	08 95       	ret

00000378 <ADC_u8StartChainAsynch>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 ADC_u8StartChainAsynch (Chain_t * Copy_Chain)
{
     378:	df 93       	push	r29
     37a:	cf 93       	push	r28
     37c:	00 d0       	rcall	.+0      	; 0x37e <ADC_u8StartChainAsynch+0x6>
     37e:	0f 92       	push	r0
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
     384:	9b 83       	std	Y+3, r25	; 0x03
     386:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK ;
     388:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result))
     38a:	8a 81       	ldd	r24, Y+2	; 0x02
     38c:	9b 81       	ldd	r25, Y+3	; 0x03
     38e:	00 97       	sbiw	r24, 0x00	; 0
     390:	09 f4       	brne	.+2      	; 0x394 <ADC_u8StartChainAsynch+0x1c>
     392:	6b c0       	rjmp	.+214    	; 0x46a <ADC_u8StartChainAsynch+0xf2>
     394:	ea 81       	ldd	r30, Y+2	; 0x02
     396:	fb 81       	ldd	r31, Y+3	; 0x03
     398:	80 81       	ld	r24, Z
     39a:	91 81       	ldd	r25, Z+1	; 0x01
     39c:	00 97       	sbiw	r24, 0x00	; 0
     39e:	09 f4       	brne	.+2      	; 0x3a2 <ADC_u8StartChainAsynch+0x2a>
     3a0:	64 c0       	rjmp	.+200    	; 0x46a <ADC_u8StartChainAsynch+0xf2>
     3a2:	ea 81       	ldd	r30, Y+2	; 0x02
     3a4:	fb 81       	ldd	r31, Y+3	; 0x03
     3a6:	85 81       	ldd	r24, Z+5	; 0x05
     3a8:	96 81       	ldd	r25, Z+6	; 0x06
     3aa:	00 97       	sbiw	r24, 0x00	; 0
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <ADC_u8StartChainAsynch+0x38>
     3ae:	5d c0       	rjmp	.+186    	; 0x46a <ADC_u8StartChainAsynch+0xf2>
     3b0:	ea 81       	ldd	r30, Y+2	; 0x02
     3b2:	fb 81       	ldd	r31, Y+3	; 0x03
     3b4:	82 81       	ldd	r24, Z+2	; 0x02
     3b6:	93 81       	ldd	r25, Z+3	; 0x03
     3b8:	00 97       	sbiw	r24, 0x00	; 0
     3ba:	09 f4       	brne	.+2      	; 0x3be <ADC_u8StartChainAsynch+0x46>
     3bc:	56 c0       	rjmp	.+172    	; 0x46a <ADC_u8StartChainAsynch+0xf2>
	{
		if (ADC_u8State == IDLE)
     3be:	80 91 64 00 	lds	r24, 0x0064
     3c2:	88 23       	and	r24, r24
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <ADC_u8StartChainAsynch+0x50>
     3c6:	4e c0       	rjmp	.+156    	; 0x464 <ADC_u8StartChainAsynch+0xec>
		{
			/*ADC is now Busy*/
			ADC_u8State = BUSY ;
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	80 93 64 00 	sts	0x0064, r24

			/*Set ISR State*/
			ADC_u8ISRState = CHAIN_CHANNEL_ASYNCH ;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	80 93 65 00 	sts	0x0065, r24

			/*Assign the ADC data globally*/
			ADC_pu16AsynchConversionResult = Copy_Chain->Result ;
     3d4:	ea 81       	ldd	r30, Y+2	; 0x02
     3d6:	fb 81       	ldd	r31, Y+3	; 0x03
     3d8:	82 81       	ldd	r24, Z+2	; 0x02
     3da:	93 81       	ldd	r25, Z+3	; 0x03
     3dc:	90 93 61 00 	sts	0x0061, r25
     3e0:	80 93 60 00 	sts	0x0060, r24
			ADC_pu8ChainChannel = Copy_Chain->Channel ;
     3e4:	ea 81       	ldd	r30, Y+2	; 0x02
     3e6:	fb 81       	ldd	r31, Y+3	; 0x03
     3e8:	80 81       	ld	r24, Z
     3ea:	91 81       	ldd	r25, Z+1	; 0x01
     3ec:	90 93 67 00 	sts	0x0067, r25
     3f0:	80 93 66 00 	sts	0x0066, r24
			ADC_u8ChainSize = Copy_Chain->Size ;
     3f4:	ea 81       	ldd	r30, Y+2	; 0x02
     3f6:	fb 81       	ldd	r31, Y+3	; 0x03
     3f8:	84 81       	ldd	r24, Z+4	; 0x04
     3fa:	80 93 68 00 	sts	0x0068, r24
			ADC_pvNotificationFunc = Copy_Chain->NotificationFunc ;
     3fe:	ea 81       	ldd	r30, Y+2	; 0x02
     400:	fb 81       	ldd	r31, Y+3	; 0x03
     402:	85 81       	ldd	r24, Z+5	; 0x05
     404:	96 81       	ldd	r25, Z+6	; 0x06
     406:	90 93 63 00 	sts	0x0063, r25
     40a:	80 93 62 00 	sts	0x0062, r24

			/*Set Index to first element*/
			ADC_u8Index = 0 ;
     40e:	10 92 69 00 	sts	0x0069, r1

			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
     412:	a7 e2       	ldi	r26, 0x27	; 39
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	e7 e2       	ldi	r30, 0x27	; 39
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	80 7e       	andi	r24, 0xE0	; 224
     41e:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannel[ADC_u8Index] ;
     420:	a7 e2       	ldi	r26, 0x27	; 39
     422:	b0 e0       	ldi	r27, 0x00	; 0
     424:	e7 e2       	ldi	r30, 0x27	; 39
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	40 81       	ld	r20, Z
     42a:	20 91 66 00 	lds	r18, 0x0066
     42e:	30 91 67 00 	lds	r19, 0x0067
     432:	80 91 69 00 	lds	r24, 0x0069
     436:	88 2f       	mov	r24, r24
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	f9 01       	movw	r30, r18
     43c:	e8 0f       	add	r30, r24
     43e:	f9 1f       	adc	r31, r25
     440:	80 81       	ld	r24, Z
     442:	84 2b       	or	r24, r20
     444:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
     446:	a6 e2       	ldi	r26, 0x26	; 38
     448:	b0 e0       	ldi	r27, 0x00	; 0
     44a:	e6 e2       	ldi	r30, 0x26	; 38
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	80 81       	ld	r24, Z
     450:	80 64       	ori	r24, 0x40	; 64
     452:	8c 93       	st	X, r24

			/*ADC Conversion Complete Interrupt Enable*/
			SET_BIT(ADSAR , ADSAR_ADIE) ;
     454:	a6 e2       	ldi	r26, 0x26	; 38
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	e6 e2       	ldi	r30, 0x26	; 38
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	88 60       	ori	r24, 0x08	; 8
     460:	8c 93       	st	X, r24
     462:	05 c0       	rjmp	.+10     	; 0x46e <ADC_u8StartChainAsynch+0xf6>
		}
		else
		{
			Local_u8ErrorState = BUSY_STATE ;
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	89 83       	std	Y+1, r24	; 0x01
     468:	02 c0       	rjmp	.+4      	; 0x46e <ADC_u8StartChainAsynch+0xf6>
		}

	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
     46a:	82 e0       	ldi	r24, 0x02	; 2
     46c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
     46e:	89 81       	ldd	r24, Y+1	; 0x01
}
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	cf 91       	pop	r28
     478:	df 91       	pop	r29
     47a:	08 95       	ret

0000047c <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16 (void)  __attribute__((signal)) ;
void __vector_16 (void)
{
     47c:	1f 92       	push	r1
     47e:	0f 92       	push	r0
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	0f 92       	push	r0
     484:	11 24       	eor	r1, r1
     486:	2f 93       	push	r18
     488:	3f 93       	push	r19
     48a:	4f 93       	push	r20
     48c:	5f 93       	push	r21
     48e:	6f 93       	push	r22
     490:	7f 93       	push	r23
     492:	8f 93       	push	r24
     494:	9f 93       	push	r25
     496:	af 93       	push	r26
     498:	bf 93       	push	r27
     49a:	ef 93       	push	r30
     49c:	ff 93       	push	r31
     49e:	df 93       	push	r29
     4a0:	cf 93       	push	r28
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
	if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
     4a6:	80 91 65 00 	lds	r24, 0x0065
     4aa:	88 23       	and	r24, r24
     4ac:	19 f5       	brne	.+70     	; 0x4f4 <__vector_16+0x78>
	{
		/*Return Conversion Result*/
				#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
					* ADC_pu16AsynchConversionResult = (ADCL|(ADCH << 8))  ;
     4ae:	a0 91 60 00 	lds	r26, 0x0060
     4b2:	b0 91 61 00 	lds	r27, 0x0061
     4b6:	e4 e2       	ldi	r30, 0x24	; 36
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	80 81       	ld	r24, Z
     4bc:	28 2f       	mov	r18, r24
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	e5 e2       	ldi	r30, 0x25	; 37
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	88 2f       	mov	r24, r24
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	98 2f       	mov	r25, r24
     4cc:	88 27       	eor	r24, r24
     4ce:	82 2b       	or	r24, r18
     4d0:	93 2b       	or	r25, r19
     4d2:	8d 93       	st	X+, r24
     4d4:	9c 93       	st	X, r25
					#error "Wrong ADC_ADJUSTMENT config"

				#endif

		/*ADC is IDLE*/
		ADC_u8State = IDLE ;
     4d6:	10 92 64 00 	sts	0x0064, r1

		/*Call Notification Function*/
		ADC_pvNotificationFunc() ;
     4da:	e0 91 62 00 	lds	r30, 0x0062
     4de:	f0 91 63 00 	lds	r31, 0x0063
     4e2:	09 95       	icall

		/*Disable the Conversion Complete Interrupt*/
		CLR_BIT(ADSAR , ADSAR_ADIE) ;
     4e4:	a6 e2       	ldi	r26, 0x26	; 38
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	e6 e2       	ldi	r30, 0x26	; 38
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	87 7f       	andi	r24, 0xF7	; 247
     4f0:	8c 93       	st	X, r24
     4f2:	50 c0       	rjmp	.+160    	; 0x594 <__vector_16+0x118>
	}
	else
	{
		/*Return Conversion Result*/
		#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
			*ADC_pu16AsynchConversionResult = (ADCL|(ADCH << 8))  ;
     4f4:	a0 91 60 00 	lds	r26, 0x0060
     4f8:	b0 91 61 00 	lds	r27, 0x0061
     4fc:	e4 e2       	ldi	r30, 0x24	; 36
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	80 81       	ld	r24, Z
     502:	28 2f       	mov	r18, r24
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	e5 e2       	ldi	r30, 0x25	; 37
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	88 2f       	mov	r24, r24
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	98 2f       	mov	r25, r24
     512:	88 27       	eor	r24, r24
     514:	82 2b       	or	r24, r18
     516:	93 2b       	or	r25, r19
     518:	11 96       	adiw	r26, 0x01	; 1
     51a:	9c 93       	st	X, r25
     51c:	8e 93       	st	-X, r24
			#error "Wrong ADC_ADJUSTMENT config"

		#endif

		/*Increment Data index of the chain*/
		ADC_u8Index++ ;
     51e:	80 91 69 00 	lds	r24, 0x0069
     522:	8f 5f       	subi	r24, 0xFF	; 255
     524:	80 93 69 00 	sts	0x0069, r24

		if (ADC_u8Index == ADC_u8ChainSize)
     528:	90 91 69 00 	lds	r25, 0x0069
     52c:	80 91 68 00 	lds	r24, 0x0068
     530:	98 17       	cp	r25, r24
     532:	79 f4       	brne	.+30     	; 0x552 <__vector_16+0xd6>
		{
			/*ADC is IDLE*/
			ADC_u8State = IDLE ;
     534:	10 92 64 00 	sts	0x0064, r1

			/*Call Notification Function*/
			ADC_pvNotificationFunc() ;
     538:	e0 91 62 00 	lds	r30, 0x0062
     53c:	f0 91 63 00 	lds	r31, 0x0063
     540:	09 95       	icall

			/*Disable the Conversion Complete Interrupt*/
			CLR_BIT(ADSAR , ADSAR_ADIE) ;
     542:	a6 e2       	ldi	r26, 0x26	; 38
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	e6 e2       	ldi	r30, 0x26	; 38
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	80 81       	ld	r24, Z
     54c:	87 7f       	andi	r24, 0xF7	; 247
     54e:	8c 93       	st	X, r24
     550:	21 c0       	rjmp	.+66     	; 0x594 <__vector_16+0x118>
		}
		else
		{
			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
     552:	a7 e2       	ldi	r26, 0x27	; 39
     554:	b0 e0       	ldi	r27, 0x00	; 0
     556:	e7 e2       	ldi	r30, 0x27	; 39
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	80 7e       	andi	r24, 0xE0	; 224
     55e:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannel[ADC_u8Index] ;
     560:	a7 e2       	ldi	r26, 0x27	; 39
     562:	b0 e0       	ldi	r27, 0x00	; 0
     564:	e7 e2       	ldi	r30, 0x27	; 39
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	40 81       	ld	r20, Z
     56a:	20 91 66 00 	lds	r18, 0x0066
     56e:	30 91 67 00 	lds	r19, 0x0067
     572:	80 91 69 00 	lds	r24, 0x0069
     576:	88 2f       	mov	r24, r24
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	e8 0f       	add	r30, r24
     57e:	f9 1f       	adc	r31, r25
     580:	80 81       	ld	r24, Z
     582:	84 2b       	or	r24, r20
     584:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
     586:	a6 e2       	ldi	r26, 0x26	; 38
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	e6 e2       	ldi	r30, 0x26	; 38
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	80 64       	ori	r24, 0x40	; 64
     592:	8c 93       	st	X, r24
		}
	}
}
     594:	cf 91       	pop	r28
     596:	df 91       	pop	r29
     598:	ff 91       	pop	r31
     59a:	ef 91       	pop	r30
     59c:	bf 91       	pop	r27
     59e:	af 91       	pop	r26
     5a0:	9f 91       	pop	r25
     5a2:	8f 91       	pop	r24
     5a4:	7f 91       	pop	r23
     5a6:	6f 91       	pop	r22
     5a8:	5f 91       	pop	r21
     5aa:	4f 91       	pop	r20
     5ac:	3f 91       	pop	r19
     5ae:	2f 91       	pop	r18
     5b0:	0f 90       	pop	r0
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	0f 90       	pop	r0
     5b6:	1f 90       	pop	r1
     5b8:	18 95       	reti

000005ba <DIO_enumSetPinDirection>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
     5ba:	df 93       	push	r29
     5bc:	cf 93       	push	r28
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
     5c2:	28 97       	sbiw	r28, 0x08	; 8
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
     5ce:	8a 83       	std	Y+2, r24	; 0x02
     5d0:	6b 83       	std	Y+3, r22	; 0x03
     5d2:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     5d8:	8a 81       	ldd	r24, Y+2	; 0x02
     5da:	84 30       	cpi	r24, 0x04	; 4
     5dc:	08 f0       	brcs	.+2      	; 0x5e0 <DIO_enumSetPinDirection+0x26>
     5de:	f1 c0       	rjmp	.+482    	; 0x7c2 <DIO_enumSetPinDirection+0x208>
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	88 30       	cpi	r24, 0x08	; 8
     5e4:	08 f0       	brcs	.+2      	; 0x5e8 <DIO_enumSetPinDirection+0x2e>
     5e6:	ed c0       	rjmp	.+474    	; 0x7c2 <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
     5e8:	8c 81       	ldd	r24, Y+4	; 0x04
     5ea:	81 30       	cpi	r24, 0x01	; 1
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <DIO_enumSetPinDirection+0x36>
     5ee:	6f c0       	rjmp	.+222    	; 0x6ce <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     5f0:	8a 81       	ldd	r24, Y+2	; 0x02
     5f2:	28 2f       	mov	r18, r24
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	38 87       	std	Y+8, r19	; 0x08
     5f8:	2f 83       	std	Y+7, r18	; 0x07
     5fa:	8f 81       	ldd	r24, Y+7	; 0x07
     5fc:	98 85       	ldd	r25, Y+8	; 0x08
     5fe:	81 30       	cpi	r24, 0x01	; 1
     600:	91 05       	cpc	r25, r1
     602:	49 f1       	breq	.+82     	; 0x656 <DIO_enumSetPinDirection+0x9c>
     604:	2f 81       	ldd	r18, Y+7	; 0x07
     606:	38 85       	ldd	r19, Y+8	; 0x08
     608:	22 30       	cpi	r18, 0x02	; 2
     60a:	31 05       	cpc	r19, r1
     60c:	2c f4       	brge	.+10     	; 0x618 <DIO_enumSetPinDirection+0x5e>
     60e:	8f 81       	ldd	r24, Y+7	; 0x07
     610:	98 85       	ldd	r25, Y+8	; 0x08
     612:	00 97       	sbiw	r24, 0x00	; 0
     614:	61 f0       	breq	.+24     	; 0x62e <DIO_enumSetPinDirection+0x74>
     616:	d6 c0       	rjmp	.+428    	; 0x7c4 <DIO_enumSetPinDirection+0x20a>
     618:	2f 81       	ldd	r18, Y+7	; 0x07
     61a:	38 85       	ldd	r19, Y+8	; 0x08
     61c:	22 30       	cpi	r18, 0x02	; 2
     61e:	31 05       	cpc	r19, r1
     620:	71 f1       	breq	.+92     	; 0x67e <DIO_enumSetPinDirection+0xc4>
     622:	8f 81       	ldd	r24, Y+7	; 0x07
     624:	98 85       	ldd	r25, Y+8	; 0x08
     626:	83 30       	cpi	r24, 0x03	; 3
     628:	91 05       	cpc	r25, r1
     62a:	e9 f1       	breq	.+122    	; 0x6a6 <DIO_enumSetPinDirection+0xec>
     62c:	cb c0       	rjmp	.+406    	; 0x7c4 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
     62e:	aa e3       	ldi	r26, 0x3A	; 58
     630:	b0 e0       	ldi	r27, 0x00	; 0
     632:	ea e3       	ldi	r30, 0x3A	; 58
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	48 2f       	mov	r20, r24
     63a:	8b 81       	ldd	r24, Y+3	; 0x03
     63c:	28 2f       	mov	r18, r24
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	02 2e       	mov	r0, r18
     646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_enumSetPinDirection+0x92>
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	0a 94       	dec	r0
     64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_enumSetPinDirection+0x8e>
     650:	84 2b       	or	r24, r20
     652:	8c 93       	st	X, r24
     654:	b7 c0       	rjmp	.+366    	; 0x7c4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
     656:	a7 e3       	ldi	r26, 0x37	; 55
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	e7 e3       	ldi	r30, 0x37	; 55
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	48 2f       	mov	r20, r24
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	28 2f       	mov	r18, r24
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	02 2e       	mov	r0, r18
     66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_enumSetPinDirection+0xba>
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	0a 94       	dec	r0
     676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_enumSetPinDirection+0xb6>
     678:	84 2b       	or	r24, r20
     67a:	8c 93       	st	X, r24
     67c:	a3 c0       	rjmp	.+326    	; 0x7c4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
     67e:	a4 e3       	ldi	r26, 0x34	; 52
     680:	b0 e0       	ldi	r27, 0x00	; 0
     682:	e4 e3       	ldi	r30, 0x34	; 52
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	80 81       	ld	r24, Z
     688:	48 2f       	mov	r20, r24
     68a:	8b 81       	ldd	r24, Y+3	; 0x03
     68c:	28 2f       	mov	r18, r24
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	02 2e       	mov	r0, r18
     696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_enumSetPinDirection+0xe2>
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	0a 94       	dec	r0
     69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_enumSetPinDirection+0xde>
     6a0:	84 2b       	or	r24, r20
     6a2:	8c 93       	st	X, r24
     6a4:	8f c0       	rjmp	.+286    	; 0x7c4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
     6a6:	a1 e3       	ldi	r26, 0x31	; 49
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	e1 e3       	ldi	r30, 0x31	; 49
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	48 2f       	mov	r20, r24
     6b2:	8b 81       	ldd	r24, Y+3	; 0x03
     6b4:	28 2f       	mov	r18, r24
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	02 2e       	mov	r0, r18
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_enumSetPinDirection+0x10a>
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	0a 94       	dec	r0
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_enumSetPinDirection+0x106>
     6c8:	84 2b       	or	r24, r20
     6ca:	8c 93       	st	X, r24
     6cc:	7b c0       	rjmp	.+246    	; 0x7c4 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
     6ce:	8c 81       	ldd	r24, Y+4	; 0x04
     6d0:	88 23       	and	r24, r24
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <DIO_enumSetPinDirection+0x11c>
     6d4:	74 c0       	rjmp	.+232    	; 0x7be <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     6d6:	8a 81       	ldd	r24, Y+2	; 0x02
     6d8:	28 2f       	mov	r18, r24
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	3e 83       	std	Y+6, r19	; 0x06
     6de:	2d 83       	std	Y+5, r18	; 0x05
     6e0:	8d 81       	ldd	r24, Y+5	; 0x05
     6e2:	9e 81       	ldd	r25, Y+6	; 0x06
     6e4:	81 30       	cpi	r24, 0x01	; 1
     6e6:	91 05       	cpc	r25, r1
     6e8:	59 f1       	breq	.+86     	; 0x740 <DIO_enumSetPinDirection+0x186>
     6ea:	2d 81       	ldd	r18, Y+5	; 0x05
     6ec:	3e 81       	ldd	r19, Y+6	; 0x06
     6ee:	22 30       	cpi	r18, 0x02	; 2
     6f0:	31 05       	cpc	r19, r1
     6f2:	2c f4       	brge	.+10     	; 0x6fe <DIO_enumSetPinDirection+0x144>
     6f4:	8d 81       	ldd	r24, Y+5	; 0x05
     6f6:	9e 81       	ldd	r25, Y+6	; 0x06
     6f8:	00 97       	sbiw	r24, 0x00	; 0
     6fa:	69 f0       	breq	.+26     	; 0x716 <DIO_enumSetPinDirection+0x15c>
     6fc:	63 c0       	rjmp	.+198    	; 0x7c4 <DIO_enumSetPinDirection+0x20a>
     6fe:	2d 81       	ldd	r18, Y+5	; 0x05
     700:	3e 81       	ldd	r19, Y+6	; 0x06
     702:	22 30       	cpi	r18, 0x02	; 2
     704:	31 05       	cpc	r19, r1
     706:	89 f1       	breq	.+98     	; 0x76a <DIO_enumSetPinDirection+0x1b0>
     708:	8d 81       	ldd	r24, Y+5	; 0x05
     70a:	9e 81       	ldd	r25, Y+6	; 0x06
     70c:	83 30       	cpi	r24, 0x03	; 3
     70e:	91 05       	cpc	r25, r1
     710:	09 f4       	brne	.+2      	; 0x714 <DIO_enumSetPinDirection+0x15a>
     712:	40 c0       	rjmp	.+128    	; 0x794 <DIO_enumSetPinDirection+0x1da>
     714:	57 c0       	rjmp	.+174    	; 0x7c4 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
     716:	aa e3       	ldi	r26, 0x3A	; 58
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	ea e3       	ldi	r30, 0x3A	; 58
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	80 81       	ld	r24, Z
     720:	48 2f       	mov	r20, r24
     722:	8b 81       	ldd	r24, Y+3	; 0x03
     724:	28 2f       	mov	r18, r24
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	02 2e       	mov	r0, r18
     72e:	02 c0       	rjmp	.+4      	; 0x734 <DIO_enumSetPinDirection+0x17a>
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	0a 94       	dec	r0
     736:	e2 f7       	brpl	.-8      	; 0x730 <DIO_enumSetPinDirection+0x176>
     738:	80 95       	com	r24
     73a:	84 23       	and	r24, r20
     73c:	8c 93       	st	X, r24
     73e:	42 c0       	rjmp	.+132    	; 0x7c4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
     740:	a7 e3       	ldi	r26, 0x37	; 55
     742:	b0 e0       	ldi	r27, 0x00	; 0
     744:	e7 e3       	ldi	r30, 0x37	; 55
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	80 81       	ld	r24, Z
     74a:	48 2f       	mov	r20, r24
     74c:	8b 81       	ldd	r24, Y+3	; 0x03
     74e:	28 2f       	mov	r18, r24
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	02 2e       	mov	r0, r18
     758:	02 c0       	rjmp	.+4      	; 0x75e <DIO_enumSetPinDirection+0x1a4>
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	0a 94       	dec	r0
     760:	e2 f7       	brpl	.-8      	; 0x75a <DIO_enumSetPinDirection+0x1a0>
     762:	80 95       	com	r24
     764:	84 23       	and	r24, r20
     766:	8c 93       	st	X, r24
     768:	2d c0       	rjmp	.+90     	; 0x7c4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
     76a:	a4 e3       	ldi	r26, 0x34	; 52
     76c:	b0 e0       	ldi	r27, 0x00	; 0
     76e:	e4 e3       	ldi	r30, 0x34	; 52
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	80 81       	ld	r24, Z
     774:	48 2f       	mov	r20, r24
     776:	8b 81       	ldd	r24, Y+3	; 0x03
     778:	28 2f       	mov	r18, r24
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	02 2e       	mov	r0, r18
     782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_enumSetPinDirection+0x1ce>
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	0a 94       	dec	r0
     78a:	e2 f7       	brpl	.-8      	; 0x784 <DIO_enumSetPinDirection+0x1ca>
     78c:	80 95       	com	r24
     78e:	84 23       	and	r24, r20
     790:	8c 93       	st	X, r24
     792:	18 c0       	rjmp	.+48     	; 0x7c4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
     794:	a1 e3       	ldi	r26, 0x31	; 49
     796:	b0 e0       	ldi	r27, 0x00	; 0
     798:	e1 e3       	ldi	r30, 0x31	; 49
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	48 2f       	mov	r20, r24
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	28 2f       	mov	r18, r24
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	02 2e       	mov	r0, r18
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <DIO_enumSetPinDirection+0x1f8>
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	0a 94       	dec	r0
     7b4:	e2 f7       	brpl	.-8      	; 0x7ae <DIO_enumSetPinDirection+0x1f4>
     7b6:	80 95       	com	r24
     7b8:	84 23       	and	r24, r20
     7ba:	8c 93       	st	X, r24
     7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
     7be:	19 82       	std	Y+1, r1	; 0x01
     7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
     7c2:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     7c4:	89 81       	ldd	r24, Y+1	; 0x01

}
     7c6:	28 96       	adiw	r28, 0x08	; 8
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	cf 91       	pop	r28
     7d4:	df 91       	pop	r29
     7d6:	08 95       	ret

000007d8 <DIO_enumSetPinValue>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
     7d8:	df 93       	push	r29
     7da:	cf 93       	push	r28
     7dc:	cd b7       	in	r28, 0x3d	; 61
     7de:	de b7       	in	r29, 0x3e	; 62
     7e0:	28 97       	sbiw	r28, 0x08	; 8
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
     7ec:	8a 83       	std	Y+2, r24	; 0x02
     7ee:	6b 83       	std	Y+3, r22	; 0x03
     7f0:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	84 30       	cpi	r24, 0x04	; 4
     7fa:	08 f0       	brcs	.+2      	; 0x7fe <DIO_enumSetPinValue+0x26>
     7fc:	f1 c0       	rjmp	.+482    	; 0x9e0 <__stack+0x181>
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	88 30       	cpi	r24, 0x08	; 8
     802:	08 f0       	brcs	.+2      	; 0x806 <DIO_enumSetPinValue+0x2e>
     804:	ed c0       	rjmp	.+474    	; 0x9e0 <__stack+0x181>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
     806:	8c 81       	ldd	r24, Y+4	; 0x04
     808:	81 30       	cpi	r24, 0x01	; 1
     80a:	09 f0       	breq	.+2      	; 0x80e <DIO_enumSetPinValue+0x36>
     80c:	6f c0       	rjmp	.+222    	; 0x8ec <__stack+0x8d>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     80e:	8a 81       	ldd	r24, Y+2	; 0x02
     810:	28 2f       	mov	r18, r24
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	38 87       	std	Y+8, r19	; 0x08
     816:	2f 83       	std	Y+7, r18	; 0x07
     818:	8f 81       	ldd	r24, Y+7	; 0x07
     81a:	98 85       	ldd	r25, Y+8	; 0x08
     81c:	81 30       	cpi	r24, 0x01	; 1
     81e:	91 05       	cpc	r25, r1
     820:	49 f1       	breq	.+82     	; 0x874 <__stack+0x15>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	22 30       	cpi	r18, 0x02	; 2
     828:	31 05       	cpc	r19, r1
     82a:	2c f4       	brge	.+10     	; 0x836 <DIO_enumSetPinValue+0x5e>
     82c:	8f 81       	ldd	r24, Y+7	; 0x07
     82e:	98 85       	ldd	r25, Y+8	; 0x08
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	61 f0       	breq	.+24     	; 0x84c <DIO_enumSetPinValue+0x74>
     834:	d6 c0       	rjmp	.+428    	; 0x9e2 <__stack+0x183>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	22 30       	cpi	r18, 0x02	; 2
     83c:	31 05       	cpc	r19, r1
     83e:	71 f1       	breq	.+92     	; 0x89c <__stack+0x3d>
     840:	8f 81       	ldd	r24, Y+7	; 0x07
     842:	98 85       	ldd	r25, Y+8	; 0x08
     844:	83 30       	cpi	r24, 0x03	; 3
     846:	91 05       	cpc	r25, r1
     848:	e9 f1       	breq	.+122    	; 0x8c4 <__stack+0x65>
     84a:	cb c0       	rjmp	.+406    	; 0x9e2 <__stack+0x183>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
     84c:	ab e3       	ldi	r26, 0x3B	; 59
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	eb e3       	ldi	r30, 0x3B	; 59
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	80 81       	ld	r24, Z
     856:	48 2f       	mov	r20, r24
     858:	8b 81       	ldd	r24, Y+3	; 0x03
     85a:	28 2f       	mov	r18, r24
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	02 2e       	mov	r0, r18
     864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	0a 94       	dec	r0
     86c:	e2 f7       	brpl	.-8      	; 0x866 <__stack+0x7>
     86e:	84 2b       	or	r24, r20
     870:	8c 93       	st	X, r24
     872:	b7 c0       	rjmp	.+366    	; 0x9e2 <__stack+0x183>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
     874:	a8 e3       	ldi	r26, 0x38	; 56
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e8 e3       	ldi	r30, 0x38	; 56
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	48 2f       	mov	r20, r24
     880:	8b 81       	ldd	r24, Y+3	; 0x03
     882:	28 2f       	mov	r18, r24
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	02 2e       	mov	r0, r18
     88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x33>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	0a 94       	dec	r0
     894:	e2 f7       	brpl	.-8      	; 0x88e <__stack+0x2f>
     896:	84 2b       	or	r24, r20
     898:	8c 93       	st	X, r24
     89a:	a3 c0       	rjmp	.+326    	; 0x9e2 <__stack+0x183>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
     89c:	a5 e3       	ldi	r26, 0x35	; 53
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	e5 e3       	ldi	r30, 0x35	; 53
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	80 81       	ld	r24, Z
     8a6:	48 2f       	mov	r20, r24
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	28 2f       	mov	r18, r24
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	02 2e       	mov	r0, r18
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__stack+0x5b>
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	0a 94       	dec	r0
     8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <__stack+0x57>
     8be:	84 2b       	or	r24, r20
     8c0:	8c 93       	st	X, r24
     8c2:	8f c0       	rjmp	.+286    	; 0x9e2 <__stack+0x183>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
     8c4:	a2 e3       	ldi	r26, 0x32	; 50
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	e2 e3       	ldi	r30, 0x32	; 50
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	80 81       	ld	r24, Z
     8ce:	48 2f       	mov	r20, r24
     8d0:	8b 81       	ldd	r24, Y+3	; 0x03
     8d2:	28 2f       	mov	r18, r24
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	02 2e       	mov	r0, r18
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <__stack+0x83>
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	0a 94       	dec	r0
     8e4:	e2 f7       	brpl	.-8      	; 0x8de <__stack+0x7f>
     8e6:	84 2b       	or	r24, r20
     8e8:	8c 93       	st	X, r24
     8ea:	7b c0       	rjmp	.+246    	; 0x9e2 <__stack+0x183>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
     8ec:	8c 81       	ldd	r24, Y+4	; 0x04
     8ee:	88 23       	and	r24, r24
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <__stack+0x95>
     8f2:	74 c0       	rjmp	.+232    	; 0x9dc <__stack+0x17d>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     8f4:	8a 81       	ldd	r24, Y+2	; 0x02
     8f6:	28 2f       	mov	r18, r24
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	2d 83       	std	Y+5, r18	; 0x05
     8fe:	8d 81       	ldd	r24, Y+5	; 0x05
     900:	9e 81       	ldd	r25, Y+6	; 0x06
     902:	81 30       	cpi	r24, 0x01	; 1
     904:	91 05       	cpc	r25, r1
     906:	59 f1       	breq	.+86     	; 0x95e <__stack+0xff>
     908:	2d 81       	ldd	r18, Y+5	; 0x05
     90a:	3e 81       	ldd	r19, Y+6	; 0x06
     90c:	22 30       	cpi	r18, 0x02	; 2
     90e:	31 05       	cpc	r19, r1
     910:	2c f4       	brge	.+10     	; 0x91c <__stack+0xbd>
     912:	8d 81       	ldd	r24, Y+5	; 0x05
     914:	9e 81       	ldd	r25, Y+6	; 0x06
     916:	00 97       	sbiw	r24, 0x00	; 0
     918:	69 f0       	breq	.+26     	; 0x934 <__stack+0xd5>
     91a:	63 c0       	rjmp	.+198    	; 0x9e2 <__stack+0x183>
     91c:	2d 81       	ldd	r18, Y+5	; 0x05
     91e:	3e 81       	ldd	r19, Y+6	; 0x06
     920:	22 30       	cpi	r18, 0x02	; 2
     922:	31 05       	cpc	r19, r1
     924:	89 f1       	breq	.+98     	; 0x988 <__stack+0x129>
     926:	8d 81       	ldd	r24, Y+5	; 0x05
     928:	9e 81       	ldd	r25, Y+6	; 0x06
     92a:	83 30       	cpi	r24, 0x03	; 3
     92c:	91 05       	cpc	r25, r1
     92e:	09 f4       	brne	.+2      	; 0x932 <__stack+0xd3>
     930:	40 c0       	rjmp	.+128    	; 0x9b2 <__stack+0x153>
     932:	57 c0       	rjmp	.+174    	; 0x9e2 <__stack+0x183>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
     934:	ab e3       	ldi	r26, 0x3B	; 59
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	eb e3       	ldi	r30, 0x3B	; 59
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	48 2f       	mov	r20, r24
     940:	8b 81       	ldd	r24, Y+3	; 0x03
     942:	28 2f       	mov	r18, r24
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	02 2e       	mov	r0, r18
     94c:	02 c0       	rjmp	.+4      	; 0x952 <__stack+0xf3>
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	0a 94       	dec	r0
     954:	e2 f7       	brpl	.-8      	; 0x94e <__stack+0xef>
     956:	80 95       	com	r24
     958:	84 23       	and	r24, r20
     95a:	8c 93       	st	X, r24
     95c:	42 c0       	rjmp	.+132    	; 0x9e2 <__stack+0x183>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
     95e:	a8 e3       	ldi	r26, 0x38	; 56
     960:	b0 e0       	ldi	r27, 0x00	; 0
     962:	e8 e3       	ldi	r30, 0x38	; 56
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	80 81       	ld	r24, Z
     968:	48 2f       	mov	r20, r24
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	28 2f       	mov	r18, r24
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	02 2e       	mov	r0, r18
     976:	02 c0       	rjmp	.+4      	; 0x97c <__stack+0x11d>
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	0a 94       	dec	r0
     97e:	e2 f7       	brpl	.-8      	; 0x978 <__stack+0x119>
     980:	80 95       	com	r24
     982:	84 23       	and	r24, r20
     984:	8c 93       	st	X, r24
     986:	2d c0       	rjmp	.+90     	; 0x9e2 <__stack+0x183>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
     988:	a5 e3       	ldi	r26, 0x35	; 53
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	e5 e3       	ldi	r30, 0x35	; 53
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	48 2f       	mov	r20, r24
     994:	8b 81       	ldd	r24, Y+3	; 0x03
     996:	28 2f       	mov	r18, r24
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	02 2e       	mov	r0, r18
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__stack+0x147>
     9a2:	88 0f       	add	r24, r24
     9a4:	99 1f       	adc	r25, r25
     9a6:	0a 94       	dec	r0
     9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <__stack+0x143>
     9aa:	80 95       	com	r24
     9ac:	84 23       	and	r24, r20
     9ae:	8c 93       	st	X, r24
     9b0:	18 c0       	rjmp	.+48     	; 0x9e2 <__stack+0x183>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
     9b2:	a2 e3       	ldi	r26, 0x32	; 50
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	e2 e3       	ldi	r30, 0x32	; 50
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	48 2f       	mov	r20, r24
     9be:	8b 81       	ldd	r24, Y+3	; 0x03
     9c0:	28 2f       	mov	r18, r24
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	02 2e       	mov	r0, r18
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <__stack+0x171>
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	0a 94       	dec	r0
     9d2:	e2 f7       	brpl	.-8      	; 0x9cc <__stack+0x16d>
     9d4:	80 95       	com	r24
     9d6:	84 23       	and	r24, r20
     9d8:	8c 93       	st	X, r24
     9da:	03 c0       	rjmp	.+6      	; 0x9e2 <__stack+0x183>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
     9dc:	19 82       	std	Y+1, r1	; 0x01
     9de:	01 c0       	rjmp	.+2      	; 0x9e2 <__stack+0x183>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
     9e0:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     9e2:	89 81       	ldd	r24, Y+1	; 0x01

}
     9e4:	28 96       	adiw	r28, 0x08	; 8
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
     9f0:	cf 91       	pop	r28
     9f2:	df 91       	pop	r29
     9f4:	08 95       	ret

000009f6 <DIO_enumGetPinValue>:
  	  => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
     9f6:	df 93       	push	r29
     9f8:	cf 93       	push	r28
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	27 97       	sbiw	r28, 0x07	; 7
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	8a 83       	std	Y+2, r24	; 0x02
     a0c:	6b 83       	std	Y+3, r22	; 0x03
     a0e:	5d 83       	std	Y+5, r21	; 0x05
     a10:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     a16:	8a 81       	ldd	r24, Y+2	; 0x02
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	08 f0       	brcs	.+2      	; 0xa1e <DIO_enumGetPinValue+0x28>
     a1c:	a6 c0       	rjmp	.+332    	; 0xb6a <DIO_enumGetPinValue+0x174>
     a1e:	8b 81       	ldd	r24, Y+3	; 0x03
     a20:	88 30       	cpi	r24, 0x08	; 8
     a22:	08 f0       	brcs	.+2      	; 0xa26 <DIO_enumGetPinValue+0x30>
     a24:	a2 c0       	rjmp	.+324    	; 0xb6a <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	28 2f       	mov	r18, r24
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	3f 83       	std	Y+7, r19	; 0x07
     a2e:	2e 83       	std	Y+6, r18	; 0x06
     a30:	4e 81       	ldd	r20, Y+6	; 0x06
     a32:	5f 81       	ldd	r21, Y+7	; 0x07
     a34:	41 30       	cpi	r20, 0x01	; 1
     a36:	51 05       	cpc	r21, r1
     a38:	c1 f1       	breq	.+112    	; 0xaaa <DIO_enumGetPinValue+0xb4>
     a3a:	8e 81       	ldd	r24, Y+6	; 0x06
     a3c:	9f 81       	ldd	r25, Y+7	; 0x07
     a3e:	82 30       	cpi	r24, 0x02	; 2
     a40:	91 05       	cpc	r25, r1
     a42:	34 f4       	brge	.+12     	; 0xa50 <DIO_enumGetPinValue+0x5a>
     a44:	2e 81       	ldd	r18, Y+6	; 0x06
     a46:	3f 81       	ldd	r19, Y+7	; 0x07
     a48:	21 15       	cp	r18, r1
     a4a:	31 05       	cpc	r19, r1
     a4c:	71 f0       	breq	.+28     	; 0xa6a <DIO_enumGetPinValue+0x74>
     a4e:	8e c0       	rjmp	.+284    	; 0xb6c <DIO_enumGetPinValue+0x176>
     a50:	4e 81       	ldd	r20, Y+6	; 0x06
     a52:	5f 81       	ldd	r21, Y+7	; 0x07
     a54:	42 30       	cpi	r20, 0x02	; 2
     a56:	51 05       	cpc	r21, r1
     a58:	09 f4       	brne	.+2      	; 0xa5c <DIO_enumGetPinValue+0x66>
     a5a:	47 c0       	rjmp	.+142    	; 0xaea <DIO_enumGetPinValue+0xf4>
     a5c:	8e 81       	ldd	r24, Y+6	; 0x06
     a5e:	9f 81       	ldd	r25, Y+7	; 0x07
     a60:	83 30       	cpi	r24, 0x03	; 3
     a62:	91 05       	cpc	r25, r1
     a64:	09 f4       	brne	.+2      	; 0xa68 <DIO_enumGetPinValue+0x72>
     a66:	61 c0       	rjmp	.+194    	; 0xb2a <DIO_enumGetPinValue+0x134>
     a68:	81 c0       	rjmp	.+258    	; 0xb6c <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
     a6a:	e9 e3       	ldi	r30, 0x39	; 57
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	48 2f       	mov	r20, r24
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	28 2f       	mov	r18, r24
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <DIO_enumGetPinValue+0x8e>
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	2a 95       	dec	r18
     a86:	e2 f7       	brpl	.-8      	; 0xa80 <DIO_enumGetPinValue+0x8a>
     a88:	9a 01       	movw	r18, r20
     a8a:	28 23       	and	r18, r24
     a8c:	39 23       	and	r19, r25
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	88 2f       	mov	r24, r24
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a9 01       	movw	r20, r18
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <DIO_enumGetPinValue+0xa6>
     a98:	55 95       	asr	r21
     a9a:	47 95       	ror	r20
     a9c:	8a 95       	dec	r24
     a9e:	e2 f7       	brpl	.-8      	; 0xa98 <DIO_enumGetPinValue+0xa2>
     aa0:	ca 01       	movw	r24, r20
     aa2:	ec 81       	ldd	r30, Y+4	; 0x04
     aa4:	fd 81       	ldd	r31, Y+5	; 0x05
     aa6:	80 83       	st	Z, r24
     aa8:	61 c0       	rjmp	.+194    	; 0xb6c <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
     aaa:	e6 e3       	ldi	r30, 0x36	; 54
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	80 81       	ld	r24, Z
     ab0:	48 2f       	mov	r20, r24
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	8b 81       	ldd	r24, Y+3	; 0x03
     ab6:	28 2f       	mov	r18, r24
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	02 c0       	rjmp	.+4      	; 0xac4 <DIO_enumGetPinValue+0xce>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	2a 95       	dec	r18
     ac6:	e2 f7       	brpl	.-8      	; 0xac0 <DIO_enumGetPinValue+0xca>
     ac8:	9a 01       	movw	r18, r20
     aca:	28 23       	and	r18, r24
     acc:	39 23       	and	r19, r25
     ace:	8b 81       	ldd	r24, Y+3	; 0x03
     ad0:	88 2f       	mov	r24, r24
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a9 01       	movw	r20, r18
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <DIO_enumGetPinValue+0xe6>
     ad8:	55 95       	asr	r21
     ada:	47 95       	ror	r20
     adc:	8a 95       	dec	r24
     ade:	e2 f7       	brpl	.-8      	; 0xad8 <DIO_enumGetPinValue+0xe2>
     ae0:	ca 01       	movw	r24, r20
     ae2:	ec 81       	ldd	r30, Y+4	; 0x04
     ae4:	fd 81       	ldd	r31, Y+5	; 0x05
     ae6:	80 83       	st	Z, r24
     ae8:	41 c0       	rjmp	.+130    	; 0xb6c <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
     aea:	e3 e3       	ldi	r30, 0x33	; 51
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	48 2f       	mov	r20, r24
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	8b 81       	ldd	r24, Y+3	; 0x03
     af6:	28 2f       	mov	r18, r24
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <DIO_enumGetPinValue+0x10e>
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	2a 95       	dec	r18
     b06:	e2 f7       	brpl	.-8      	; 0xb00 <DIO_enumGetPinValue+0x10a>
     b08:	9a 01       	movw	r18, r20
     b0a:	28 23       	and	r18, r24
     b0c:	39 23       	and	r19, r25
     b0e:	8b 81       	ldd	r24, Y+3	; 0x03
     b10:	88 2f       	mov	r24, r24
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	a9 01       	movw	r20, r18
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <DIO_enumGetPinValue+0x126>
     b18:	55 95       	asr	r21
     b1a:	47 95       	ror	r20
     b1c:	8a 95       	dec	r24
     b1e:	e2 f7       	brpl	.-8      	; 0xb18 <DIO_enumGetPinValue+0x122>
     b20:	ca 01       	movw	r24, r20
     b22:	ec 81       	ldd	r30, Y+4	; 0x04
     b24:	fd 81       	ldd	r31, Y+5	; 0x05
     b26:	80 83       	st	Z, r24
     b28:	21 c0       	rjmp	.+66     	; 0xb6c <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
     b2a:	e0 e3       	ldi	r30, 0x30	; 48
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	48 2f       	mov	r20, r24
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	8b 81       	ldd	r24, Y+3	; 0x03
     b36:	28 2f       	mov	r18, r24
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <DIO_enumGetPinValue+0x14e>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	2a 95       	dec	r18
     b46:	e2 f7       	brpl	.-8      	; 0xb40 <DIO_enumGetPinValue+0x14a>
     b48:	9a 01       	movw	r18, r20
     b4a:	28 23       	and	r18, r24
     b4c:	39 23       	and	r19, r25
     b4e:	8b 81       	ldd	r24, Y+3	; 0x03
     b50:	88 2f       	mov	r24, r24
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	a9 01       	movw	r20, r18
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <DIO_enumGetPinValue+0x166>
     b58:	55 95       	asr	r21
     b5a:	47 95       	ror	r20
     b5c:	8a 95       	dec	r24
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <DIO_enumGetPinValue+0x162>
     b60:	ca 01       	movw	r24, r20
     b62:	ec 81       	ldd	r30, Y+4	; 0x04
     b64:	fd 81       	ldd	r31, Y+5	; 0x05
     b66:	80 83       	st	Z, r24
     b68:	01 c0       	rjmp	.+2      	; 0xb6c <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
     b6a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     b6e:	27 96       	adiw	r28, 0x07	; 7
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <DIO_enumTogglePinValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	00 d0       	rcall	.+0      	; 0xb86 <DIO_enumTogglePinValue+0x6>
     b86:	00 d0       	rcall	.+0      	; 0xb88 <DIO_enumTogglePinValue+0x8>
     b88:	0f 92       	push	r0
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	8a 83       	std	Y+2, r24	; 0x02
     b90:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	88 30       	cpi	r24, 0x08	; 8
     b9a:	08 f0       	brcs	.+2      	; 0xb9e <DIO_enumTogglePinValue+0x1e>
     b9c:	6f c0       	rjmp	.+222    	; 0xc7c <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
     b9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ba0:	28 2f       	mov	r18, r24
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	3d 83       	std	Y+5, r19	; 0x05
     ba6:	2c 83       	std	Y+4, r18	; 0x04
     ba8:	8c 81       	ldd	r24, Y+4	; 0x04
     baa:	9d 81       	ldd	r25, Y+5	; 0x05
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	91 05       	cpc	r25, r1
     bb0:	49 f1       	breq	.+82     	; 0xc04 <DIO_enumTogglePinValue+0x84>
     bb2:	2c 81       	ldd	r18, Y+4	; 0x04
     bb4:	3d 81       	ldd	r19, Y+5	; 0x05
     bb6:	22 30       	cpi	r18, 0x02	; 2
     bb8:	31 05       	cpc	r19, r1
     bba:	2c f4       	brge	.+10     	; 0xbc6 <DIO_enumTogglePinValue+0x46>
     bbc:	8c 81       	ldd	r24, Y+4	; 0x04
     bbe:	9d 81       	ldd	r25, Y+5	; 0x05
     bc0:	00 97       	sbiw	r24, 0x00	; 0
     bc2:	61 f0       	breq	.+24     	; 0xbdc <DIO_enumTogglePinValue+0x5c>
     bc4:	5c c0       	rjmp	.+184    	; 0xc7e <DIO_enumTogglePinValue+0xfe>
     bc6:	2c 81       	ldd	r18, Y+4	; 0x04
     bc8:	3d 81       	ldd	r19, Y+5	; 0x05
     bca:	22 30       	cpi	r18, 0x02	; 2
     bcc:	31 05       	cpc	r19, r1
     bce:	71 f1       	breq	.+92     	; 0xc2c <DIO_enumTogglePinValue+0xac>
     bd0:	8c 81       	ldd	r24, Y+4	; 0x04
     bd2:	9d 81       	ldd	r25, Y+5	; 0x05
     bd4:	83 30       	cpi	r24, 0x03	; 3
     bd6:	91 05       	cpc	r25, r1
     bd8:	e9 f1       	breq	.+122    	; 0xc54 <DIO_enumTogglePinValue+0xd4>
     bda:	51 c0       	rjmp	.+162    	; 0xc7e <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
     bdc:	ab e3       	ldi	r26, 0x3B	; 59
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	eb e3       	ldi	r30, 0x3B	; 59
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_enumTogglePinValue+0x7a>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_enumTogglePinValue+0x76>
     bfe:	84 27       	eor	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	3d c0       	rjmp	.+122    	; 0xc7e <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
     c04:	a8 e3       	ldi	r26, 0x38	; 56
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e8 e3       	ldi	r30, 0x38	; 56
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 2e       	mov	r0, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <DIO_enumTogglePinValue+0xa2>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <DIO_enumTogglePinValue+0x9e>
     c26:	84 27       	eor	r24, r20
     c28:	8c 93       	st	X, r24
     c2a:	29 c0       	rjmp	.+82     	; 0xc7e <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
     c2c:	a5 e3       	ldi	r26, 0x35	; 53
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e5 e3       	ldi	r30, 0x35	; 53
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	48 2f       	mov	r20, r24
     c38:	8b 81       	ldd	r24, Y+3	; 0x03
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	02 2e       	mov	r0, r18
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <DIO_enumTogglePinValue+0xca>
     c46:	88 0f       	add	r24, r24
     c48:	99 1f       	adc	r25, r25
     c4a:	0a 94       	dec	r0
     c4c:	e2 f7       	brpl	.-8      	; 0xc46 <DIO_enumTogglePinValue+0xc6>
     c4e:	84 27       	eor	r24, r20
     c50:	8c 93       	st	X, r24
     c52:	15 c0       	rjmp	.+42     	; 0xc7e <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
     c54:	a2 e3       	ldi	r26, 0x32	; 50
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e2 e3       	ldi	r30, 0x32	; 50
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <DIO_enumTogglePinValue+0xf2>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <DIO_enumTogglePinValue+0xee>
     c76:	84 27       	eor	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
     c7c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <DIO_enumConnectPullup>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 	  =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <DIO_enumConnectPullup+0x6>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <DIO_enumConnectPullup+0x8>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <DIO_enumConnectPullup+0xa>
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	8a 83       	std	Y+2, r24	; 0x02
     ca0:	6b 83       	std	Y+3, r22	; 0x03
     ca2:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	84 30       	cpi	r24, 0x04	; 4
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <DIO_enumConnectPullup+0x20>
     cae:	3e c1       	rjmp	.+636    	; 0xf2c <DIO_enumConnectPullup+0x29c>
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	88 30       	cpi	r24, 0x08	; 8
     cb4:	08 f0       	brcs	.+2      	; 0xcb8 <DIO_enumConnectPullup+0x28>
     cb6:	3a c1       	rjmp	.+628    	; 0xf2c <DIO_enumConnectPullup+0x29c>
	{
		switch(Copy_u8PORT)
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	3e 83       	std	Y+6, r19	; 0x06
     cc0:	2d 83       	std	Y+5, r18	; 0x05
     cc2:	8d 81       	ldd	r24, Y+5	; 0x05
     cc4:	9e 81       	ldd	r25, Y+6	; 0x06
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	91 05       	cpc	r25, r1
     cca:	09 f4       	brne	.+2      	; 0xcce <DIO_enumConnectPullup+0x3e>
     ccc:	5d c0       	rjmp	.+186    	; 0xd88 <DIO_enumConnectPullup+0xf8>
     cce:	2d 81       	ldd	r18, Y+5	; 0x05
     cd0:	3e 81       	ldd	r19, Y+6	; 0x06
     cd2:	22 30       	cpi	r18, 0x02	; 2
     cd4:	31 05       	cpc	r19, r1
     cd6:	2c f4       	brge	.+10     	; 0xce2 <DIO_enumConnectPullup+0x52>
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	9e 81       	ldd	r25, Y+6	; 0x06
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	71 f0       	breq	.+28     	; 0xcfc <DIO_enumConnectPullup+0x6c>
     ce0:	26 c1       	rjmp	.+588    	; 0xf2e <DIO_enumConnectPullup+0x29e>
     ce2:	2d 81       	ldd	r18, Y+5	; 0x05
     ce4:	3e 81       	ldd	r19, Y+6	; 0x06
     ce6:	22 30       	cpi	r18, 0x02	; 2
     ce8:	31 05       	cpc	r19, r1
     cea:	09 f4       	brne	.+2      	; 0xcee <DIO_enumConnectPullup+0x5e>
     cec:	93 c0       	rjmp	.+294    	; 0xe14 <DIO_enumConnectPullup+0x184>
     cee:	8d 81       	ldd	r24, Y+5	; 0x05
     cf0:	9e 81       	ldd	r25, Y+6	; 0x06
     cf2:	83 30       	cpi	r24, 0x03	; 3
     cf4:	91 05       	cpc	r25, r1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <DIO_enumConnectPullup+0x6a>
     cf8:	d3 c0       	rjmp	.+422    	; 0xea0 <DIO_enumConnectPullup+0x210>
     cfa:	19 c1       	rjmp	.+562    	; 0xf2e <DIO_enumConnectPullup+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	71 f5       	brne	.+92     	; 0xd5e <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
     d02:	a0 e5       	ldi	r26, 0x50	; 80
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e0 e5       	ldi	r30, 0x50	; 80
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8b 7f       	andi	r24, 0xFB	; 251
     d0e:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
     d10:	aa e3       	ldi	r26, 0x3A	; 58
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	ea e3       	ldi	r30, 0x3A	; 58
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	48 2f       	mov	r20, r24
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_enumConnectPullup+0x9c>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	2a 95       	dec	r18
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_enumConnectPullup+0x98>
     d30:	80 95       	com	r24
     d32:	84 23       	and	r24, r20
     d34:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
     d36:	ab e3       	ldi	r26, 0x3B	; 59
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	eb e3       	ldi	r30, 0x3B	; 59
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <DIO_enumConnectPullup+0xc4>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <DIO_enumConnectPullup+0xc0>
     d58:	84 2b       	or	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	e8 c0       	rjmp	.+464    	; 0xf2e <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
     d5e:	ab e3       	ldi	r26, 0x3B	; 59
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	eb e3       	ldi	r30, 0x3B	; 59
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_enumConnectPullup+0xec>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_enumConnectPullup+0xe8>
     d80:	80 95       	com	r24
     d82:	84 23       	and	r24, r20
     d84:	8c 93       	st	X, r24
     d86:	d3 c0       	rjmp	.+422    	; 0xf2e <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	71 f5       	brne	.+92     	; 0xdea <DIO_enumConnectPullup+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
     d8e:	a0 e5       	ldi	r26, 0x50	; 80
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e0 e5       	ldi	r30, 0x50	; 80
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8b 7f       	andi	r24, 0xFB	; 251
     d9a:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
     d9c:	a7 e3       	ldi	r26, 0x37	; 55
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e7 e3       	ldi	r30, 0x37	; 55
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_enumConnectPullup+0x128>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	2a 95       	dec	r18
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <DIO_enumConnectPullup+0x124>
     dbc:	80 95       	com	r24
     dbe:	84 23       	and	r24, r20
     dc0:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
     dc2:	a8 e3       	ldi	r26, 0x38	; 56
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e8 e3       	ldi	r30, 0x38	; 56
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <DIO_enumConnectPullup+0x150>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <DIO_enumConnectPullup+0x14c>
     de4:	84 2b       	or	r24, r20
     de6:	8c 93       	st	X, r24
     de8:	a2 c0       	rjmp	.+324    	; 0xf2e <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
     dea:	a8 e3       	ldi	r26, 0x38	; 56
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e8 e3       	ldi	r30, 0x38	; 56
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_enumConnectPullup+0x178>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_enumConnectPullup+0x174>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	8d c0       	rjmp	.+282    	; 0xf2e <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
     e14:	8c 81       	ldd	r24, Y+4	; 0x04
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	71 f5       	brne	.+92     	; 0xe76 <DIO_enumConnectPullup+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
     e1a:	a0 e5       	ldi	r26, 0x50	; 80
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e0 e5       	ldi	r30, 0x50	; 80
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8b 7f       	andi	r24, 0xFB	; 251
     e26:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
     e28:	a4 e3       	ldi	r26, 0x34	; 52
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e4 e3       	ldi	r30, 0x34	; 52
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_enumConnectPullup+0x1b4>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	2a 95       	dec	r18
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_enumConnectPullup+0x1b0>
     e48:	80 95       	com	r24
     e4a:	84 23       	and	r24, r20
     e4c:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
     e4e:	a5 e3       	ldi	r26, 0x35	; 53
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e5 e3       	ldi	r30, 0x35	; 53
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_enumConnectPullup+0x1dc>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_enumConnectPullup+0x1d8>
     e70:	84 2b       	or	r24, r20
     e72:	8c 93       	st	X, r24
     e74:	5c c0       	rjmp	.+184    	; 0xf2e <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
     e76:	a5 e3       	ldi	r26, 0x35	; 53
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e5 e3       	ldi	r30, 0x35	; 53
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_enumConnectPullup+0x204>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_enumConnectPullup+0x200>
     e98:	80 95       	com	r24
     e9a:	84 23       	and	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	47 c0       	rjmp	.+142    	; 0xf2e <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	71 f5       	brne	.+92     	; 0xf02 <DIO_enumConnectPullup+0x272>
			{
				CLR_BIT(SFIOR,PUD);
     ea6:	a0 e5       	ldi	r26, 0x50	; 80
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e0 e5       	ldi	r30, 0x50	; 80
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8b 7f       	andi	r24, 0xFB	; 251
     eb2:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
     eb4:	a1 e3       	ldi	r26, 0x31	; 49
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e1 e3       	ldi	r30, 0x31	; 49
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_enumConnectPullup+0x240>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	2a 95       	dec	r18
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_enumConnectPullup+0x23c>
     ed4:	80 95       	com	r24
     ed6:	84 23       	and	r24, r20
     ed8:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
     eda:	a2 e3       	ldi	r26, 0x32	; 50
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e2 e3       	ldi	r30, 0x32	; 50
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_enumConnectPullup+0x268>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_enumConnectPullup+0x264>
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	16 c0       	rjmp	.+44     	; 0xf2e <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
     f02:	a2 e3       	ldi	r26, 0x32	; 50
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e2 e3       	ldi	r30, 0x32	; 50
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_enumConnectPullup+0x290>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_enumConnectPullup+0x28c>
     f24:	80 95       	com	r24
     f26:	84 23       	and	r24, r20
     f28:	8c 93       	st	X, r24
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <DIO_enumConnectPullup+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
     f2c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     f2e:	89 81       	ldd	r24, Y+1	; 0x01


}
     f30:	26 96       	adiw	r28, 0x06	; 6
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <DIO_enumSetPortDirection>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	00 d0       	rcall	.+0      	; 0xf48 <DIO_enumSetPortDirection+0x6>
     f48:	00 d0       	rcall	.+0      	; 0xf4a <DIO_enumSetPortDirection+0x8>
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	8a 83       	std	Y+2, r24	; 0x02
     f52:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	84 30       	cpi	r24, 0x04	; 4
     f5c:	a8 f5       	brcc	.+106    	; 0xfc8 <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	3d 83       	std	Y+5, r19	; 0x05
     f66:	2c 83       	std	Y+4, r18	; 0x04
     f68:	8c 81       	ldd	r24, Y+4	; 0x04
     f6a:	9d 81       	ldd	r25, Y+5	; 0x05
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	91 05       	cpc	r25, r1
     f70:	d1 f0       	breq	.+52     	; 0xfa6 <DIO_enumSetPortDirection+0x64>
     f72:	2c 81       	ldd	r18, Y+4	; 0x04
     f74:	3d 81       	ldd	r19, Y+5	; 0x05
     f76:	22 30       	cpi	r18, 0x02	; 2
     f78:	31 05       	cpc	r19, r1
     f7a:	2c f4       	brge	.+10     	; 0xf86 <DIO_enumSetPortDirection+0x44>
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	9d 81       	ldd	r25, Y+5	; 0x05
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	61 f0       	breq	.+24     	; 0xf9c <DIO_enumSetPortDirection+0x5a>
     f84:	1f c0       	rjmp	.+62     	; 0xfc4 <DIO_enumSetPortDirection+0x82>
     f86:	2c 81       	ldd	r18, Y+4	; 0x04
     f88:	3d 81       	ldd	r19, Y+5	; 0x05
     f8a:	22 30       	cpi	r18, 0x02	; 2
     f8c:	31 05       	cpc	r19, r1
     f8e:	81 f0       	breq	.+32     	; 0xfb0 <DIO_enumSetPortDirection+0x6e>
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	91 05       	cpc	r25, r1
     f98:	81 f0       	breq	.+32     	; 0xfba <DIO_enumSetPortDirection+0x78>
     f9a:	14 c0       	rjmp	.+40     	; 0xfc4 <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
     f9c:	ea e3       	ldi	r30, 0x3A	; 58
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	80 83       	st	Z, r24
     fa4:	12 c0       	rjmp	.+36     	; 0xfca <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
     fa6:	e7 e3       	ldi	r30, 0x37	; 55
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	80 83       	st	Z, r24
     fae:	0d c0       	rjmp	.+26     	; 0xfca <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
     fb0:	e4 e3       	ldi	r30, 0x34	; 52
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	80 83       	st	Z, r24
     fb8:	08 c0       	rjmp	.+16     	; 0xfca <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
     fba:	e1 e3       	ldi	r30, 0x31	; 49
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	80 83       	st	Z, r24
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <DIO_enumSetPortDirection+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
     fc8:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
     fca:	89 81       	ldd	r24, Y+1	; 0x01
}
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	08 95       	ret

00000fdc <DIO_enumSetPortValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <DIO_enumSetPortValue+0x6>
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <DIO_enumSetPortValue+0x8>
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	8a 83       	std	Y+2, r24	; 0x02
     fec:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	84 30       	cpi	r24, 0x04	; 4
     ff6:	a8 f5       	brcc	.+106    	; 0x1062 <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	3d 83       	std	Y+5, r19	; 0x05
    1000:	2c 83       	std	Y+4, r18	; 0x04
    1002:	8c 81       	ldd	r24, Y+4	; 0x04
    1004:	9d 81       	ldd	r25, Y+5	; 0x05
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	91 05       	cpc	r25, r1
    100a:	d1 f0       	breq	.+52     	; 0x1040 <DIO_enumSetPortValue+0x64>
    100c:	2c 81       	ldd	r18, Y+4	; 0x04
    100e:	3d 81       	ldd	r19, Y+5	; 0x05
    1010:	22 30       	cpi	r18, 0x02	; 2
    1012:	31 05       	cpc	r19, r1
    1014:	2c f4       	brge	.+10     	; 0x1020 <DIO_enumSetPortValue+0x44>
    1016:	8c 81       	ldd	r24, Y+4	; 0x04
    1018:	9d 81       	ldd	r25, Y+5	; 0x05
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	61 f0       	breq	.+24     	; 0x1036 <DIO_enumSetPortValue+0x5a>
    101e:	1f c0       	rjmp	.+62     	; 0x105e <DIO_enumSetPortValue+0x82>
    1020:	2c 81       	ldd	r18, Y+4	; 0x04
    1022:	3d 81       	ldd	r19, Y+5	; 0x05
    1024:	22 30       	cpi	r18, 0x02	; 2
    1026:	31 05       	cpc	r19, r1
    1028:	81 f0       	breq	.+32     	; 0x104a <DIO_enumSetPortValue+0x6e>
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	9d 81       	ldd	r25, Y+5	; 0x05
    102e:	83 30       	cpi	r24, 0x03	; 3
    1030:	91 05       	cpc	r25, r1
    1032:	81 f0       	breq	.+32     	; 0x1054 <DIO_enumSetPortValue+0x78>
    1034:	14 c0       	rjmp	.+40     	; 0x105e <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    1036:	eb e3       	ldi	r30, 0x3B	; 59
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	80 83       	st	Z, r24
    103e:	12 c0       	rjmp	.+36     	; 0x1064 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    1040:	e8 e3       	ldi	r30, 0x38	; 56
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	80 83       	st	Z, r24
    1048:	0d c0       	rjmp	.+26     	; 0x1064 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    104a:	e5 e3       	ldi	r30, 0x35	; 53
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	80 83       	st	Z, r24
    1052:	08 c0       	rjmp	.+16     	; 0x1064 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    1054:	e2 e3       	ldi	r30, 0x32	; 50
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	80 83       	st	Z, r24
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
    105e:	19 82       	std	Y+1, r1	; 0x01
    1060:	01 c0       	rjmp	.+2      	; 0x1064 <DIO_enumSetPortValue+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
    1062:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    1064:	89 81       	ldd	r24, Y+1	; 0x01
}
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <DIO_enumTogglePortValue>:
 * Parameters :
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	00 d0       	rcall	.+0      	; 0x107c <DIO_enumTogglePortValue+0x6>
    107c:	00 d0       	rcall	.+0      	; 0x107e <DIO_enumTogglePortValue+0x8>
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PORT <= DIO_PORTD)
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	84 30       	cpi	r24, 0x04	; 4
    108c:	08 f0       	brcs	.+2      	; 0x1090 <DIO_enumTogglePortValue+0x1a>
    108e:	3f c0       	rjmp	.+126    	; 0x110e <DIO_enumTogglePortValue+0x98>
	{
		switch (Copy_u8PORT)
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	3c 83       	std	Y+4, r19	; 0x04
    1098:	2b 83       	std	Y+3, r18	; 0x03
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	91 05       	cpc	r25, r1
    10a2:	e9 f0       	breq	.+58     	; 0x10de <DIO_enumTogglePortValue+0x68>
    10a4:	2b 81       	ldd	r18, Y+3	; 0x03
    10a6:	3c 81       	ldd	r19, Y+4	; 0x04
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	2c f4       	brge	.+10     	; 0x10b8 <DIO_enumTogglePortValue+0x42>
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	61 f0       	breq	.+24     	; 0x10ce <DIO_enumTogglePortValue+0x58>
    10b6:	2c c0       	rjmp	.+88     	; 0x1110 <DIO_enumTogglePortValue+0x9a>
    10b8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ba:	3c 81       	ldd	r19, Y+4	; 0x04
    10bc:	22 30       	cpi	r18, 0x02	; 2
    10be:	31 05       	cpc	r19, r1
    10c0:	b1 f0       	breq	.+44     	; 0x10ee <DIO_enumTogglePortValue+0x78>
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	83 30       	cpi	r24, 0x03	; 3
    10c8:	91 05       	cpc	r25, r1
    10ca:	c9 f0       	breq	.+50     	; 0x10fe <DIO_enumTogglePortValue+0x88>
    10cc:	21 c0       	rjmp	.+66     	; 0x1110 <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
    10ce:	ab e3       	ldi	r26, 0x3B	; 59
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	eb e3       	ldi	r30, 0x3B	; 59
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	80 95       	com	r24
    10da:	8c 93       	st	X, r24
    10dc:	19 c0       	rjmp	.+50     	; 0x1110 <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
    10de:	a8 e3       	ldi	r26, 0x38	; 56
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e8 e3       	ldi	r30, 0x38	; 56
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 95       	com	r24
    10ea:	8c 93       	st	X, r24
    10ec:	11 c0       	rjmp	.+34     	; 0x1110 <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
    10ee:	a5 e3       	ldi	r26, 0x35	; 53
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e5 e3       	ldi	r30, 0x35	; 53
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	80 95       	com	r24
    10fa:	8c 93       	st	X, r24
    10fc:	09 c0       	rjmp	.+18     	; 0x1110 <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTD : PORTD_Register = ~PORTD_Register ;
    10fe:	a2 e3       	ldi	r26, 0x32	; 50
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e2 e3       	ldi	r30, 0x32	; 50
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	80 95       	com	r24
    110a:	8c 93       	st	X, r24
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <DIO_enumTogglePortValue+0x9a>
		break ;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    110e:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
}
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <DIO_enumGetPortValue>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_ErrorStatus   DIO_enumGetPortValue         ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	00 d0       	rcall	.+0      	; 0x1126 <DIO_enumGetPortValue+0x6>
    1126:	00 d0       	rcall	.+0      	; 0x1128 <DIO_enumGetPortValue+0x8>
    1128:	00 d0       	rcall	.+0      	; 0x112a <DIO_enumGetPortValue+0xa>
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	8a 83       	std	Y+2, r24	; 0x02
    1130:	7c 83       	std	Y+4, r23	; 0x04
    1132:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	e8 f5       	brcc	.+122    	; 0x11b8 <DIO_enumGetPortValue+0x98>
	{
		switch (Copy_u8PORT)
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	3e 83       	std	Y+6, r19	; 0x06
    1146:	2d 83       	std	Y+5, r18	; 0x05
    1148:	8d 81       	ldd	r24, Y+5	; 0x05
    114a:	9e 81       	ldd	r25, Y+6	; 0x06
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	91 05       	cpc	r25, r1
    1150:	e1 f0       	breq	.+56     	; 0x118a <DIO_enumGetPortValue+0x6a>
    1152:	2d 81       	ldd	r18, Y+5	; 0x05
    1154:	3e 81       	ldd	r19, Y+6	; 0x06
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	2c f4       	brge	.+10     	; 0x1166 <DIO_enumGetPortValue+0x46>
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	61 f0       	breq	.+24     	; 0x117c <DIO_enumGetPortValue+0x5c>
    1164:	27 c0       	rjmp	.+78     	; 0x11b4 <DIO_enumGetPortValue+0x94>
    1166:	2d 81       	ldd	r18, Y+5	; 0x05
    1168:	3e 81       	ldd	r19, Y+6	; 0x06
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	a1 f0       	breq	.+40     	; 0x1198 <DIO_enumGetPortValue+0x78>
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	9e 81       	ldd	r25, Y+6	; 0x06
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	91 05       	cpc	r25, r1
    1178:	b1 f0       	breq	.+44     	; 0x11a6 <DIO_enumGetPortValue+0x86>
    117a:	1c c0       	rjmp	.+56     	; 0x11b4 <DIO_enumGetPortValue+0x94>
		{
		case DIO_PORTA :
			*Copy_PtrData = PINA_Register  ;
    117c:	e9 e3       	ldi	r30, 0x39	; 57
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	eb 81       	ldd	r30, Y+3	; 0x03
    1184:	fc 81       	ldd	r31, Y+4	; 0x04
    1186:	80 83       	st	Z, r24
    1188:	18 c0       	rjmp	.+48     	; 0x11ba <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
    118a:	e6 e3       	ldi	r30, 0x36	; 54
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	eb 81       	ldd	r30, Y+3	; 0x03
    1192:	fc 81       	ldd	r31, Y+4	; 0x04
    1194:	80 83       	st	Z, r24
    1196:	11 c0       	rjmp	.+34     	; 0x11ba <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
    1198:	e3 e3       	ldi	r30, 0x33	; 51
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	eb 81       	ldd	r30, Y+3	; 0x03
    11a0:	fc 81       	ldd	r31, Y+4	; 0x04
    11a2:	80 83       	st	Z, r24
    11a4:	0a c0       	rjmp	.+20     	; 0x11ba <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
    11a6:	e0 e3       	ldi	r30, 0x30	; 48
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	eb 81       	ldd	r30, Y+3	; 0x03
    11ae:	fc 81       	ldd	r31, Y+4	; 0x04
    11b0:	80 83       	st	Z, r24
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <DIO_enumGetPortValue+0x9a>
			break ;
		default : LOC_enumState = DIO_NOK ;
    11b4:	19 82       	std	Y+1, r1	; 0x01
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <DIO_enumGetPortValue+0x9a>
		break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    11b8:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    11bc:	26 96       	adiw	r28, 0x06	; 6
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <DIO_voidWriteHighNibbles>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <DIO_voidWriteHighNibbles+0x6>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <DIO_voidWriteHighNibbles+0x8>
    11d6:	0f 92       	push	r0
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	8a 83       	std	Y+2, r24	; 0x02
    11de:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	84 30       	cpi	r24, 0x04	; 4
    11e8:	08 f0       	brcs	.+2      	; 0x11ec <DIO_voidWriteHighNibbles+0x1e>
    11ea:	63 c0       	rjmp	.+198    	; 0x12b2 <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	82 95       	swap	r24
    11f0:	80 7f       	andi	r24, 0xF0	; 240
    11f2:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3d 83       	std	Y+5, r19	; 0x05
    11fc:	2c 83       	std	Y+4, r18	; 0x04
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	9d 81       	ldd	r25, Y+5	; 0x05
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	91 05       	cpc	r25, r1
    1206:	29 f1       	breq	.+74     	; 0x1252 <DIO_voidWriteHighNibbles+0x84>
    1208:	2c 81       	ldd	r18, Y+4	; 0x04
    120a:	3d 81       	ldd	r19, Y+5	; 0x05
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	2c f4       	brge	.+10     	; 0x121c <DIO_voidWriteHighNibbles+0x4e>
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	9d 81       	ldd	r25, Y+5	; 0x05
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	61 f0       	breq	.+24     	; 0x1232 <DIO_voidWriteHighNibbles+0x64>
    121a:	4c c0       	rjmp	.+152    	; 0x12b4 <DIO_voidWriteHighNibbles+0xe6>
    121c:	2c 81       	ldd	r18, Y+4	; 0x04
    121e:	3d 81       	ldd	r19, Y+5	; 0x05
    1220:	22 30       	cpi	r18, 0x02	; 2
    1222:	31 05       	cpc	r19, r1
    1224:	31 f1       	breq	.+76     	; 0x1272 <DIO_voidWriteHighNibbles+0xa4>
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	91 05       	cpc	r25, r1
    122e:	89 f1       	breq	.+98     	; 0x1292 <DIO_voidWriteHighNibbles+0xc4>
    1230:	41 c0       	rjmp	.+130    	; 0x12b4 <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    1232:	ab e3       	ldi	r26, 0x3B	; 59
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	eb e3       	ldi	r30, 0x3B	; 59
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	8f 70       	andi	r24, 0x0F	; 15
    123e:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    1240:	ab e3       	ldi	r26, 0x3B	; 59
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	eb e3       	ldi	r30, 0x3B	; 59
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	90 81       	ld	r25, Z
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	89 2b       	or	r24, r25
    124e:	8c 93       	st	X, r24
    1250:	31 c0       	rjmp	.+98     	; 0x12b4 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    1252:	a8 e3       	ldi	r26, 0x38	; 56
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e8 e3       	ldi	r30, 0x38	; 56
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8f 70       	andi	r24, 0x0F	; 15
    125e:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
    1260:	a8 e3       	ldi	r26, 0x38	; 56
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e8 e3       	ldi	r30, 0x38	; 56
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	90 81       	ld	r25, Z
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	89 2b       	or	r24, r25
    126e:	8c 93       	st	X, r24
    1270:	21 c0       	rjmp	.+66     	; 0x12b4 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    1272:	a5 e3       	ldi	r26, 0x35	; 53
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e5 e3       	ldi	r30, 0x35	; 53
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	8f 70       	andi	r24, 0x0F	; 15
    127e:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
    1280:	a5 e3       	ldi	r26, 0x35	; 53
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e5 e3       	ldi	r30, 0x35	; 53
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	90 81       	ld	r25, Z
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	89 2b       	or	r24, r25
    128e:	8c 93       	st	X, r24
    1290:	11 c0       	rjmp	.+34     	; 0x12b4 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    1292:	a2 e3       	ldi	r26, 0x32	; 50
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e2 e3       	ldi	r30, 0x32	; 50
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8f 70       	andi	r24, 0x0F	; 15
    129e:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
    12a0:	a2 e3       	ldi	r26, 0x32	; 50
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e2 e3       	ldi	r30, 0x32	; 50
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	90 81       	ld	r25, Z
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	89 2b       	or	r24, r25
    12ae:	8c 93       	st	X, r24
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    12b2:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    12b4:	89 81       	ldd	r24, Y+1	; 0x01

}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <DIO_voidWriteLowNibbles>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <DIO_voidWriteLowNibbles+0x6>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <DIO_voidWriteLowNibbles+0x8>
    12ce:	0f 92       	push	r0
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	8a 83       	std	Y+2, r24	; 0x02
    12d6:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	89 83       	std	Y+1, r24	; 0x01


	if ( (Copy_u8PORT <= DIO_PORTD))
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	84 30       	cpi	r24, 0x04	; 4
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <DIO_voidWriteLowNibbles+0x1e>
    12e2:	62 c0       	rjmp	.+196    	; 0x13a8 <DIO_voidWriteLowNibbles+0xe2>
	{
		Copy_u8value&=0x0f;
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	8f 70       	andi	r24, 0x0F	; 15
    12e8:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	3d 83       	std	Y+5, r19	; 0x05
    12f2:	2c 83       	std	Y+4, r18	; 0x04
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	9d 81       	ldd	r25, Y+5	; 0x05
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	91 05       	cpc	r25, r1
    12fc:	29 f1       	breq	.+74     	; 0x1348 <DIO_voidWriteLowNibbles+0x82>
    12fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1300:	3d 81       	ldd	r19, Y+5	; 0x05
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	2c f4       	brge	.+10     	; 0x1312 <DIO_voidWriteLowNibbles+0x4c>
    1308:	8c 81       	ldd	r24, Y+4	; 0x04
    130a:	9d 81       	ldd	r25, Y+5	; 0x05
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	61 f0       	breq	.+24     	; 0x1328 <DIO_voidWriteLowNibbles+0x62>
    1310:	4c c0       	rjmp	.+152    	; 0x13aa <DIO_voidWriteLowNibbles+0xe4>
    1312:	2c 81       	ldd	r18, Y+4	; 0x04
    1314:	3d 81       	ldd	r19, Y+5	; 0x05
    1316:	22 30       	cpi	r18, 0x02	; 2
    1318:	31 05       	cpc	r19, r1
    131a:	31 f1       	breq	.+76     	; 0x1368 <DIO_voidWriteLowNibbles+0xa2>
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	83 30       	cpi	r24, 0x03	; 3
    1322:	91 05       	cpc	r25, r1
    1324:	89 f1       	breq	.+98     	; 0x1388 <DIO_voidWriteLowNibbles+0xc2>
    1326:	41 c0       	rjmp	.+130    	; 0x13aa <DIO_voidWriteLowNibbles+0xe4>
		{
		case DIO_PORTA :
			PORTA_Register &= 0xf0;                 //Set only the high nibble of the port A by the given value
    1328:	ab e3       	ldi	r26, 0x3B	; 59
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	eb e3       	ldi	r30, 0x3B	; 59
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	80 7f       	andi	r24, 0xF0	; 240
    1334:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8value;
    1336:	ab e3       	ldi	r26, 0x3B	; 59
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	eb e3       	ldi	r30, 0x3B	; 59
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	90 81       	ld	r25, Z
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	89 2b       	or	r24, r25
    1344:	8c 93       	st	X, r24
    1346:	31 c0       	rjmp	.+98     	; 0x13aa <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
    1348:	a8 e3       	ldi	r26, 0x38	; 56
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e8 e3       	ldi	r30, 0x38	; 56
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	80 7f       	andi	r24, 0xF0	; 240
    1354:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8value;
    1356:	a8 e3       	ldi	r26, 0x38	; 56
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e8 e3       	ldi	r30, 0x38	; 56
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	90 81       	ld	r25, Z
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	89 2b       	or	r24, r25
    1364:	8c 93       	st	X, r24
    1366:	21 c0       	rjmp	.+66     	; 0x13aa <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
    1368:	a5 e3       	ldi	r26, 0x35	; 53
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e5 e3       	ldi	r30, 0x35	; 53
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	80 7f       	andi	r24, 0xF0	; 240
    1374:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8value;
    1376:	a5 e3       	ldi	r26, 0x35	; 53
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e5 e3       	ldi	r30, 0x35	; 53
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	90 81       	ld	r25, Z
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	89 2b       	or	r24, r25
    1384:	8c 93       	st	X, r24
    1386:	11 c0       	rjmp	.+34     	; 0x13aa <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTD:
			PORTD_Register &= 0xf0;                 //Set only the high nibble of the port D by the given value
    1388:	a2 e3       	ldi	r26, 0x32	; 50
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e2 e3       	ldi	r30, 0x32	; 50
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	80 7f       	andi	r24, 0xF0	; 240
    1394:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8value;
    1396:	a2 e3       	ldi	r26, 0x32	; 50
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e2 e3       	ldi	r30, 0x32	; 50
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	90 81       	ld	r25, Z
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	89 2b       	or	r24, r25
    13a4:	8c 93       	st	X, r24
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <DIO_voidWriteLowNibbles+0xe4>


	}
	else
	{
		LOC_enumState = DIO_NOK;
    13a8:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    13aa:	89 81       	ldd	r24, Y+1	; 0x01

}
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <TIMER0_voidInit>:
static void (*TIMERS_pvCallBackFunc[16])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_voidInit(void)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    13c4:	a3 e5       	ldi	r26, 0x53	; 83
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e3 e5       	ldi	r30, 0x53	; 83
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8f 7b       	andi	r24, 0xBF	; 191
    13d0:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    13d2:	a3 e5       	ldi	r26, 0x53	; 83
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e3 e5       	ldi	r30, 0x53	; 83
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	87 7f       	andi	r24, 0xF7	; 247
    13de:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
    13e0:	e2 e5       	ldi	r30, 0x52	; 82
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 ec       	ldi	r24, 0xC0	; 192
    13e6:	80 83       	st	Z, r24

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
			#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE0) ;
    13e8:	a9 e5       	ldi	r26, 0x59	; 89
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e9 e5       	ldi	r30, 0x59	; 89
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	81 60       	ori	r24, 0x01	; 1
    13f4:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    13f6:	a3 e5       	ldi	r26, 0x53	; 83
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e3 e5       	ldi	r30, 0x53	; 83
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	88 7f       	andi	r24, 0xF8	; 248
    1402:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    1404:	a3 e5       	ldi	r26, 0x53	; 83
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e3 e5       	ldi	r30, 0x53	; 83
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	82 60       	ori	r24, 0x02	; 2
    1410:	8c 93       	st	X, r24
}
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1420:	af e4       	ldi	r26, 0x4F	; 79
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	ef e4       	ldi	r30, 0x4F	; 79
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	8e 7f       	andi	r24, 0xFE	; 254
    142c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    142e:	af e4       	ldi	r26, 0x4F	; 79
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	ef e4       	ldi	r30, 0x4F	; 79
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	82 60       	ori	r24, 0x02	; 2
    143a:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    143c:	ae e4       	ldi	r26, 0x4E	; 78
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ee e4       	ldi	r30, 0x4E	; 78
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	88 60       	ori	r24, 0x08	; 8
    1448:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    144a:	ae e4       	ldi	r26, 0x4E	; 78
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	ee e4       	ldi	r30, 0x4E	; 78
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	80 61       	ori	r24, 0x10	; 16
    1456:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    1458:	ea e4       	ldi	r30, 0x4A	; 74
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	84 ef       	ldi	r24, 0xF4	; 244
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	91 83       	std	Z+1, r25	; 0x01
    1462:	80 83       	st	Z, r24
			OCR1B = TIMER1_CTCB_VAL ;
    1464:	e8 e4       	ldi	r30, 0x48	; 72
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	11 82       	std	Z+1, r1	; 0x01
    146a:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    146c:	e6 e4       	ldi	r30, 0x46	; 70
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 e2       	ldi	r24, 0x20	; 32
    1472:	9e e4       	ldi	r25, 0x4E	; 78
    1474:	91 83       	std	Z+1, r25	; 0x01
    1476:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    1478:	ae e4       	ldi	r26, 0x4E	; 78
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	ee e4       	ldi	r30, 0x4E	; 78
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	80 64       	ori	r24, 0x40	; 64
    1484:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    1486:	af e4       	ldi	r26, 0x4F	; 79
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	ef e4       	ldi	r30, 0x4F	; 79
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	8f 7b       	andi	r24, 0xBF	; 191
    1492:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    1494:	af e4       	ldi	r26, 0x4F	; 79
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	ef e4       	ldi	r30, 0x4F	; 79
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	80 68       	ori	r24, 0x80	; 128
    14a0:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    14a2:	af e4       	ldi	r26, 0x4F	; 79
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	ef e4       	ldi	r30, 0x4F	; 79
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	8f 7e       	andi	r24, 0xEF	; 239
    14ae:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    14b0:	af e4       	ldi	r26, 0x4F	; 79
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	ef e4       	ldi	r30, 0x4F	; 79
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	80 62       	ori	r24, 0x20	; 32
    14bc:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    14be:	a9 e5       	ldi	r26, 0x59	; 89
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e9 e5       	ldi	r30, 0x59	; 89
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	8b 7f       	andi	r24, 0xFB	; 251
    14ca:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    14cc:	a9 e5       	ldi	r26, 0x59	; 89
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e9 e5       	ldi	r30, 0x59	; 89
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	8f 7e       	andi	r24, 0xEF	; 239
    14d8:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    14da:	a9 e5       	ldi	r26, 0x59	; 89
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e9 e5       	ldi	r30, 0x59	; 89
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	87 7f       	andi	r24, 0xF7	; 247
    14e6:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    14e8:	a9 e5       	ldi	r26, 0x59	; 89
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e9 e5       	ldi	r30, 0x59	; 89
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	8f 7d       	andi	r24, 0xDF	; 223
    14f4:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    14f6:	ae e4       	ldi	r26, 0x4E	; 78
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	ee e4       	ldi	r30, 0x4E	; 78
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	88 7f       	andi	r24, 0xF8	; 248
    1502:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    1504:	ae e4       	ldi	r26, 0x4E	; 78
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	ee e4       	ldi	r30, 0x4E	; 78
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	82 60       	ori	r24, 0x02	; 2
    1510:	8c 93       	st	X, r24


}
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	08 95       	ret

00001518 <TIMER2_voidInit>:

void TIMER2_voidInit(void)
{
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
			OCR2 = TIMER2_CTC_VAL ;

		#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

			/*Initialize Waveform Generation Mode as CTC Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    1520:	a5 e4       	ldi	r26, 0x45	; 69
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e5 e4       	ldi	r30, 0x45	; 69
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8f 7b       	andi	r24, 0xBF	; 191
    152c:	8c 93       	st	X, r24
			SET_BIT(TCCR2 , TCCR2_WGM21) ;
    152e:	a5 e4       	ldi	r26, 0x45	; 69
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e5 e4       	ldi	r30, 0x45	; 69
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	88 60       	ori	r24, 0x08	; 8
    153a:	8c 93       	st	X, r24

			/*Set the Required CTC Value*/
			OCR2 = TIMER2_CTC_VAL ;
    153c:	e3 e4       	ldi	r30, 0x43	; 67
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8d e7       	ldi	r24, 0x7D	; 125
    1542:	80 83       	st	Z, r24

			/*Timer2 Compare Match Interrupt Enable*/
			#if TIMER2_CTC_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE2) ;
			#elif TIMER2_CTC_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_OCIE2) ;
    1544:	a9 e5       	ldi	r26, 0x59	; 89
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e9 e5       	ldi	r30, 0x59	; 89
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 68       	ori	r24, 0x80	; 128
    1550:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    1552:	a5 e4       	ldi	r26, 0x45	; 69
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e5 e4       	ldi	r30, 0x45	; 69
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	88 7f       	andi	r24, 0xF8	; 248
    155e:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    1560:	a5 e4       	ldi	r26, 0x45	; 69
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e4       	ldi	r30, 0x45	; 69
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	83 60       	ori	r24, 0x03	; 3
    156c:	8c 93       	st	X, r24
}
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <TIMER0_voidSetPreload>:

/*******************************************************************************************************************/
void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	0f 92       	push	r0
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    1580:	e2 e5       	ldi	r30, 0x52	; 82
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	80 83       	st	Z, r24
}
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	00 d0       	rcall	.+0      	; 0x1596 <TIMER1_voidSetPreload+0x6>
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    159e:	ec e4       	ldi	r30, 0x4C	; 76
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	80 83       	st	Z, r24
}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <TIMER2_voidSetPreload>:


void TIMER2_voidSetPreload (u8 Copy_u8Preload)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	0f 92       	push	r0
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    15c0:	e4 e4       	ldi	r30, 0x44	; 68
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	80 83       	st	Z, r24
}
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	0f 92       	push	r0
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    15dc:	ec e5       	ldi	r30, 0x5C	; 92
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	80 83       	st	Z, r24
}
    15e4:	0f 90       	pop	r0
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	08 95       	ret

000015ec <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA (u16 Copy_u16CTCA)
{
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <TIMER1_voidSetCTCA+0x6>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	9a 83       	std	Y+2, r25	; 0x02
    15f8:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    15fa:	ea e4       	ldi	r30, 0x4A	; 74
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
}
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB (u16 Copy_u16CTCB)
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <TIMER1_voidSetCTCB+0x6>
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	9a 83       	std	Y+2, r25	; 0x02
    161c:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    161e:	e8 e4       	ldi	r30, 0x48	; 72
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	91 83       	std	Z+1, r25	; 0x01
    1628:	80 83       	st	Z, r24
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <TIMER2_voidSetCTC>:

void TIMER2_voidSetCTC (u8 Copy_u8CTC)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	0f 92       	push	r0
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    1640:	e3 e4       	ldi	r30, 0x43	; 67
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	80 83       	st	Z, r24
}
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <TIMER1_voidSetICR1+0x6>
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	9a 83       	std	Y+2, r25	; 0x02
    165c:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    165e:	e6 e4       	ldi	r30, 0x46	; 70
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	9a 81       	ldd	r25, Y+2	; 0x02
    1666:	91 83       	std	Z+1, r25	; 0x01
    1668:	80 83       	st	Z, r24
}
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    167c:	e2 e5       	ldi	r30, 0x52	; 82
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
}
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1690:	ec e4       	ldi	r30, 0x4C	; 76
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
}
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    16a6:	e4 e4       	ldi	r30, 0x44	; 68
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
}
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <TIMER_voidSetPWM>:

/*******************************************************************************************************************/

void TIMER_voidSetPWM(u16 Copy_u16CompareValue)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <TIMER_voidSetPWM+0x6>
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	9a 83       	std	Y+2, r25	; 0x02
    16be:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    16c0:	ea e4       	ldi	r30, 0x4A	; 74
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	9a 81       	ldd	r25, Y+2	; 0x02
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	80 83       	st	Z, r24
}
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <TIMER_voidICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_voidICUInitEnable(void)
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    16de:	ae e4       	ldi	r26, 0x4E	; 78
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	ee e4       	ldi	r30, 0x4E	; 78
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	80 64       	ori	r24, 0x40	; 64
    16ea:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    16ec:	a9 e5       	ldi	r26, 0x59	; 89
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e9 e5       	ldi	r30, 0x59	; 89
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	80 62       	ori	r24, 0x20	; 32
    16f8:	8c 93       	st	X, r24
}
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <TIMER_voidICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
    1700:	df 93       	push	r29
    1702:	cf 93       	push	r28
    1704:	00 d0       	rcall	.+0      	; 0x1706 <TIMER_voidICUSetTriggerEdge+0x6>
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    170c:	19 82       	std	Y+1, r1	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	41 f4       	brne	.+16     	; 0x1724 <TIMER_voidICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1714:	ae e4       	ldi	r26, 0x4E	; 78
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	ee e4       	ldi	r30, 0x4E	; 78
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	80 64       	ori	r24, 0x40	; 64
    1720:	8c 93       	st	X, r24
    1722:	0d c0       	rjmp	.+26     	; 0x173e <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	88 23       	and	r24, r24
    1728:	41 f4       	brne	.+16     	; 0x173a <TIMER_voidICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    172a:	ae e4       	ldi	r26, 0x4E	; 78
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	ee e4       	ldi	r30, 0x4E	; 78
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	8f 7b       	andi	r24, 0xBF	; 191
    1736:	8c 93       	st	X, r24
    1738:	02 c0       	rjmp	.+4      	; 0x173e <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    173e:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <TIMER_voidICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUEnableInterrupt(void)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1752:	a9 e5       	ldi	r26, 0x59	; 89
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e9 e5       	ldi	r30, 0x59	; 89
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	80 62       	ori	r24, 0x20	; 32
    175e:	8c 93       	st	X, r24
}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <TIMER_voidICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUDisableInterrupt(void)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    176e:	a9 e5       	ldi	r26, 0x59	; 89
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e9 e5       	ldi	r30, 0x59	; 89
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8f 7d       	andi	r24, 0xDF	; 223
    177a:	8c 93       	st	X, r24
}
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    178a:	e6 e4       	ldi	r30, 0x46	; 70
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	91 81       	ldd	r25, Z+1	; 0x01
}
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <TIMER_voidWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    17a0:	a1 e4       	ldi	r26, 0x41	; 65
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	e1 e4       	ldi	r30, 0x41	; 65
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	88 7f       	andi	r24, 0xF8	; 248
    17ac:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    17ae:	a1 e4       	ldi	r26, 0x41	; 65
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e1 e4       	ldi	r30, 0x41	; 65
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	86 60       	ori	r24, 0x06	; 6
    17ba:	8c 93       	st	X, r24
}
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    17ca:	a1 e4       	ldi	r26, 0x41	; 65
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e1 e4       	ldi	r30, 0x41	; 65
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	88 60       	ori	r24, 0x08	; 8
    17d6:	8c 93       	st	X, r24
}
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <TIMER_voidWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    17e6:	a1 e4       	ldi	r26, 0x41	; 65
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e1 e4       	ldi	r30, 0x41	; 65
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	88 61       	ori	r24, 0x18	; 24
    17f2:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    17f4:	e1 e4       	ldi	r30, 0x41	; 65
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	10 82       	st	Z, r1
}
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	00 d0       	rcall	.+0      	; 0x1806 <TIMER_u8SetCallBack+0x6>
    1806:	00 d0       	rcall	.+0      	; 0x1808 <TIMER_u8SetCallBack+0x8>
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	9b 83       	std	Y+3, r25	; 0x03
    180e:	8a 83       	std	Y+2, r24	; 0x02
    1810:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    1812:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	9b 81       	ldd	r25, Y+3	; 0x03
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	69 f0       	breq	.+26     	; 0x1836 <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	88 2f       	mov	r24, r24
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	fc 01       	movw	r30, r24
    1828:	e6 59       	subi	r30, 0x96	; 150
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	9b 81       	ldd	r25, Y+3	; 0x03
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	80 83       	st	Z, r24
    1834:	02 c0       	rjmp	.+4      	; 0x183a <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    183a:	89 81       	ldd	r24, Y+1	; 0x01
}
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    184a:	1f 92       	push	r1
    184c:	0f 92       	push	r0
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	0f 92       	push	r0
    1852:	11 24       	eor	r1, r1
    1854:	2f 93       	push	r18
    1856:	3f 93       	push	r19
    1858:	4f 93       	push	r20
    185a:	5f 93       	push	r21
    185c:	6f 93       	push	r22
    185e:	7f 93       	push	r23
    1860:	8f 93       	push	r24
    1862:	9f 93       	push	r25
    1864:	af 93       	push	r26
    1866:	bf 93       	push	r27
    1868:	ef 93       	push	r30
    186a:	ff 93       	push	r31
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    1874:	80 91 80 00 	lds	r24, 0x0080
    1878:	90 91 81 00 	lds	r25, 0x0081
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	29 f0       	breq	.+10     	; 0x188a <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    1880:	e0 91 80 00 	lds	r30, 0x0080
    1884:	f0 91 81 00 	lds	r31, 0x0081
    1888:	09 95       	icall
	}
}
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	ff 91       	pop	r31
    1890:	ef 91       	pop	r30
    1892:	bf 91       	pop	r27
    1894:	af 91       	pop	r26
    1896:	9f 91       	pop	r25
    1898:	8f 91       	pop	r24
    189a:	7f 91       	pop	r23
    189c:	6f 91       	pop	r22
    189e:	5f 91       	pop	r21
    18a0:	4f 91       	pop	r20
    18a2:	3f 91       	pop	r19
    18a4:	2f 91       	pop	r18
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	0f 90       	pop	r0
    18ac:	1f 90       	pop	r1
    18ae:	18 95       	reti

000018b0 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    18b0:	1f 92       	push	r1
    18b2:	0f 92       	push	r0
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	0f 92       	push	r0
    18b8:	11 24       	eor	r1, r1
    18ba:	2f 93       	push	r18
    18bc:	3f 93       	push	r19
    18be:	4f 93       	push	r20
    18c0:	5f 93       	push	r21
    18c2:	6f 93       	push	r22
    18c4:	7f 93       	push	r23
    18c6:	8f 93       	push	r24
    18c8:	9f 93       	push	r25
    18ca:	af 93       	push	r26
    18cc:	bf 93       	push	r27
    18ce:	ef 93       	push	r30
    18d0:	ff 93       	push	r31
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    18da:	80 91 7e 00 	lds	r24, 0x007E
    18de:	90 91 7f 00 	lds	r25, 0x007F
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	29 f0       	breq	.+10     	; 0x18f0 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    18e6:	e0 91 7e 00 	lds	r30, 0x007E
    18ea:	f0 91 7f 00 	lds	r31, 0x007F
    18ee:	09 95       	icall
	}
}
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	ff 91       	pop	r31
    18f6:	ef 91       	pop	r30
    18f8:	bf 91       	pop	r27
    18fa:	af 91       	pop	r26
    18fc:	9f 91       	pop	r25
    18fe:	8f 91       	pop	r24
    1900:	7f 91       	pop	r23
    1902:	6f 91       	pop	r22
    1904:	5f 91       	pop	r21
    1906:	4f 91       	pop	r20
    1908:	3f 91       	pop	r19
    190a:	2f 91       	pop	r18
    190c:	0f 90       	pop	r0
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	0f 90       	pop	r0
    1912:	1f 90       	pop	r1
    1914:	18 95       	reti

00001916 <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    1916:	1f 92       	push	r1
    1918:	0f 92       	push	r0
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	0f 92       	push	r0
    191e:	11 24       	eor	r1, r1
    1920:	2f 93       	push	r18
    1922:	3f 93       	push	r19
    1924:	4f 93       	push	r20
    1926:	5f 93       	push	r21
    1928:	6f 93       	push	r22
    192a:	7f 93       	push	r23
    192c:	8f 93       	push	r24
    192e:	9f 93       	push	r25
    1930:	af 93       	push	r26
    1932:	bf 93       	push	r27
    1934:	ef 93       	push	r30
    1936:	ff 93       	push	r31
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    1940:	80 91 7c 00 	lds	r24, 0x007C
    1944:	90 91 7d 00 	lds	r25, 0x007D
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	29 f0       	breq	.+10     	; 0x1956 <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    194c:	e0 91 7c 00 	lds	r30, 0x007C
    1950:	f0 91 7d 00 	lds	r31, 0x007D
    1954:	09 95       	icall
	}
}
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	ff 91       	pop	r31
    195c:	ef 91       	pop	r30
    195e:	bf 91       	pop	r27
    1960:	af 91       	pop	r26
    1962:	9f 91       	pop	r25
    1964:	8f 91       	pop	r24
    1966:	7f 91       	pop	r23
    1968:	6f 91       	pop	r22
    196a:	5f 91       	pop	r21
    196c:	4f 91       	pop	r20
    196e:	3f 91       	pop	r19
    1970:	2f 91       	pop	r18
    1972:	0f 90       	pop	r0
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	0f 90       	pop	r0
    1978:	1f 90       	pop	r1
    197a:	18 95       	reti

0000197c <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    197c:	1f 92       	push	r1
    197e:	0f 92       	push	r0
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	0f 92       	push	r0
    1984:	11 24       	eor	r1, r1
    1986:	2f 93       	push	r18
    1988:	3f 93       	push	r19
    198a:	4f 93       	push	r20
    198c:	5f 93       	push	r21
    198e:	6f 93       	push	r22
    1990:	7f 93       	push	r23
    1992:	8f 93       	push	r24
    1994:	9f 93       	push	r25
    1996:	af 93       	push	r26
    1998:	bf 93       	push	r27
    199a:	ef 93       	push	r30
    199c:	ff 93       	push	r31
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    19a6:	80 91 7a 00 	lds	r24, 0x007A
    19aa:	90 91 7b 00 	lds	r25, 0x007B
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	29 f0       	breq	.+10     	; 0x19bc <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    19b2:	e0 91 7a 00 	lds	r30, 0x007A
    19b6:	f0 91 7b 00 	lds	r31, 0x007B
    19ba:	09 95       	icall
	}
}
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	ff 91       	pop	r31
    19c2:	ef 91       	pop	r30
    19c4:	bf 91       	pop	r27
    19c6:	af 91       	pop	r26
    19c8:	9f 91       	pop	r25
    19ca:	8f 91       	pop	r24
    19cc:	7f 91       	pop	r23
    19ce:	6f 91       	pop	r22
    19d0:	5f 91       	pop	r21
    19d2:	4f 91       	pop	r20
    19d4:	3f 91       	pop	r19
    19d6:	2f 91       	pop	r18
    19d8:	0f 90       	pop	r0
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	0f 90       	pop	r0
    19de:	1f 90       	pop	r1
    19e0:	18 95       	reti

000019e2 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    19e2:	1f 92       	push	r1
    19e4:	0f 92       	push	r0
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	0f 92       	push	r0
    19ea:	11 24       	eor	r1, r1
    19ec:	2f 93       	push	r18
    19ee:	3f 93       	push	r19
    19f0:	4f 93       	push	r20
    19f2:	5f 93       	push	r21
    19f4:	6f 93       	push	r22
    19f6:	7f 93       	push	r23
    19f8:	8f 93       	push	r24
    19fa:	9f 93       	push	r25
    19fc:	af 93       	push	r26
    19fe:	bf 93       	push	r27
    1a00:	ef 93       	push	r30
    1a02:	ff 93       	push	r31
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    1a0c:	80 91 78 00 	lds	r24, 0x0078
    1a10:	90 91 79 00 	lds	r25, 0x0079
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	29 f0       	breq	.+10     	; 0x1a22 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    1a18:	e0 91 78 00 	lds	r30, 0x0078
    1a1c:	f0 91 79 00 	lds	r31, 0x0079
    1a20:	09 95       	icall
	}
}
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	ff 91       	pop	r31
    1a28:	ef 91       	pop	r30
    1a2a:	bf 91       	pop	r27
    1a2c:	af 91       	pop	r26
    1a2e:	9f 91       	pop	r25
    1a30:	8f 91       	pop	r24
    1a32:	7f 91       	pop	r23
    1a34:	6f 91       	pop	r22
    1a36:	5f 91       	pop	r21
    1a38:	4f 91       	pop	r20
    1a3a:	3f 91       	pop	r19
    1a3c:	2f 91       	pop	r18
    1a3e:	0f 90       	pop	r0
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	0f 90       	pop	r0
    1a44:	1f 90       	pop	r1
    1a46:	18 95       	reti

00001a48 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    1a48:	1f 92       	push	r1
    1a4a:	0f 92       	push	r0
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	0f 92       	push	r0
    1a50:	11 24       	eor	r1, r1
    1a52:	2f 93       	push	r18
    1a54:	3f 93       	push	r19
    1a56:	4f 93       	push	r20
    1a58:	5f 93       	push	r21
    1a5a:	6f 93       	push	r22
    1a5c:	7f 93       	push	r23
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	af 93       	push	r26
    1a64:	bf 93       	push	r27
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    1a72:	80 91 76 00 	lds	r24, 0x0076
    1a76:	90 91 77 00 	lds	r25, 0x0077
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	29 f0       	breq	.+10     	; 0x1a88 <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    1a7e:	e0 91 76 00 	lds	r30, 0x0076
    1a82:	f0 91 77 00 	lds	r31, 0x0077
    1a86:	09 95       	icall
	}
}
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	ff 91       	pop	r31
    1a8e:	ef 91       	pop	r30
    1a90:	bf 91       	pop	r27
    1a92:	af 91       	pop	r26
    1a94:	9f 91       	pop	r25
    1a96:	8f 91       	pop	r24
    1a98:	7f 91       	pop	r23
    1a9a:	6f 91       	pop	r22
    1a9c:	5f 91       	pop	r21
    1a9e:	4f 91       	pop	r20
    1aa0:	3f 91       	pop	r19
    1aa2:	2f 91       	pop	r18
    1aa4:	0f 90       	pop	r0
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	0f 90       	pop	r0
    1aaa:	1f 90       	pop	r1
    1aac:	18 95       	reti

00001aae <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    1aae:	1f 92       	push	r1
    1ab0:	0f 92       	push	r0
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	0f 92       	push	r0
    1ab6:	11 24       	eor	r1, r1
    1ab8:	2f 93       	push	r18
    1aba:	3f 93       	push	r19
    1abc:	4f 93       	push	r20
    1abe:	5f 93       	push	r21
    1ac0:	6f 93       	push	r22
    1ac2:	7f 93       	push	r23
    1ac4:	8f 93       	push	r24
    1ac6:	9f 93       	push	r25
    1ac8:	af 93       	push	r26
    1aca:	bf 93       	push	r27
    1acc:	ef 93       	push	r30
    1ace:	ff 93       	push	r31
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    1ad8:	80 91 74 00 	lds	r24, 0x0074
    1adc:	90 91 75 00 	lds	r25, 0x0075
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	29 f0       	breq	.+10     	; 0x1aee <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    1ae4:	e0 91 74 00 	lds	r30, 0x0074
    1ae8:	f0 91 75 00 	lds	r31, 0x0075
    1aec:	09 95       	icall
	}
}
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	ff 91       	pop	r31
    1af4:	ef 91       	pop	r30
    1af6:	bf 91       	pop	r27
    1af8:	af 91       	pop	r26
    1afa:	9f 91       	pop	r25
    1afc:	8f 91       	pop	r24
    1afe:	7f 91       	pop	r23
    1b00:	6f 91       	pop	r22
    1b02:	5f 91       	pop	r21
    1b04:	4f 91       	pop	r20
    1b06:	3f 91       	pop	r19
    1b08:	2f 91       	pop	r18
    1b0a:	0f 90       	pop	r0
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	0f 90       	pop	r0
    1b10:	1f 90       	pop	r1
    1b12:	18 95       	reti

00001b14 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    1b14:	1f 92       	push	r1
    1b16:	0f 92       	push	r0
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	0f 92       	push	r0
    1b1c:	11 24       	eor	r1, r1
    1b1e:	2f 93       	push	r18
    1b20:	3f 93       	push	r19
    1b22:	4f 93       	push	r20
    1b24:	5f 93       	push	r21
    1b26:	6f 93       	push	r22
    1b28:	7f 93       	push	r23
    1b2a:	8f 93       	push	r24
    1b2c:	9f 93       	push	r25
    1b2e:	af 93       	push	r26
    1b30:	bf 93       	push	r27
    1b32:	ef 93       	push	r30
    1b34:	ff 93       	push	r31
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	cd b7       	in	r28, 0x3d	; 61
    1b3c:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    1b3e:	80 91 72 00 	lds	r24, 0x0072
    1b42:	90 91 73 00 	lds	r25, 0x0073
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	29 f0       	breq	.+10     	; 0x1b54 <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    1b4a:	e0 91 72 00 	lds	r30, 0x0072
    1b4e:	f0 91 73 00 	lds	r31, 0x0073
    1b52:	09 95       	icall
	}
}
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	ff 91       	pop	r31
    1b5a:	ef 91       	pop	r30
    1b5c:	bf 91       	pop	r27
    1b5e:	af 91       	pop	r26
    1b60:	9f 91       	pop	r25
    1b62:	8f 91       	pop	r24
    1b64:	7f 91       	pop	r23
    1b66:	6f 91       	pop	r22
    1b68:	5f 91       	pop	r21
    1b6a:	4f 91       	pop	r20
    1b6c:	3f 91       	pop	r19
    1b6e:	2f 91       	pop	r18
    1b70:	0f 90       	pop	r0
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	0f 90       	pop	r0
    1b76:	1f 90       	pop	r1
    1b78:	18 95       	reti

00001b7a <main>:
 *      Author: Merna Atef
 */
#include <avr/io.h>

int main(void)
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <main+0x6>
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <main+0x8>
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    unsigned int adcResult, adcOld = 0;
    1b86:	1a 82       	std	Y+2, r1	; 0x02
    1b88:	19 82       	std	Y+1, r1	; 0x01

    // Configure PA0 (ADC0) as input
    DDRA = 0x00; // All pins of PORTA as input
    1b8a:	ea e3       	ldi	r30, 0x3A	; 58
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	10 82       	st	Z, r1

    // Configure PB3 for PWM output
    DDRB |= (1 << DDB3); // Set PB3 as output
    1b90:	a7 e3       	ldi	r26, 0x37	; 55
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e7 e3       	ldi	r30, 0x37	; 55
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	88 60       	ori	r24, 0x08	; 8
    1b9c:	8c 93       	st	X, r24

    // Initialize ADC
    ADMUX = (1 << REFS0); // AVCC with external capacitor at AREF pin, ADC0
    1b9e:	e7 e2       	ldi	r30, 0x27	; 39
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 e4       	ldi	r24, 0x40	; 64
    1ba4:	80 83       	st	Z, r24
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Enable ADC and set prescaler to 128
    1ba6:	e6 e2       	ldi	r30, 0x26	; 38
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	87 e8       	ldi	r24, 0x87	; 135
    1bac:	80 83       	st	Z, r24

    // Configure Timer0 for Phase Correct PWM
    TCCR0 = (1 << COM01) | (1 << WGM00) | (1 << CS01) | (1 << CS00); // Phase Correct PWM mode, prescaler 64
    1bae:	e3 e5       	ldi	r30, 0x53	; 83
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	83 e6       	ldi	r24, 0x63	; 99
    1bb4:	80 83       	st	Z, r24

    while (1)
    {
        // Start ADC conversion
        ADCSRA |= (1 << ADSC);
    1bb6:	a6 e2       	ldi	r26, 0x26	; 38
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e6 e2       	ldi	r30, 0x26	; 38
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	80 64       	ori	r24, 0x40	; 64
    1bc2:	8c 93       	st	X, r24

        // Wait for ADC conversion to complete
        while (ADCSRA & (1 << ADSC));
    1bc4:	e6 e2       	ldi	r30, 0x26	; 38
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	88 2f       	mov	r24, r24
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	80 74       	andi	r24, 0x40	; 64
    1bd0:	90 70       	andi	r25, 0x00	; 0
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	b9 f7       	brne	.-18     	; 0x1bc4 <main+0x4a>

        // Read ADC result
        adcResult = ADC; // ADC is a register that combines ADCL and ADCH
    1bd6:	e4 e2       	ldi	r30, 0x24	; 36
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	9c 83       	std	Y+4, r25	; 0x04
    1be0:	8b 83       	std	Y+3, r24	; 0x03

        // Update PWM duty cycle if ADC result has changed
        if (adcResult != adcOld)
    1be2:	2b 81       	ldd	r18, Y+3	; 0x03
    1be4:	3c 81       	ldd	r19, Y+4	; 0x04
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bea:	28 17       	cp	r18, r24
    1bec:	39 07       	cpc	r19, r25
    1bee:	c9 f0       	breq	.+50     	; 0x1c22 <main+0xa8>
        {
            // Scale ADC value to fit PWM range (0 to 255)
            OCR0 = (adcResult * 255) / 1023; // Map 10-bit ADC result to 8-bit PWM value
    1bf0:	ec e5       	ldi	r30, 0x5C	; 92
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	4b 81       	ldd	r20, Y+3	; 0x03
    1bf6:	5c 81       	ldd	r21, Y+4	; 0x04
    1bf8:	ca 01       	movw	r24, r20
    1bfa:	9c 01       	movw	r18, r24
    1bfc:	22 0f       	add	r18, r18
    1bfe:	33 1f       	adc	r19, r19
    1c00:	c9 01       	movw	r24, r18
    1c02:	96 95       	lsr	r25
    1c04:	98 2f       	mov	r25, r24
    1c06:	88 27       	eor	r24, r24
    1c08:	97 95       	ror	r25
    1c0a:	87 95       	ror	r24
    1c0c:	82 1b       	sub	r24, r18
    1c0e:	93 0b       	sbc	r25, r19
    1c10:	84 0f       	add	r24, r20
    1c12:	95 1f       	adc	r25, r21
    1c14:	2f ef       	ldi	r18, 0xFF	; 255
    1c16:	33 e0       	ldi	r19, 0x03	; 3
    1c18:	b9 01       	movw	r22, r18
    1c1a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__udivmodhi4>
    1c1e:	cb 01       	movw	r24, r22
    1c20:	80 83       	st	Z, r24
        }

        // Store the old ADC result
        adcOld = adcResult;
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	c5 cf       	rjmp	.-118    	; 0x1bb6 <main+0x3c>

00001c2c <__udivmodhi4>:
    1c2c:	aa 1b       	sub	r26, r26
    1c2e:	bb 1b       	sub	r27, r27
    1c30:	51 e1       	ldi	r21, 0x11	; 17
    1c32:	07 c0       	rjmp	.+14     	; 0x1c42 <__udivmodhi4_ep>

00001c34 <__udivmodhi4_loop>:
    1c34:	aa 1f       	adc	r26, r26
    1c36:	bb 1f       	adc	r27, r27
    1c38:	a6 17       	cp	r26, r22
    1c3a:	b7 07       	cpc	r27, r23
    1c3c:	10 f0       	brcs	.+4      	; 0x1c42 <__udivmodhi4_ep>
    1c3e:	a6 1b       	sub	r26, r22
    1c40:	b7 0b       	sbc	r27, r23

00001c42 <__udivmodhi4_ep>:
    1c42:	88 1f       	adc	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	5a 95       	dec	r21
    1c48:	a9 f7       	brne	.-22     	; 0x1c34 <__udivmodhi4_loop>
    1c4a:	80 95       	com	r24
    1c4c:	90 95       	com	r25
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	08 95       	ret

00001c54 <_exit>:
    1c54:	f8 94       	cli

00001c56 <__stop_program>:
    1c56:	ff cf       	rjmp	.-2      	; 0x1c56 <__stop_program>
